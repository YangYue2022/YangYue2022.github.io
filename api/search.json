[{"id":"cd53cdbf97b8f99c953dd3eda45eed25","title":"SpringMVC","content":"Spring MVC\n\n\n项目结构\n\ncontroller 控制层\ndao 数据访问层\nservice 业务层\nmodel 是自带结构\n模板文件放在 templates\n\nmodel 和模板文件通过模板引擎 Thymeleaf 形成 HTML\nrequest&amp;response@RequestMapping(\"/http\")\npublic void http(HttpServletRequest request, HttpServletResponse response)&#123;\n    //获取请求数据\n    System.out.println(request.getMethod());\n    System.out.println(request.getServletPath());\n    Enumeration&lt;String> enumeration=request.getHeaderNames();\n    while (enumeration.hasMoreElements())&#123;\n        String name=enumeration.nextElement();\n        String value=request.getHeader(name);\n        System.out.println(name+\":\"+value);\n    &#125;\n    System.out.println(request.getParameter(\"code\"));\n\n    //返回响应数据\n    response.setContentType(\"text/html;charset=utf-8\");\n    try(\n            PrintWriter writer=response.getWriter();\n            ) &#123;\n        //输出流\n        writer.write(\"&lt;h1>学院论坛&lt;/h1>\");\n    &#125; catch (IOException e) &#123;\n        throw new RuntimeException(e);\n    &#125;\n    System.out.println();\n&#125;\n\n浏览器显示：学院论坛\n\n命令行显示：\nGET&#x2F;alpha&#x2F;httphost:localhost:8080connection:keep-alivesec-ch-ua:”Chromium”;v&#x3D;”110”, “Not A(Brand”;v&#x3D;”24”, “Microsoft Edge”;v&#x3D;”110”sec-ch-ua-mobile:?0sec-ch-ua-platform:”Windows”upgrade-insecure-requests:1user-agent:Mozilla&#x2F;5.0 (Windows NT 10.0; Win64; x64) AppleWebKit&#x2F;537.36 (KHTML, like Gecko) Chrome&#x2F;110.0.0.0 Safari&#x2F;537.36 Edg&#x2F;110.0.1587.57accept:text&#x2F;html,application&#x2F;xhtml+xml,application&#x2F;xml;q&#x3D;0.9,image&#x2F;webp,image&#x2F;apng,&#x2F;;q&#x3D;0.8,application&#x2F;signed-exchange;v&#x3D;b3;q&#x3D;0.7sec-fetch-site:nonesec-fetch-mode:navigatesec-fetch-user:?1sec-fetch-dest:documentaccept-encoding:gzip, deflate, braccept-language:zh-CN,zh;q&#x3D;0.9,en;q&#x3D;0.8,en-GB;q&#x3D;0.7,en-US;q&#x3D;0.6cookie:Hm_lvt_eefa59dfd5fb29fcc57a8b2437ad5ab1&#x3D;1654502733,1654736646; Hm_lvt_e4027971a230b210f4671f485b33846a&#x3D;1677157216123\nGET 请求的两种传参方式// /student?current=1&amp;limit=20\n@RequestMapping(path=\"/students\",method = RequestMethod.GET)\n@ResponseBody\npublic String getStudent(\n        @RequestParam(name=\"current\",required=false,defaultValue=\"1\")int current,\n        @RequestParam(name=\"limit\",required=false,defaultValue=\"10\")int limit)&#123;\n    System.out.println(current);\n    System.out.println(limit);\n    return \"some students\";\n&#125;\n\n// /student/123\n@RequestMapping(path = \"/student/&#123;id&#125;\",method = RequestMethod.GET)\n@ResponseBody\npublic String getStudent(@PathVariable(\"id\") int id)&#123;\n    System.out.println(id);\n    return \"a student\";\n&#125;\n\nPOST 请求传参在静态页面写一个表单\n&lt;form action=\"/community/alpha/student\" method=\"post\">\n  &lt;p>姓名：&lt;input name=\"name\" tupe=\"text\" />&lt;/p>\n  &lt;p>年龄：&lt;input name=\"age\" type=\"text\" />&lt;/p>\n  &lt;p>\n    &lt;input type=\"submit\" value=\"保存\" />\n  &lt;/p>\n&lt;/form>\n\n//POST请求\n@RequestMapping(path = \"/student\",method = RequestMethod.POST)\n@ResponseBody\npublic String saveStudent(String name,int age)&#123;\n    System.out.println(name);\n    System.out.println(age);\n    return \"success\";\n&#125;\n\n变量名称相同会自动获取（get 同理）\n\n\n\n\n\n\n\n\n\nget 用来获取参数，post 用来传参（其实 get 也能传参，但是数据都在路径上，且路径长度有限）\n向浏览器响应动态 html\n使用 ModelAndView\n\n//响应html\n@RequestMapping(path = \"/teacher\",method = RequestMethod.GET)\npublic ModelAndView getTeacher()&#123;\n    ModelAndView mav=new ModelAndView();\n    mav.addObject(\"name\",\"张三\");\n    mav.addObject(\"age\",\"30\");\n    mav.setViewName(\"/demo/view\");\n    return mav;\n&#125;\n\n&lt;!DOCTYPE html>\n&lt;html lang=\"en\" xmlns:th=\"http://www.thymeleaf.org\">\n  &lt;head>\n    &lt;meta charset=\"UTF-8\" />\n    &lt;title>Teacher&lt;/title>\n  &lt;/head>\n  &lt;body>\n    &lt;p th:text=\"$&#123;name&#125;\">&lt;/p>\n    &lt;p th:text=\"$&#123;age&#125;\">&lt;/p>\n  &lt;/body>\n&lt;/html>\n\n\n使用 Model，返回 view 的 path，交给 dispatcherServlet\n\n@RequestMapping(path = \"/school\" ,method=RequestMethod.GET)\npublic String getSchool(Model model)&#123;\n  model.addAttribute(\"name\",\"北大\");\n  model.addAttribute(\"age\",\"80\"); return \"/demo/view\";\n&#125;\n\n向浏览器响应 json 文件通常用于异步请求，比如注册时昵称是否被占用\nDispatcherServelt 检测到 map 会自动转换成 json 文件\n@RequestMapping(path = \"/emp\",method = RequestMethod.GET)\n@ResponseBody\npublic Map&lt;String,Object> getEmp()&#123;\n    Map&lt;String,Object> emp=new HashMap&lt;>();\n    emp.put(\"name\",\"张三\");\n    emp.put(\"age\",\"23\");\n    emp.put(\"salary\",\"8000\");\n    return emp;\n&#125;\n\n浏览器显示：\n&#123; \"name\": \"张三\", \"salary\": \"8000\", \"age\": \"23\" &#125;\n","slug":"SpringMVC","date":"2023-03-02T16:00:00.000Z","categories_index":"","tags_index":"Spring","author_index":"Serena"},{"id":"7a897380fbf2b52c7fdc533d413e1985","title":"MyBatis","content":"MyBatismysql 密码：yang\n\n配置数据库路径加入 mysql 和 mybatis 依赖\n连接池配置\n# DataSourceProperties\nspring.datasource.driver-class-name=com.mysql.cj.jdbc.Driver\nspring.datasource.url=jdbc:mysql://localhost:3306/community?characterEncoding=utf-8&amp;useSSL=false&amp;serverTimezone=Hongkong\nspring.datasource.username=root\nspring.datasource.password=yang\nspring.datasource.type=com.zaxxer.hikari.HikariDataSource\nspring.datasource.hikari.maximum-pool-size=15\nspring.datasource.hikari.minimum-idle=5\nspring.datasource.hikari.idle-timeout=30000\n\nmybatis 配置，用 entity 类封装表里的数据\n# MybatisProperties\nmybatis.mapper-locations=classpath:mapper/*.xml\nmybatis.type-aliases-package=com.nowcoder.community.entity\nmybatis.configuration.useGeneratedKeys=true\nmybatis.configuration.mapUnderscoreToCamelCase=true\n\nmapper 使用方法\n实体类：get set 函数\ndao 类：设置 mapper 接口，定义对实体类进行操作的函数insert 和 update 返回 int，表示修改行数select 返回 user 实体类\nresources&#x2F;mapper 中：mapper.xml 写函数对应的 sql 操作mybatis 官网查找对应模板id 即对应的函数\n\n&lt;?xml version=\"1.0\" encoding=\"UTF-8\" ?>\n&lt;!DOCTYPE mapper\n        PUBLIC \"-//mybatis.org//DTD Mapper 3.0//EN\"\n        \"http://mybatis.org/dtd/mybatis-3-mapper.dtd\">\n&lt;mapper namespace=\"com.nowcoder.community.dao.UserMapper\">\n\n    &lt;sql id=\"insertFields\">\n        username, password, salt, email, type, status, activation_code, header_url, create_time\n    &lt;/sql>\n\n    &lt;sql id=\"selectFields\">\n        id, username, password, salt, email, type, status, activation_code, header_url, create_time\n    &lt;/sql>\n\n    &lt;select id=\"selectById\" resultType=\"User\">\n        select &lt;include refid=\"selectFields\">&lt;/include>\n        from user\n        where id = #&#123;id&#125;\n    &lt;/select>\n\n    &lt;insert id=\"insertUser\" parameterType=\"User\" keyProperty=\"id\">\n        insert into user (&lt;include refid=\"insertFields\">&lt;/include>)\n        values(#&#123;username&#125;, #&#123;password&#125;, #&#123;salt&#125;, #&#123;email&#125;, #&#123;type&#125;, #&#123;status&#125;, #&#123;activationCode&#125;, #&#123;headerUrl&#125;, #&#123;createTime&#125;)\n    &lt;/insert>\n\n    &lt;update id=\"updateStatus\">\n        update user set status = #&#123;status&#125; where id = #&#123;id&#125;\n    &lt;/update>\n&lt;/mapper>\n","slug":"MyBatis","date":"2023-03-02T16:00:00.000Z","categories_index":"","tags_index":"Spring","author_index":"Serena"},{"id":"946249c65165e1a3d66f50e0cb6e89e7","title":"Spring","content":"Spring Boot 核心作用\n起步依赖\n\n​ 使用Spring Initializr进行项目配置：aop thymeleaf web devtools\n\n自动配置\n\n端点监控\n\n\nSpring IoC\nInversion of Control -控制反转，是一种面向对象编程的设计思想\n\nDependency Injection -依赖注入，IoC 的实现方式\n\nIoC Container -IoC 容器，实现依赖注入的关键，本质是一个工厂\n\n\n\nSpring&amp;Bean配置类底层自动创建 spring 容器\nApplicationContext 即 Spring 容器，这个接口继承于 BeanFactor（Spring 容器的顶层接口）\n@SpringBootApplication\npublic class CommunityApplication &#123;\n\tpublic static void main(String[] args) &#123;\n\t\tSpringApplication.run(CommunityApplication.class, args);\n\t&#125;\n&#125;\n\n@SpringBootApplication 表明这是一个配置类\n\n进入 SpringBootApplication.java\n@SpringBootConfiguration\n@EnableAutoConfiguration //自动配置\n@ComponentScan(excludeFilters = &#123; @Filter(type = FilterType.CUSTOM, classes = TypeExcludeFilter.class),\n      @Filter(type = FilterType.CUSTOM, classes = AutoConfigurationExcludeFilter.class) &#125;) //扫描配置类所在包以及子包下的bean\n\nbean 内有相应注解才会被扫描\n@Controller //请求\nService //业务\nRepository //数据库访问\nComponent //通用\n\n均由 Component 实现\n\ngetBean()一个类想实现 Spring 容器，要实现 ApplicationContextAware 接口\n@SpringBootTest\n@ContextConfiguration(classes = CommunityApplication.class) //设置配置类\nclass CommunityApplicationTests implements ApplicationContextAware &#123;\n\tprivate ApplicationContext applicationContext;\n\n\t@Override\n\tpublic void setApplicationContext(ApplicationContext applicationContext) throws BeansException &#123;\n\t\tthis.applicationContext=applicationContext;\n\t&#125;\n\n\t@Test\n\tpublic void testApplicationContext()&#123;\n\t\tSystem.out.println(applicationContext);\n\t&#125;\n&#125;\n\nAlphaDao alphadao&#x3D;applicationContext.getBean(AlphaDao.class); &#x2F;&#x2F;按类型获取bean\n\n\n如果 Bean 冲突了怎么办？在要获取的 Bean 加入\n\n\n\n\n\n\n\n\n\n@Primary\n或者给 Bean 起名字\n@Repository(\"AlphaHibernate\")\n\nalphadao=applicationContext.getBean(\"AlphaHibernate\",AlphaDao.class);\n\n\nBean 管理public  AlphaService()&#123;\n    System.out.println(\"实例化AlphaService\");\n&#125;\n\n@PostConstruct\npublic void init()&#123;\n    System.out.println(\"初始化AlphaService\");\n&#125;\n\n@PreDestroy\npublic void destory()&#123;\n    System.out.println(\"销毁AlphaService\");\n&#125;\n\n默认 Bean 是单例模式的，想要同样的类出现多个不同的 bean，需要注释\n@Scope(\"prototype\") //默认singleton\n\n\n如果想要导入第三方的 bean 怎么办？\n创建一个 config 文件\n@Configuration\npublic class AlphaConfig &#123;\n    @Bean\n    public SimpleDateFormat simpleDateFormat()&#123;\n        return new SimpleDateFormat(\"yyyy-MM-dd HH:mm:ss\");\n    &#125;\n&#125;\n\n更简单的方法？-&gt;依赖注入将 AlphaDao 注入 alphaDao\n@Autowired\n\tprivate AlphaDao alphaDao;\n\n指定注入的 bean\n@Autowired\n@Qualifier(&quot;AlphaHibernate&quot;)\nprivate AlphaDao alphaDao;\n\n请求的执行过程\n","slug":"Spring","date":"2023-02-28T16:00:00.000Z","categories_index":"","tags_index":"Spring","author_index":"Serena"},{"id":"cf26a6b1cbc6c769e4f860791ff7a888","title":"maven配置","content":"maven 命令使用maven 作用：构建项目，管理 jar 包技术文档：Maven – Maven in 5 Minutes (apache.org)\n配置中心仓库，镜像仓库\n查看版本\nmvn -version\n\n以 maven 自带模板建立一个项目（没有 class）\nmvn archetype:generate -DgroupId&#x3D;com.mycompany.app -DartifactId&#x3D;my-app -DarchetypeArtifactId&#x3D;maven-archetype-quickstart -DarchetypeVersion&#x3D;1.4 -DinteractiveMode&#x3D;false\n\n编译项目（出现 classes）\nmvn compile\n\n清空项目并测试（test-classes）\nmvn clean test\n\n\n找不到 org.junit，通过重新安装解决。。。\n依赖中出现了\n\n\n仍然不知道为什么\n","slug":"maven配置","date":"2023-02-28T08:36:26.000Z","categories_index":"","tags_index":"环境配置","author_index":"Serena"},{"id":"46426c79fe8370cebf57bb63c792f570","title":"hello","content":"欢迎来到我的个人博客这是一个使用 Hexo Aurora 建立的静态博客文档：https://aurora.tridiamond.tech/zh/guide/范例：https://abyssaler.github.io/Markdown 语法：https://markdown.com.cn/basic-syntax/\n评论留言功能敬请期待","slug":"hello","date":"2023-02-22T16:00:00.000Z","categories_index":"","tags_index":"介绍","author_index":"Serena"}]