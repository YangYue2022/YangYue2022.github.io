[{"id":"1d8367bae1fc3e1c30eeebdf6d0e5cc0","title":"初始Spring","content":"Spring Boot 核心作用\n起步依赖\n\n​ 使用Spring Initializr进行项目配置：aop thymeleaf web devtools\n\n自动配置\n\n端点监控\n\n\nSpring IoC\nInversion of Control -控制反转，是一种面向对象编程的设计思想\n\nDependency Injection -依赖注入，IoC 的实现方式\n\nIoC Container -IoC 容器，实现依赖注入的关键，本质是一个工厂\n\n\n\nSpring&amp;Bean配置类底层自动创建 spring 容器\nApplicationContext 即 Spring 容器，这个接口继承于 BeanFactor（Spring 容器的顶层接口）\n@SpringBootApplication\npublic class CommunityApplication &#123;\n\tpublic static void main(String[] args) &#123;\n\t\tSpringApplication.run(CommunityApplication.class, args);\n\t&#125;\n&#125;\n\n@SpringBootApplication 表明这是一个配置类\n\n进入 SpringBootApplication.java\n@SpringBootConfiguration\n@EnableAutoConfiguration //自动配置\n@ComponentScan(excludeFilters = &#123; @Filter(type = FilterType.CUSTOM, classes = TypeExcludeFilter.class),\n      @Filter(type = FilterType.CUSTOM, classes = AutoConfigurationExcludeFilter.class) &#125;) //扫描配置类所在包以及子包下的bean\n\nbean 内有相应注解才会被扫描\n@Controller //请求\nService //业务\nRepository //数据库访问\nComponent //通用\n\n均由 Component 实现\n\ngetBean()一个类想实现 Spring 容器，要实现 ApplicationContextAware 接口\n@SpringBootTest\n@ContextConfiguration(classes = CommunityApplication.class) //设置配置类\nclass CommunityApplicationTests implements ApplicationContextAware &#123;\n\tprivate ApplicationContext applicationContext;\n\n\t@Override\n\tpublic void setApplicationContext(ApplicationContext applicationContext) throws BeansException &#123;\n\t\tthis.applicationContext=applicationContext;\n\t&#125;\n\n\t@Test\n\tpublic void testApplicationContext()&#123;\n\t\tSystem.out.println(applicationContext);\n\t&#125;\n&#125;\n\nAlphaDao alphadao&#x3D;applicationContext.getBean(AlphaDao.class); &#x2F;&#x2F;按类型获取bean\n\n\n如果 Bean 冲突了怎么办？在要获取的 Bean 加入\n\n\n\n\n\n\n\n\n\n@Primary\n或者给 Bean 起名字\n@Repository(\"AlphaHibernate\")\n\nalphadao=applicationContext.getBean(\"AlphaHibernate\",AlphaDao.class);\n\n\nBean 管理public  AlphaService()&#123;\n    System.out.println(\"实例化AlphaService\");\n&#125;\n\n@PostConstruct\npublic void init()&#123;\n    System.out.println(\"初始化AlphaService\");\n&#125;\n\n@PreDestroy\npublic void destory()&#123;\n    System.out.println(\"销毁AlphaService\");\n&#125;\n\n默认 Bean 是单例模式的，想要同样的类出现多个不同的 bean，需要注释\n@Scope(\"prototype\") //默认singleton\n\n\n如果想要导入第三方的 bean 怎么办？\n创建一个 config 文件\n@Configuration\npublic class AlphaConfig &#123;\n    @Bean\n    public SimpleDateFormat simpleDateFormat()&#123;\n        return new SimpleDateFormat(\"yyyy-MM-dd HH:mm:ss\");\n    &#125;\n&#125;\n\n更简单的方法？-&gt;依赖注入将 AlphaDao 注入 alphaDao\n@Autowired\n\tprivate AlphaDao alphaDao;\n\n指定注入的 bean\n@Autowired\n@Qualifier(&quot;AlphaHibernate&quot;)\nprivate AlphaDao alphaDao;\n","slug":"初始Spring","date":"2023-02-28T16:00:00.000Z","categories_index":"","tags_index":"Spring","author_index":"Serena"},{"id":"cf26a6b1cbc6c769e4f860791ff7a888","title":"maven配置","content":"maven 命令使用maven 作用：构建项目，管理 jar 包技术文档：Maven – Maven in 5 Minutes (apache.org)\n配置中心仓库，镜像仓库\n查看版本\nmvn -version\n\n以 maven 自带模板建立一个项目（没有 class）\nmvn archetype:generate -DgroupId&#x3D;com.mycompany.app -DartifactId&#x3D;my-app -DarchetypeArtifactId&#x3D;maven-archetype-quickstart -DarchetypeVersion&#x3D;1.4 -DinteractiveMode&#x3D;false\n\n编译项目（出现 classes）\nmvn compile\n\n清空项目并测试（test-classes）\nmvn clean test\n\n\n找不到 org.junit，通过重新安装解决。。。\n依赖中出现了\n\n\n仍然不知道为什么\n","slug":"maven配置","date":"2023-02-28T08:36:26.000Z","categories_index":"","tags_index":"环境配置","author_index":"Serena"},{"id":"46426c79fe8370cebf57bb63c792f570","title":"hello","content":"欢迎来到我的个人博客这是一个使用 Hexo Aurora 建立的静态博客文档：https://aurora.tridiamond.tech/zh/guide/范例：https://abyssaler.github.io/Markdown 语法：https://markdown.com.cn/basic-syntax/\n评论留言功能敬请期待","slug":"hello","date":"2023-02-22T16:00:00.000Z","categories_index":"","tags_index":"介绍","author_index":"Serena"}]