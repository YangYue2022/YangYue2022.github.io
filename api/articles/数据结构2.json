{"title":"数据结构（2）","uid":"36c6381217e805c389535529f356949e","slug":"数据结构2","date":"2023-03-16T16:00:00.000Z","updated":"2023-03-17T06:03:02.373Z","comments":true,"path":"api/articles/数据结构2.json","keywords":null,"cover":[],"content":"<h1 id=\"图\"><a href=\"#图\" class=\"headerlink\" title=\"图\"></a>图</h1><h2 id=\"图的存储方式\"><a href=\"#图的存储方式\" class=\"headerlink\" title=\"图的存储方式\"></a>图的存储方式</h2><h3 id=\"邻接矩阵法\"><a href=\"#邻接矩阵法\" class=\"headerlink\" title=\"邻接矩阵法\"></a>邻接矩阵法</h3><p><img src=\"/img/image-20230313223516049.png\" alt=\"image-20230313223516049\"></p>\n<p><img src=\"/img/image-20230313223637370.png\" alt=\"image-20230313223637370\"></p>\n<p><img src=\"/img/image-20230313223829895.png\" alt=\"image-20230313223829895\"></p>\n<p>空间复杂度 O(n2)，不适合存储稀疏图，浪费空间</p>\n<p><img src=\"/img/image-20230313224517069.png\" alt=\"image-20230313224517069\"></p>\n<p>矩阵相乘：A^(2)得到的矩阵代表从顶点 i 到 j 长度为 2 的路径条数</p>\n<h3 id=\"邻接表法\"><a href=\"#邻接表法\" class=\"headerlink\" title=\"邻接表法\"></a>邻接表法</h3><p><img src=\"/img/image-20230313230403900.png\" alt=\"image-20230313230403900\"></p>\n<h3 id=\"十字链表（有向图）\"><a href=\"#十字链表（有向图）\" class=\"headerlink\" title=\"十字链表（有向图）\"></a>十字链表（有向图）</h3><p><img src=\"/img/image-20230313231523141.png\" alt=\"image-20230313231523141\"></p>\n<h3 id=\"邻接多重表（无向图）\"><a href=\"#邻接多重表（无向图）\" class=\"headerlink\" title=\"邻接多重表（无向图）\"></a>邻接多重表（无向图）</h3><p>当使用邻接表存储时，一条边会对应两份冗余数据，删除节点时很麻烦</p>\n<p><img src=\"/img/image-20230313232435790.png\" alt=\"image-20230313232435790\"></p>\n<hr>\n<p><img src=\"/img/image-20230313232804158.png\" alt=\"image-20230313232804158\"></p>\n<h2 id=\"遍历\"><a href=\"#遍历\" class=\"headerlink\" title=\"遍历\"></a>遍历</h2><pre class=\"line-numbers language-c\" data-language=\"c\"><code class=\"language-c\"><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;stdio.h></span></span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;stdlib.h></span></span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;queue></span> <span class=\"token comment\">// 借助队列，实现广度优先遍历</span></span>\nusing namespace std<span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">//用邻接矩阵存储的无向图</span>\n\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">define</span> <span class=\"token macro-name\">MAXVEX</span>  <span class=\"token expression\"><span class=\"token number\">100</span>                      </span><span class=\"token comment\">//最大顶点数</span></span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">define</span> <span class=\"token macro-name\">INFINITY</span>    <span class=\"token expression\"><span class=\"token number\">65535</span>               </span><span class=\"token comment\">//用65535来代表无穷大</span></span>\n\n\nbool visited<span class=\"token punctuation\">[</span>MAXVEX<span class=\"token punctuation\">]</span><span class=\"token operator\">=</span><span class=\"token punctuation\">&#123;</span>false<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span>\n\n\n<span class=\"token keyword\">typedef</span> <span class=\"token keyword\">struct</span>\n<span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">int</span> vexs<span class=\"token punctuation\">[</span>MAXVEX<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>            <span class=\"token comment\">//顶点表</span>\n    <span class=\"token keyword\">int</span>  arc<span class=\"token punctuation\">[</span>MAXVEX<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>MAXVEX<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>         <span class=\"token comment\">//邻接矩阵，可看作边</span>\n    <span class=\"token keyword\">int</span>  numVertexes<span class=\"token punctuation\">,</span> numEdges<span class=\"token punctuation\">;</span>      <span class=\"token comment\">//图中当前的顶点数和边数</span>\n<span class=\"token punctuation\">&#125;</span>Graph<span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">int</span> <span class=\"token function\">findIndex</span><span class=\"token punctuation\">(</span>Graph g<span class=\"token punctuation\">,</span><span class=\"token keyword\">int</span> i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n\t<span class=\"token comment\">//找到i对应的下标</span>\n\t<span class=\"token keyword\">int</span> index<span class=\"token operator\">=</span><span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> j<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span>j<span class=\"token operator\">&lt;</span>g<span class=\"token punctuation\">.</span>numVertexes<span class=\"token punctuation\">;</span>j<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n\t\t<span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>g<span class=\"token punctuation\">.</span>vexs<span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span><span class=\"token operator\">==</span>i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n\t\t\tindex<span class=\"token operator\">=</span>j<span class=\"token punctuation\">;</span>\n\t\t\t<span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token punctuation\">&#125;</span>\n\t<span class=\"token punctuation\">&#125;</span>\n\t<span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>index<span class=\"token operator\">==</span><span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n\t\t<span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"图中不存在对应节点\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">&#125;</span>\n\t<span class=\"token keyword\">return</span> index<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token keyword\">void</span> <span class=\"token function\">CreateGraph</span><span class=\"token punctuation\">(</span>Graph <span class=\"token operator\">&amp;</span>G<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n\t<span class=\"token comment\">/*初始化图的基本信息*/</span>\n\t<span class=\"token comment\">//输入图中顶点</span>\n\t<span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"请输入图中顶点数量：\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token function\">scanf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%d\"</span><span class=\"token punctuation\">,</span><span class=\"token operator\">&amp;</span>G<span class=\"token punctuation\">.</span>numVertexes<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span>i<span class=\"token operator\">&lt;</span>G<span class=\"token punctuation\">.</span>numVertexes<span class=\"token punctuation\">;</span>i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n\t\t<span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"请输入第%d个顶点:\"</span><span class=\"token punctuation\">,</span>i<span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token function\">scanf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%d\"</span><span class=\"token punctuation\">,</span><span class=\"token operator\">&amp;</span>G<span class=\"token punctuation\">.</span>vexs<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">&#125;</span>\n\t<span class=\"token comment\">//输入图中的边</span>\n\t<span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"请输入图中边的数量：\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token function\">scanf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%d\"</span><span class=\"token punctuation\">,</span><span class=\"token operator\">&amp;</span>G<span class=\"token punctuation\">.</span>numEdges<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token comment\">//初始化邻接矩阵</span>\n\t<span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span>i<span class=\"token operator\">&lt;</span>G<span class=\"token punctuation\">.</span>numVertexes<span class=\"token punctuation\">;</span>i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n\t\t<span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> j<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span>j<span class=\"token operator\">&lt;</span>G<span class=\"token punctuation\">.</span>numVertexes<span class=\"token punctuation\">;</span>j<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n\t\t\tG<span class=\"token punctuation\">.</span>arc<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">//初始化时顶点间都不存在边</span>\n\t\t<span class=\"token punctuation\">&#125;</span>\n\t<span class=\"token punctuation\">&#125;</span>\n\t<span class=\"token comment\">//构造邻接矩阵</span>\n\t<span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> k<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span>k<span class=\"token operator\">&lt;</span>G<span class=\"token punctuation\">.</span>numEdges<span class=\"token punctuation\">;</span>k<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n\t\t<span class=\"token keyword\">int</span> v1<span class=\"token punctuation\">,</span>v2<span class=\"token punctuation\">;</span>\n\t\t<span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"请输入第%d条边（如：AB):\"</span><span class=\"token punctuation\">,</span>k<span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token function\">scanf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%d %d\"</span><span class=\"token punctuation\">,</span><span class=\"token operator\">&amp;</span>v1<span class=\"token punctuation\">,</span><span class=\"token operator\">&amp;</span>v2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token keyword\">int</span> i<span class=\"token operator\">=</span><span class=\"token function\">findIndex</span><span class=\"token punctuation\">(</span>G<span class=\"token punctuation\">,</span>v1<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token keyword\">int</span> j<span class=\"token operator\">=</span><span class=\"token function\">findIndex</span><span class=\"token punctuation\">(</span>G<span class=\"token punctuation\">,</span>v2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\tG<span class=\"token punctuation\">.</span>arc<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">//存在边就设置为1</span>\n\t\tG<span class=\"token punctuation\">.</span>arc<span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">//由于是无向图所以相反反向也存在边</span>\n\t<span class=\"token punctuation\">&#125;</span>\n\t<span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"图创建成功！\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token comment\">//找到第一个与下标index的点相邻的点 ,-1表示找不到</span>\n<span class=\"token keyword\">int</span> <span class=\"token function\">firstNeighbor</span><span class=\"token punctuation\">(</span>Graph g<span class=\"token punctuation\">,</span><span class=\"token keyword\">int</span> index<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n\t<span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> j<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span>j<span class=\"token operator\">&lt;</span>g<span class=\"token punctuation\">.</span>numVertexes<span class=\"token punctuation\">;</span>j<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n\t\t<span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>g<span class=\"token punctuation\">.</span>arc<span class=\"token punctuation\">[</span>index<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span><span class=\"token operator\">==</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n\t\t\t<span class=\"token keyword\">return</span> j<span class=\"token punctuation\">;</span>\n\t\t<span class=\"token punctuation\">&#125;</span>\n\t<span class=\"token punctuation\">&#125;</span>\n\t<span class=\"token keyword\">return</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token comment\">//找到下一个相邻的点</span>\n<span class=\"token keyword\">int</span> <span class=\"token function\">nextNeighbor</span><span class=\"token punctuation\">(</span>Graph g<span class=\"token punctuation\">,</span><span class=\"token keyword\">int</span> index<span class=\"token punctuation\">,</span><span class=\"token keyword\">int</span> now<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n\t<span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> j<span class=\"token operator\">=</span>now<span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span>j<span class=\"token operator\">&lt;</span>g<span class=\"token punctuation\">.</span>numVertexes<span class=\"token punctuation\">;</span>j<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n\t\t<span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>g<span class=\"token punctuation\">.</span>arc<span class=\"token punctuation\">[</span>index<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span><span class=\"token operator\">==</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n\t\t\t<span class=\"token keyword\">return</span> j<span class=\"token punctuation\">;</span>\n\t\t<span class=\"token punctuation\">&#125;</span>\n\t<span class=\"token punctuation\">&#125;</span>\n\t<span class=\"token keyword\">return</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token keyword\">void</span> <span class=\"token function\">bfs</span> <span class=\"token punctuation\">(</span>Graph g<span class=\"token punctuation\">,</span><span class=\"token keyword\">int</span> i<span class=\"token punctuation\">)</span>   <span class=\"token comment\">//广度优先遍历</span>\n<span class=\"token punctuation\">&#123;</span>\n\n\tqueue<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">></span> que<span class=\"token punctuation\">;</span>\n\t<span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%d \"</span><span class=\"token punctuation\">,</span>g<span class=\"token punctuation\">.</span>vexs<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\tvisited<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token operator\">=</span>true<span class=\"token punctuation\">;</span>\n\tque<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>que<span class=\"token punctuation\">.</span><span class=\"token function\">empty</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n\t\t<span class=\"token keyword\">int</span> index<span class=\"token operator\">=</span>que<span class=\"token punctuation\">.</span><span class=\"token function\">front</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\tque<span class=\"token punctuation\">.</span><span class=\"token function\">pop</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> j<span class=\"token operator\">=</span><span class=\"token function\">firstNeighbor</span><span class=\"token punctuation\">(</span>g<span class=\"token punctuation\">,</span>index<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>j<span class=\"token operator\">>=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span>j<span class=\"token operator\">=</span><span class=\"token function\">nextNeighbor</span><span class=\"token punctuation\">(</span>g<span class=\"token punctuation\">,</span>index<span class=\"token punctuation\">,</span>j<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span> <span class=\"token comment\">//访问所有与i相连的节点</span>\n\t\t\t<span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>visited<span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>  <span class=\"token comment\">//只会访问未被访问的节点</span>\n\t\t\t\t<span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%d \"</span><span class=\"token punctuation\">,</span>g<span class=\"token punctuation\">.</span>vexs<span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\t\tvisited<span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span><span class=\"token operator\">=</span>true<span class=\"token punctuation\">;</span>\n\t\t\t\tque<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span>j<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\t<span class=\"token punctuation\">&#125;</span>\n\t\t<span class=\"token punctuation\">&#125;</span>\n\t<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token keyword\">void</span> <span class=\"token function\">BFSTraverse</span><span class=\"token punctuation\">(</span>Graph g<span class=\"token punctuation\">,</span><span class=\"token keyword\">int</span> i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n\t<span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> j<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span>j<span class=\"token operator\">&lt;</span>g<span class=\"token punctuation\">.</span>numVertexes<span class=\"token punctuation\">;</span>j<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>  <span class=\"token comment\">//将所有节点标志为未访问</span>\n\t\tvisited<span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span><span class=\"token operator\">=</span>false<span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">&#125;</span>\n\t<span class=\"token keyword\">int</span> index<span class=\"token operator\">=</span><span class=\"token function\">findIndex</span><span class=\"token punctuation\">(</span>g<span class=\"token punctuation\">,</span>i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>index<span class=\"token operator\">==</span><span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span><span class=\"token punctuation\">;</span>\n\n\t<span class=\"token function\">bfs</span><span class=\"token punctuation\">(</span>g<span class=\"token punctuation\">,</span>index<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//如果直接从0节点开始遍历，可以省去这一行代码</span>\n\n\t<span class=\"token comment\">//如果是非连通图，则经过bfs还会有子图未访问到，遍历visited找还没有访问的点</span>\n\t<span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> j<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span>j<span class=\"token operator\">&lt;</span>g<span class=\"token punctuation\">.</span>numVertexes<span class=\"token punctuation\">;</span>j<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n\t\t<span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>visited<span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n\t\t\t<span class=\"token function\">bfs</span><span class=\"token punctuation\">(</span>g<span class=\"token punctuation\">,</span>j<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token punctuation\">&#125;</span>\n\t<span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token keyword\">void</span> <span class=\"token function\">dfs</span><span class=\"token punctuation\">(</span>Graph g<span class=\"token punctuation\">,</span><span class=\"token keyword\">int</span> i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n\t<span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%d \"</span><span class=\"token punctuation\">,</span>g<span class=\"token punctuation\">.</span>vexs<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\tvisited<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token operator\">=</span>true<span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> j<span class=\"token operator\">=</span><span class=\"token function\">firstNeighbor</span><span class=\"token punctuation\">(</span>g<span class=\"token punctuation\">,</span>i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>j<span class=\"token operator\">>=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span>j<span class=\"token operator\">=</span><span class=\"token function\">nextNeighbor</span><span class=\"token punctuation\">(</span>g<span class=\"token punctuation\">,</span>i<span class=\"token punctuation\">,</span>j<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span> <span class=\"token comment\">//访问所有与i相连的节点</span>\n\t\t\t<span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>visited<span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>  <span class=\"token comment\">//只会访问未被访问的节点</span>\n\t\t\t\t<span class=\"token function\">dfs</span><span class=\"token punctuation\">(</span>g<span class=\"token punctuation\">,</span>j<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\t<span class=\"token punctuation\">&#125;</span>\n\t\t<span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token keyword\">void</span> <span class=\"token function\">DFSTraverse</span><span class=\"token punctuation\">(</span>Graph g<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n\t<span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> j<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span>j<span class=\"token operator\">&lt;</span>g<span class=\"token punctuation\">.</span>numVertexes<span class=\"token punctuation\">;</span>j<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>  <span class=\"token comment\">//将所有节点标志为未访问</span>\n\t\tvisited<span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span><span class=\"token operator\">=</span>false<span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">&#125;</span>\n\n\t<span class=\"token comment\">//如果是非连通图，则经过bfs还会有子图未访问到，遍历visited找还没有访问的点</span>\n\t<span class=\"token comment\">//从0开始遍历</span>\n\t<span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> j<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span>j<span class=\"token operator\">&lt;</span>g<span class=\"token punctuation\">.</span>numVertexes<span class=\"token punctuation\">;</span>j<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n\t\t<span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>visited<span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n\t\t\t<span class=\"token function\">dfs</span><span class=\"token punctuation\">(</span>g<span class=\"token punctuation\">,</span>j<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token punctuation\">&#125;</span>\n\t<span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span>\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<ul>\n<li>广度优先遍历</li>\n</ul>\n<p>空间复杂度：O(v) 调用队列</p>\n<p><img src=\"/img/image-20230314105347647.png\" alt=\"image-20230314105347647\"></p>\n<ul>\n<li>深度优先遍历</li>\n</ul>\n<p>空间复杂度：O(v) 递归调用栈</p>\n<p>时间复杂度同上</p>\n<h2 id=\"最小生成树\"><a href=\"#最小生成树\" class=\"headerlink\" title=\"最小生成树\"></a>最小生成树</h2><p><img src=\"/img/image-20230314120141486.png\" alt=\"image-20230314120141486\"></p>\n<p>Kruskal 算法与并查集结合考虑</p>\n<h2 id=\"最短路径\"><a href=\"#最短路径\" class=\"headerlink\" title=\"最短路径\"></a>最短路径</h2><ul>\n<li><p>单源</p>\n<ul>\n<li><p>BFS（无权图）</p>\n<p>将 BFS 算法中，visit 的部分进行修改</p>\n<p>引入 d[]表示从源点到此节点的路径长度，path[]表示最短路径是从哪个结点过来的</p>\n<p><img src=\"/img/image-20230314155102386.png\" alt=\"image-20230314155102386\"></p>\n</li>\n<li><p>Dijkstra（带权图，无权图）</p>\n<p>不适合带有负权值的带权图</p>\n<p><img src=\"/img/image-20230314160913569.png\" alt=\"image-20230314160913569\"></p>\n</li>\n</ul>\n</li>\n<li><p>各顶点的最短路径——Floyd 算法</p>\n<p><img src=\"/img/image-20230314164246881.png\" alt=\"image-20230314164246881\"></p>\n</li>\n</ul>\n<p>时间复杂度 O(v^3)</p>\n<p>Floyd 可以解决带负权的图，但是无法解决带有负权回路的图</p>\n<h2 id=\"拓扑排序\"><a href=\"#拓扑排序\" class=\"headerlink\" title=\"拓扑排序\"></a>拓扑排序</h2><p><img src=\"/img/image-20230314203655195.png\" alt=\"image-20230314203655195\"></p>\n<h2 id=\"关键路径\"><a href=\"#关键路径\" class=\"headerlink\" title=\"关键路径\"></a>关键路径</h2><h1 id=\"查找\"><a href=\"#查找\" class=\"headerlink\" title=\"查找\"></a>查找</h1><h2 id=\"线性存储\"><a href=\"#线性存储\" class=\"headerlink\" title=\"线性存储\"></a>线性存储</h2><h3 id=\"顺序查找\"><a href=\"#顺序查找\" class=\"headerlink\" title=\"顺序查找\"></a>顺序查找</h3><p>两种优化：</p>\n<ul>\n<li>有序，产生查找判定树，降低 ASL 失败</li>\n<li>被查的概率不同，将该率高的放前面，降低 ASL 成功</li>\n</ul>\n<p>无论怎么优化，时间复杂度 O(n)</p>\n<h3 id=\"折半查找\"><a href=\"#折半查找\" class=\"headerlink\" title=\"折半查找\"></a>折半查找</h3><pre class=\"line-numbers language-c\" data-language=\"c\"><code class=\"language-c\"><span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span>low<span class=\"token operator\">&lt;</span>high<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>  <span class=\"token comment\">//这里改成&lt;=的话</span>\n\tmid<span class=\"token operator\">=</span><span class=\"token punctuation\">(</span>low<span class=\"token operator\">+</span>high<span class=\"token punctuation\">)</span><span class=\"token operator\">/</span><span class=\"token number\">2</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">[</span>mid<span class=\"token punctuation\">]</span><span class=\"token operator\">&lt;</span>i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n\t\tlow<span class=\"token operator\">=</span>mid<span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">&#125;</span><span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">[</span>mid<span class=\"token punctuation\">]</span><span class=\"token operator\">></span>i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n\t\thigh<span class=\"token operator\">=</span>mid<span class=\"token punctuation\">;</span>  <span class=\"token comment\">//这里改成mid+1</span>\n\t<span class=\"token punctuation\">&#125;</span><span class=\"token keyword\">else</span><span class=\"token punctuation\">&#123;</span>\n\t\t<span class=\"token keyword\">return</span> mid<span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>时间复杂度 O(log2n)</p>\n<p>折半查找判定树：<strong>右子树结点数-左子树结点数&#x3D;0&#x2F;1</strong>（mid 向下取整），就相当于平衡的二叉排序树，树高与完全二叉树相同</p>\n<p>折半查找的速度一定比顺序查找快么？×</p>\n<hr>\n<p>一个好用板子</p>\n<p><img src=\"/img/image-20230316145637545.png\" alt=\"image-20230316145637545\"></p>\n<p>上：得到 3 的最左边值</p>\n<p>下：得到 3 的最右边值</p>\n<h3 id=\"分块查找\"><a href=\"#分块查找\" class=\"headerlink\" title=\"分块查找\"></a>分块查找</h3><p><img src=\"/img/image-20230315145421079.png\" alt=\"image-20230315145421079\"></p>\n<p><img src=\"/img/image-20230315145558091.png\" alt=\"image-20230315145558091\"></p>\n<h2 id=\"树形\"><a href=\"#树形\" class=\"headerlink\" title=\"树形\"></a>树形</h2><h3 id=\"二叉排序树\"><a href=\"#二叉排序树\" class=\"headerlink\" title=\"二叉排序树\"></a>二叉排序树</h3><p>见上一篇</p>\n<h3 id=\"红黑树\"><a href=\"#红黑树\" class=\"headerlink\" title=\"红黑树\"></a>红黑树</h3><p>性质：</p>\n<ul>\n<li>左根右：左&lt;跟&lt;右</li>\n<li>根叶黑：根节点，叶节点（空的失败节点）是黑色的</li>\n<li>不红红：两个红色节点不能相连</li>\n<li>黑路同：从任意节点出发，到叶子结点，所经过的黑色节点个数是相同的</li>\n</ul>\n<p>插入：</p>\n<p><img src=\"/img/image-20230315154256920.png\" alt=\"image-20230315154256920\"></p>\n<h3 id=\"B-树\"><a href=\"#B-树\" class=\"headerlink\" title=\"B 树\"></a>B 树</h3><p><img src=\"/img/image-20230315164424324.png\" alt=\"image-20230315164424324\"></p>\n<p><img src=\"/img/image-20230315164538232.png\" alt=\"image-20230315164538232\"></p>\n<p><img src=\"/img/image-20230315164917952.png\" alt=\"image-20230315164917952\"></p>\n<p><img src=\"/img/image-20230313155600370.png\" alt=\"image-20230315165140641\"></p>\n<p>插入：向上分裂</p>\n<p>删除：1.直接删 2.兄弟够借 3.兄弟不够借（合并）</p>\n<h3 id=\"B-树-1\"><a href=\"#B-树-1\" class=\"headerlink\" title=\"B+树\"></a>B+树</h3><p>MySQL 的索引使用 B+树：</p>\n<p>B+树的非叶子节点不含有该关键字对应记录的存储地址，可以使一个磁盘块包含更多的关键字，是的 B+树的阶更大，树高更矮，读磁盘次数更少，查找更快。</p>\n<p><img src=\"/img/image-20230315203034608.png\" alt=\"image-20230315203034608\"></p>\n<h2 id=\"散列查找（Hash-Table）\"><a href=\"#散列查找（Hash-Table）\" class=\"headerlink\" title=\"散列查找（Hash Table）\"></a>散列查找（Hash Table）</h2><p>装填因子 α&#x3D;表中记录数&#x2F;散列表长度，数越大代表冲突约容易发生</p>\n<h3 id=\"常见的散列函数\"><a href=\"#常见的散列函数\" class=\"headerlink\" title=\"常见的散列函数\"></a>常见的散列函数</h3><ul>\n<li><p>除留余数法——H(key)&#x3D;key%p</p>\n<p>散列表表长 m，取一个不大于 m 但最接近或等于 m 的<strong>质数</strong>p（看情况而定）</p>\n</li>\n<li><p>直接定址法——H(key)&#x3D;key&#x2F;H(key)&#x3D;a*key+b</p>\n<p>适合关键字的分布基本连续的情况</p>\n</li>\n<li><p>数字分析法——选取数码分布比较均匀的若干位作为散列地址</p>\n<p>适用于已知的关键字集合，若更换关键字，则需要重新构造新的散列函数</p>\n</li>\n<li><p>平方取中法——取关键字的平方值的<strong>中间几位</strong>作为散列函数</p>\n<p>这种方法得到的散列地址与关键字的每位都有关系，得到的散列地址分布比较均匀</p>\n</li>\n</ul>\n<h3 id=\"哈希冲突的解决办法\"><a href=\"#哈希冲突的解决办法\" class=\"headerlink\" title=\"哈希冲突的解决办法\"></a>哈希冲突的解决办法</h3><ul>\n<li><p>链地址法：将所有关键字为同义词的节点链接在同一个单链表中</p>\n</li>\n<li><p>开放定址法：</p>\n<p>可存放新表项的空闲地址既可以向它的同义词表项开放，又向它的非同义词表项开放。</p>\n<p>H(i)&#x3D;(H(key)+d(i))%m</p>\n<p>i&#x3D;0,1,2…..,k(k&lt;&#x3D;m-1),m 表示散列表表长，d(i)为增量序列；i 可以理解为第 i 次发生冲突</p>\n<p>不能随意删除元素，要进行标记</p>\n<ul>\n<li><p>线性探测法——d(i)&#x3D;0,1,2,3…,m-1</p>\n<p>即发生冲突时，每次往后探测相邻的下一个单元是否为空</p>\n</li>\n<li><p>平方探测法——d(i)&#x3D;0,1，-1,2^(2),-2^(2)….k^(2),-k^(2)</p>\n<p><em>散列表长度 m 必须是 4j+3 的素数，才能探测到所有位置</em></p>\n</li>\n<li><p>伪随机序列法——d(i)是伪随机序列</p>\n</li>\n</ul>\n</li>\n<li><p>再哈希法（再散列法）：除了原始的散列函数 H(key)之外，多准备几个散列函数，当散列函数冲突时，用下一个散列函数计算一个新地址，直到不冲突为止</p>\n</li>\n</ul>\n<h1 id=\"排序\"><a href=\"#排序\" class=\"headerlink\" title=\"排序\"></a>排序</h1><h2 id=\"插入排序\"><a href=\"#插入排序\" class=\"headerlink\" title=\"插入排序\"></a>插入排序</h2><pre class=\"line-numbers language-c\" data-language=\"c\"><code class=\"language-c\"><span class=\"token comment\">//插入排序</span>\n<span class=\"token keyword\">void</span> <span class=\"token function\">InsertSort</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> a<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span><span class=\"token keyword\">int</span> size<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n\n\t<span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>size<span class=\"token operator\">==</span><span class=\"token number\">1</span><span class=\"token operator\">||</span>a<span class=\"token operator\">==</span><span class=\"token constant\">NULL</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span><span class=\"token punctuation\">;</span>\n\n\t<span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span>i<span class=\"token operator\">&lt;</span>size<span class=\"token punctuation\">;</span>i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n\t\t<span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> j<span class=\"token operator\">=</span>i<span class=\"token punctuation\">;</span>j<span class=\"token operator\">>=</span><span class=\"token number\">1</span><span class=\"token operator\">&amp;&amp;</span>a<span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span><span class=\"token operator\">&lt;</span>a<span class=\"token punctuation\">[</span>j<span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>j<span class=\"token operator\">--</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n\t\t\t<span class=\"token function\">swap</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">,</span>j<span class=\"token punctuation\">,</span>j<span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token punctuation\">&#125;</span>\n\t<span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token comment\">//直接插入排序-王道实现方法</span>\n<span class=\"token keyword\">void</span> <span class=\"token function\">InsertSort1</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> a<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span><span class=\"token keyword\">int</span> size<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n\n\t<span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>size<span class=\"token operator\">==</span><span class=\"token number\">1</span><span class=\"token operator\">||</span>a<span class=\"token operator\">==</span><span class=\"token constant\">NULL</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span><span class=\"token punctuation\">;</span>\n\n\t<span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i<span class=\"token operator\">=</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span>i<span class=\"token operator\">&lt;</span>size<span class=\"token punctuation\">;</span>i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n\t\t<span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token operator\">&lt;</span>a<span class=\"token punctuation\">[</span>i<span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>  <span class=\"token comment\">//当a[i]小于它的前驱，才会向前排序</span>\n\t\t\t<span class=\"token keyword\">int</span> temp<span class=\"token operator\">=</span>a<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\t\t\t<span class=\"token keyword\">int</span> j<span class=\"token punctuation\">;</span>\n\t\t\t<span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span>j<span class=\"token operator\">=</span>i<span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span>j<span class=\"token operator\">>=</span><span class=\"token number\">0</span><span class=\"token operator\">&amp;&amp;</span>temp<span class=\"token operator\">&lt;</span>a<span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>j<span class=\"token operator\">--</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n\t\t\t\ta<span class=\"token punctuation\">[</span>j<span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token operator\">=</span>a<span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\t\t\t<span class=\"token punctuation\">&#125;</span>\n\t\t\ta<span class=\"token punctuation\">[</span>j<span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token operator\">=</span>temp<span class=\"token punctuation\">;</span>\n\t\t<span class=\"token punctuation\">&#125;</span>\n\t<span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token comment\">//折半插入排序</span>\n<span class=\"token keyword\">void</span> <span class=\"token function\">InsertSort2</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> a<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span><span class=\"token keyword\">int</span> size<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n\t<span class=\"token keyword\">int</span> left<span class=\"token punctuation\">,</span>right<span class=\"token punctuation\">,</span>mid<span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i<span class=\"token operator\">=</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span>i<span class=\"token operator\">&lt;</span>size<span class=\"token punctuation\">;</span>i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n\t\t<span class=\"token keyword\">int</span> temp<span class=\"token operator\">=</span>a<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\t\tleft<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n\t\tright<span class=\"token operator\">=</span>i<span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span>left<span class=\"token operator\">&lt;</span>right<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>  <span class=\"token comment\">//得到小于等于a[i]的最右侧下标，为了保持稳定性</span>\n\t\t\tmid<span class=\"token operator\">=</span><span class=\"token punctuation\">(</span>left<span class=\"token operator\">+</span>right<span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token operator\">/</span><span class=\"token number\">2</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">//向上取整</span>\n\t\t\t<span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">[</span>mid<span class=\"token punctuation\">]</span><span class=\"token operator\">&lt;=</span>temp<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n\t\t\t\tleft<span class=\"token operator\">=</span>mid<span class=\"token punctuation\">;</span>\n\t\t\t<span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">else</span><span class=\"token punctuation\">&#123;</span>\n\t\t\t\tright<span class=\"token operator\">=</span>mid<span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n\t\t\t<span class=\"token punctuation\">&#125;</span>\n\t\t<span class=\"token punctuation\">&#125;</span>\n\t\t<span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> j<span class=\"token operator\">=</span>i<span class=\"token punctuation\">;</span>j<span class=\"token operator\">></span>right<span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span>j<span class=\"token operator\">--</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n\t\t\ta<span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span><span class=\"token operator\">=</span>a<span class=\"token punctuation\">[</span>j<span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token punctuation\">&#125;</span>\n\t\ta<span class=\"token punctuation\">[</span>right<span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token operator\">=</span>temp<span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token comment\">//希尔插入排序</span>\n<span class=\"token comment\">//希尔排序不稳定且只能基于顺序表实现</span>\n<span class=\"token keyword\">void</span> <span class=\"token function\">InsertSort3</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> a<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span><span class=\"token keyword\">int</span> size<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n\n\t<span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>size<span class=\"token operator\">==</span><span class=\"token number\">1</span><span class=\"token operator\">||</span>a<span class=\"token operator\">==</span><span class=\"token constant\">NULL</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span><span class=\"token punctuation\">;</span>\n\n\t<span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> d<span class=\"token operator\">=</span>size<span class=\"token operator\">/</span><span class=\"token number\">2</span><span class=\"token punctuation\">;</span>d<span class=\"token operator\">>=</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span>d<span class=\"token operator\">=</span>d<span class=\"token operator\">/</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n\t\t<span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i<span class=\"token operator\">=</span>d<span class=\"token punctuation\">;</span>i<span class=\"token operator\">&lt;</span>size<span class=\"token punctuation\">;</span>i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n\t\t\t<span class=\"token keyword\">int</span> temp<span class=\"token operator\">=</span>a<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\t\t\t<span class=\"token keyword\">int</span> j<span class=\"token operator\">=</span>i<span class=\"token operator\">-</span>d<span class=\"token punctuation\">;</span>\n\t\t\t<span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span>j<span class=\"token operator\">>=</span><span class=\"token number\">0</span><span class=\"token operator\">&amp;&amp;</span>a<span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span><span class=\"token operator\">></span>temp<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n\t\t\t\ta<span class=\"token punctuation\">[</span>j<span class=\"token operator\">+</span>d<span class=\"token punctuation\">]</span><span class=\"token operator\">=</span>a<span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\t\t\t\tj<span class=\"token operator\">=</span>j<span class=\"token operator\">-</span>d<span class=\"token punctuation\">;</span>\n\t\t\t<span class=\"token punctuation\">&#125;</span>\n\t\t\ta<span class=\"token punctuation\">[</span>j<span class=\"token operator\">+</span>d<span class=\"token punctuation\">]</span><span class=\"token operator\">=</span>temp<span class=\"token punctuation\">;</span>\n\t\t<span class=\"token punctuation\">&#125;</span>\n\t<span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>时间：O(n^2) 空间：O(1)</p>\n<p>虽然折半插入排序减少了比较次数，元素的移动次数不变，时间复杂度不变</p>\n<pre class=\"line-numbers language-c\" data-language=\"c\"><code class=\"language-c\"><span class=\"token comment\">//插入排序——链表实现</span>\n<span class=\"token keyword\">void</span> <span class=\"token function\">InsertSort</span><span class=\"token punctuation\">(</span>LinkList<span class=\"token operator\">&amp;</span> l<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n\t<span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token function\">Length</span><span class=\"token punctuation\">(</span>l<span class=\"token punctuation\">)</span><span class=\"token operator\">==</span><span class=\"token number\">0</span><span class=\"token operator\">||</span><span class=\"token function\">Length</span><span class=\"token punctuation\">(</span>l<span class=\"token punctuation\">)</span><span class=\"token operator\">==</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span><span class=\"token punctuation\">;</span>\n\tLNode<span class=\"token operator\">*</span> lastSorted<span class=\"token operator\">=</span>l<span class=\"token operator\">-></span>next<span class=\"token punctuation\">;</span>\n\tLNode<span class=\"token operator\">*</span> cur<span class=\"token operator\">=</span>l<span class=\"token operator\">-></span>next<span class=\"token operator\">-></span>next<span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span>cur<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n\t\t<span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>cur<span class=\"token operator\">-></span>data<span class=\"token operator\">>=</span>lastSorted<span class=\"token operator\">-></span>data<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>    <span class=\"token comment\">//如果当前的值大于前一个值，则说明已经排好序</span>\n\t\t\tlastSorted<span class=\"token operator\">=</span>cur<span class=\"token punctuation\">;</span>\n\t\t\tcur<span class=\"token operator\">=</span>cur<span class=\"token operator\">-></span>next<span class=\"token punctuation\">;</span>\n\t\t<span class=\"token punctuation\">&#125;</span><span class=\"token keyword\">else</span><span class=\"token punctuation\">&#123;</span>  <span class=\"token comment\">//需要重头找到要插入的位置</span>\n\t\t\tLNode<span class=\"token operator\">*</span> temp<span class=\"token operator\">=</span>l<span class=\"token punctuation\">;</span>\n\t\t\t<span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span>temp<span class=\"token operator\">-></span>next<span class=\"token operator\">-></span>data<span class=\"token operator\">&lt;=</span>cur<span class=\"token operator\">-></span>data<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n\t\t\t\ttemp<span class=\"token operator\">=</span>temp<span class=\"token operator\">-></span>next<span class=\"token punctuation\">;</span>\n\t\t\t<span class=\"token punctuation\">&#125;</span>\n\n\t\t\tLNode<span class=\"token operator\">*</span> s<span class=\"token operator\">=</span>cur<span class=\"token punctuation\">;</span> <span class=\"token comment\">//用s存储当前cur</span>\n\t\t\tcur<span class=\"token operator\">=</span>cur<span class=\"token operator\">-></span>next<span class=\"token punctuation\">;</span>  <span class=\"token comment\">//cur后移</span>\n\t\t\tlastSorted<span class=\"token operator\">-></span>next<span class=\"token operator\">=</span>cur<span class=\"token punctuation\">;</span>\n\n\t\t\t<span class=\"token comment\">//节点s要接在temp后面</span>\n\t\t\ts<span class=\"token operator\">-></span>next<span class=\"token operator\">=</span> temp<span class=\"token operator\">-></span>next<span class=\"token punctuation\">;</span>\n\t\t\ttemp<span class=\"token operator\">-></span>next<span class=\"token operator\">=</span>s<span class=\"token punctuation\">;</span>\n\t\t<span class=\"token punctuation\">&#125;</span>\n\t<span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h2 id=\"交换排序\"><a href=\"#交换排序\" class=\"headerlink\" title=\"交换排序\"></a>交换排序</h2><h3 id=\"冒泡排序\"><a href=\"#冒泡排序\" class=\"headerlink\" title=\"冒泡排序\"></a>冒泡排序</h3><pre class=\"line-numbers language-c\" data-language=\"c\"><code class=\"language-c\"><span class=\"token keyword\">void</span> <span class=\"token function\">BubbleSort</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> a<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span><span class=\"token keyword\">int</span> size<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n\t<span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span>i<span class=\"token operator\">&lt;</span>size<span class=\"token punctuation\">;</span>i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>  <span class=\"token comment\">//一共size趟,每一趟确定一个最小值</span>\n\t\t<span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> j<span class=\"token operator\">=</span>size<span class=\"token operator\">-</span><span class=\"token number\">2</span><span class=\"token punctuation\">;</span>j<span class=\"token operator\">>=</span>i<span class=\"token punctuation\">;</span>j<span class=\"token operator\">--</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n\t\t\t<span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span><span class=\"token operator\">></span>a<span class=\"token punctuation\">[</span>j<span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>  <span class=\"token comment\">//相等时不交换，保证算法稳定</span>\n\t\t\t\t<span class=\"token function\">swap</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">,</span>j<span class=\"token punctuation\">,</span>j<span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>    <span class=\"token comment\">//最小的值向上浮</span>\n\t\t\t<span class=\"token punctuation\">&#125;</span>\n\t\t<span class=\"token punctuation\">&#125;</span>\n\t<span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>空间 O(1) 时间 O(n^2)</p>\n<h3 id=\"快速排序\"><a href=\"#快速排序\" class=\"headerlink\" title=\"快速排序\"></a>快速排序</h3><pre class=\"line-numbers language-c\" data-language=\"c\"><code class=\"language-c\"><span class=\"token keyword\">int</span> <span class=\"token function\">partition</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> a<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span><span class=\"token keyword\">int</span> low<span class=\"token punctuation\">,</span><span class=\"token keyword\">int</span> high<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n\t<span class=\"token keyword\">int</span> pivot<span class=\"token operator\">=</span>a<span class=\"token punctuation\">[</span>low<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span>low<span class=\"token operator\">&lt;</span>high<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n\t\t<span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span>low<span class=\"token operator\">&lt;</span>high<span class=\"token operator\">&amp;&amp;</span>a<span class=\"token punctuation\">[</span>high<span class=\"token punctuation\">]</span><span class=\"token operator\">>=</span>pivot<span class=\"token punctuation\">)</span> high<span class=\"token operator\">--</span><span class=\"token punctuation\">;</span>\n\t\ta<span class=\"token punctuation\">[</span>low<span class=\"token punctuation\">]</span><span class=\"token operator\">=</span>a<span class=\"token punctuation\">[</span>high<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span>low<span class=\"token operator\">&lt;</span>high<span class=\"token operator\">&amp;&amp;</span>a<span class=\"token punctuation\">[</span>low<span class=\"token punctuation\">]</span><span class=\"token operator\">&lt;=</span>pivot<span class=\"token punctuation\">)</span> low<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span>\n\t\ta<span class=\"token punctuation\">[</span>high<span class=\"token punctuation\">]</span><span class=\"token operator\">=</span>a<span class=\"token punctuation\">[</span>low<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">&#125;</span>\n\ta<span class=\"token punctuation\">[</span>low<span class=\"token punctuation\">]</span><span class=\"token operator\">=</span>pivot<span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">return</span> low<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token comment\">//快速排序</span>\n<span class=\"token keyword\">void</span> <span class=\"token function\">QuickSort</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> a<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> low<span class=\"token punctuation\">,</span><span class=\"token keyword\">int</span> high<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n\t<span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>low<span class=\"token operator\">&lt;</span>high<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n\t\t<span class=\"token keyword\">int</span> pivotpos<span class=\"token operator\">=</span><span class=\"token function\">partition</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">,</span>low<span class=\"token punctuation\">,</span>high<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token function\">QuickSort</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">,</span>low<span class=\"token punctuation\">,</span>pivotpos<span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token function\">QuickSort</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">,</span>pivotpos<span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span>high<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>快排地时间效率依赖于每次划分是否均匀。有序或逆序时，时间复杂度最差，要递归调用 N 层。</p>\n<p>平均时间 O(nlog2n) 空间 O(log2n)</p>\n<h2 id=\"选择排序\"><a href=\"#选择排序\" class=\"headerlink\" title=\"选择排序\"></a>选择排序</h2><h3 id=\"简单选择排序\"><a href=\"#简单选择排序\" class=\"headerlink\" title=\"简单选择排序\"></a>简单选择排序</h3><pre class=\"line-numbers language-none\"><code class=\"language-none\">void SelectSort(int a[],int size)&#123;\n\tfor(int i&#x3D;0;i&lt;size-1;i++)&#123;  &#x2F;&#x2F;n-1趟，最后一个位置不需要排序\n\t\tint index&#x3D;i;\n\t\tfor(int j&#x3D;i;j&lt;size;j++)&#123;\n\t\t\tif(a[j]&lt;a[index])&#123;    &#x2F;&#x2F;取每一次循环的最小值\n\t\t\t\tindex&#x3D;j;\n\t\t\t&#125;\n\t\t&#125;\n\t\tswap(a,index,i); &#x2F;&#x2F;将最小值放到最前面\n\t&#125;\n&#125;<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>不论好坏情况 O(n^2)</p>\n<h3 id=\"堆排序\"><a href=\"#堆排序\" class=\"headerlink\" title=\"堆排序\"></a>堆排序</h3><pre class=\"line-numbers language-c\" data-language=\"c\"><code class=\"language-c\"><span class=\"token comment\">//调整以K为根的子树</span>\n<span class=\"token keyword\">void</span> <span class=\"token function\">HeadAdjust</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> a<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span><span class=\"token keyword\">int</span> k<span class=\"token punctuation\">,</span><span class=\"token keyword\">int</span> size<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n\t<span class=\"token keyword\">int</span> temp<span class=\"token operator\">=</span>a<span class=\"token punctuation\">[</span>k<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i<span class=\"token operator\">=</span><span class=\"token number\">2</span><span class=\"token operator\">*</span>k<span class=\"token punctuation\">;</span>i<span class=\"token operator\">&lt;=</span>size<span class=\"token punctuation\">;</span>i<span class=\"token operator\">*=</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n\t\t<span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>i<span class=\"token operator\">&lt;</span>size<span class=\"token operator\">&amp;&amp;</span>a<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token operator\">&lt;</span>a<span class=\"token punctuation\">[</span>i<span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//找到左右孩子中更大的</span>\n\t\t<span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>temp<span class=\"token operator\">>=</span>a<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span> <span class=\"token comment\">//根节点大于孩子，不需要调整</span>\n\t\t\t<span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token punctuation\">&#125;</span>\n\t\t<span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>temp<span class=\"token operator\">&lt;</span>a<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>  <span class=\"token comment\">//根节点小于孩子</span>\n\t\t\ta<span class=\"token punctuation\">[</span>k<span class=\"token punctuation\">]</span><span class=\"token operator\">=</span>a<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\t\t\tk<span class=\"token operator\">=</span>i<span class=\"token punctuation\">;</span>   <span class=\"token comment\">//继续向下比较，将比temp大的孩子上移</span>\n\t\t<span class=\"token punctuation\">&#125;</span>\n\t<span class=\"token punctuation\">&#125;</span>\n\ta<span class=\"token punctuation\">[</span>k<span class=\"token punctuation\">]</span><span class=\"token operator\">=</span>temp<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token comment\">//建立大跟堆</span>\n<span class=\"token keyword\">void</span> <span class=\"token function\">BuildMaxHeap</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> a<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span><span class=\"token keyword\">int</span> size<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n\t<span class=\"token comment\">//从非叶子节点开始调整</span>\n\t<span class=\"token comment\">//非叶子节点下标&lt;=size/2</span>\n\t<span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i<span class=\"token operator\">=</span>size<span class=\"token operator\">/</span><span class=\"token number\">2</span><span class=\"token punctuation\">;</span>i<span class=\"token operator\">></span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span>i<span class=\"token operator\">--</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n\t\t<span class=\"token function\">HeadAdjust</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">,</span>i<span class=\"token punctuation\">,</span>size<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token comment\">//堆排序</span>\n<span class=\"token keyword\">void</span> <span class=\"token function\">HeapSort</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> a<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span><span class=\"token keyword\">int</span> size<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n\t<span class=\"token function\">BuildMaxHeap</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">,</span>size<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>   <span class=\"token comment\">//将数组转换为大根堆 建堆时间：O(n)</span>\n\t<span class=\"token comment\">//每一趟都将根节点和堆的最后一个节点互换</span>\n\t<span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i<span class=\"token operator\">=</span>size<span class=\"token punctuation\">;</span>i<span class=\"token operator\">>=</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span>i<span class=\"token operator\">--</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n\t\t<span class=\"token function\">swap</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">,</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span>i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token function\">HeadAdjust</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">,</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span>i<span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>   <span class=\"token comment\">//每次调整o(h)=o(log2n)</span>\n\t<span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span>\n\n\n<span class=\"token comment\">//堆的插入</span>\n<span class=\"token keyword\">void</span> <span class=\"token function\">InsertHeap</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> a<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span><span class=\"token keyword\">int</span><span class=\"token operator\">&amp;</span> size<span class=\"token punctuation\">,</span><span class=\"token keyword\">int</span> val<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n\ta<span class=\"token punctuation\">[</span><span class=\"token operator\">++</span>size<span class=\"token punctuation\">]</span><span class=\"token operator\">=</span>val<span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">int</span> i<span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span>i<span class=\"token operator\">=</span>size<span class=\"token punctuation\">;</span>i<span class=\"token operator\">/</span><span class=\"token number\">2</span><span class=\"token operator\">>=</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span>i<span class=\"token operator\">=</span>i<span class=\"token operator\">/</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n\t\t<span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>val<span class=\"token operator\">></span>a<span class=\"token punctuation\">[</span>i<span class=\"token operator\">/</span><span class=\"token number\">2</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n\t\t\ta<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token operator\">=</span>a<span class=\"token punctuation\">[</span>i<span class=\"token operator\">/</span><span class=\"token number\">2</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token punctuation\">&#125;</span>\n\t<span class=\"token punctuation\">&#125;</span>\n\ta<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token operator\">=</span>val<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token comment\">//堆的删除</span>\n<span class=\"token keyword\">void</span> <span class=\"token function\">DeleteHeap</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> a<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span><span class=\"token keyword\">int</span><span class=\"token operator\">&amp;</span> size<span class=\"token punctuation\">,</span><span class=\"token keyword\">int</span> i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n\t<span class=\"token function\">swap</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">,</span>i<span class=\"token punctuation\">,</span>size<span class=\"token operator\">--</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token function\">HeadAdjust</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">,</span>i<span class=\"token punctuation\">,</span>size<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>时间复杂度 O(nlog2n)</p>\n<h2 id=\"归并排序\"><a href=\"#归并排序\" class=\"headerlink\" title=\"归并排序\"></a>归并排序</h2><pre class=\"line-numbers language-c\" data-language=\"c\"><code class=\"language-c\"><span class=\"token comment\">//b数组复制a数组的内容</span>\n<span class=\"token keyword\">int</span><span class=\"token operator\">*</span> b<span class=\"token operator\">=</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token operator\">*</span><span class=\"token punctuation\">)</span><span class=\"token function\">malloc</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token number\">6</span><span class=\"token operator\">*</span><span class=\"token keyword\">sizeof</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">//空间复杂度O(N)</span>\n\n<span class=\"token keyword\">void</span> <span class=\"token function\">Merge</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> a<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span><span class=\"token keyword\">int</span> low<span class=\"token punctuation\">,</span><span class=\"token keyword\">int</span> mid<span class=\"token punctuation\">,</span><span class=\"token keyword\">int</span> high<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n\t<span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i<span class=\"token operator\">=</span>low<span class=\"token punctuation\">;</span>i<span class=\"token operator\">&lt;=</span>high<span class=\"token punctuation\">;</span>i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n\t\tb<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token operator\">=</span>a<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">&#125;</span>\n\t<span class=\"token keyword\">int</span> i<span class=\"token operator\">=</span>low<span class=\"token punctuation\">;</span><span class=\"token comment\">//左指针</span>\n\t<span class=\"token keyword\">int</span> j<span class=\"token operator\">=</span>mid<span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">//右指针</span>\n\t<span class=\"token keyword\">int</span> k<span class=\"token operator\">=</span>low<span class=\"token punctuation\">;</span> <span class=\"token comment\">//指向原数组的指针</span>\n\t<span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span>i<span class=\"token operator\">&lt;=</span>mid<span class=\"token operator\">&amp;&amp;</span>j<span class=\"token operator\">&lt;=</span>high<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n\t\t<span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>b<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token operator\">&lt;=</span>b<span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>  <span class=\"token comment\">//保证稳定性</span>\n\t\t\ta<span class=\"token punctuation\">[</span>k<span class=\"token operator\">++</span><span class=\"token punctuation\">]</span><span class=\"token operator\">=</span>b<span class=\"token punctuation\">[</span>i<span class=\"token operator\">++</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token punctuation\">&#125;</span><span class=\"token keyword\">else</span><span class=\"token punctuation\">&#123;</span>\n\t\t\ta<span class=\"token punctuation\">[</span>k<span class=\"token operator\">++</span><span class=\"token punctuation\">]</span><span class=\"token operator\">=</span>b<span class=\"token punctuation\">[</span>j<span class=\"token operator\">++</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token punctuation\">&#125;</span>\n\t<span class=\"token punctuation\">&#125;</span>\n\t<span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span>i<span class=\"token operator\">&lt;=</span>mid<span class=\"token punctuation\">)</span> a<span class=\"token punctuation\">[</span>k<span class=\"token operator\">++</span><span class=\"token punctuation\">]</span><span class=\"token operator\">=</span>b<span class=\"token punctuation\">[</span>i<span class=\"token operator\">++</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span>j<span class=\"token operator\">&lt;=</span>high<span class=\"token punctuation\">)</span> a<span class=\"token punctuation\">[</span>k<span class=\"token operator\">++</span><span class=\"token punctuation\">]</span><span class=\"token operator\">=</span>b<span class=\"token punctuation\">[</span>j<span class=\"token operator\">++</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token keyword\">void</span> <span class=\"token function\">MergeSort</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> a<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span><span class=\"token keyword\">int</span> low<span class=\"token punctuation\">,</span><span class=\"token keyword\">int</span> high<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n\t<span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>low<span class=\"token operator\">&lt;</span>high<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n\t\t<span class=\"token keyword\">int</span> mid<span class=\"token operator\">=</span><span class=\"token punctuation\">(</span>low<span class=\"token operator\">+</span>high<span class=\"token punctuation\">)</span><span class=\"token operator\">/</span><span class=\"token number\">2</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token function\">MergeSort</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">,</span>low<span class=\"token punctuation\">,</span>mid<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token function\">MergeSort</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">,</span>mid<span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span>high<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token function\">Merge</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">,</span>low<span class=\"token punctuation\">,</span>mid<span class=\"token punctuation\">,</span>high<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>时间 O(nlog2n)</p>\n<h2 id=\"基数排序\"><a href=\"#基数排序\" class=\"headerlink\" title=\"基数排序\"></a>基数排序</h2><p><img src=\"/img/image-20230317114233662.png\" alt=\"image-20230317114233662\"></p>\n<p><img src=\"/img/image-20230317114831309.png\" alt=\"image-20230317114831309\"></p>\n<h2 id=\"外部排序\"><a href=\"#外部排序\" class=\"headerlink\" title=\"外部排序\"></a>外部排序</h2><p>外部排序通常使用归并排序法：</p>\n<ol>\n<li>根据内存缓冲区大小，将外存上的文件分为若干长度 l 的子文件，一次读入内存并利用内部排序对他们进行排序，并将排序后得到的有序子文件重新写回外存，称这些有序子文件为归并串或顺串。</li>\n<li>对这些归并串进行逐趟归并，使归并段逐渐有小到大，直至整个文件有序。</li>\n</ol>\n<p>外部存储的总时间&#x3D;内部排序所需时间+<strong>外存信息读写的时间</strong>（占用时间最大）+内存归并所需时间</p>\n<p>怎样减少时间？——减少归并趟数—&gt;多路归并</p>\n<p><img src=\"/img/image-20230317124445001.png\" alt=\"image-20230317124445001\"></p>\n<p>增加初始归并段的长度，即可以减少初始归并段个数 r</p>\n<p>总记录 n，归并段长度 l，r&#x3D;n&#x2F;l 向上取整</p>\n<h3 id=\"败者树\"><a href=\"#败者树\" class=\"headerlink\" title=\"败者树\"></a>败者树</h3><p><img src=\"/img/image-20230317130647595.png\" alt=\"image-20230317130647595\"></p>\n<p><img src=\"/img/image-20230317130920427.png\" alt=\"image-20230317130920427\"></p>\n<p>使用败者树后，内部归并的次数与 k 无关了。因此，只要内存空间足够大，增大归并路数 k 将有效减少归并树的高度，从而减少 I&#x2F;O 次数，提高外部排序的速度。</p>\n<h3 id=\"置换-选择排序\"><a href=\"#置换-选择排序\" class=\"headerlink\" title=\"置换-选择排序\"></a>置换-选择排序</h3><p>优化途径——减小 r</p>\n<p><img src=\"/img/image-20230317133255547.png\" alt=\"image-20230317133255547\"></p>\n<h3 id=\"最佳归并树\"><a href=\"#最佳归并树\" class=\"headerlink\" title=\"最佳归并树\"></a>最佳归并树</h3><p>使用置换-选择排序建立的初始归并段长度各不相同</p>\n<p><img src=\"/img/image-20230317133859423.png\" alt=\"image-20230317133859423\"></p>\n<p>对于 K 叉归并，若初始归并段的数量无法构成严格的 K 叉归并树，则需要补充几个长度为 0 的虚段，再进行 k 叉哈夫曼树的构造。</p>\n<p><img src=\"/img/image-20230317135622897.png\" alt=\"image-20230317135622897\"></p>\n","feature":true,"text":"图图的存储方式邻接矩阵法 空间复杂度 O(n2)，不适合存储稀疏图，浪费空间 矩阵相乘：A^(2)得到的矩阵代表从顶点 i 到 j 长度为 2 的路径条数 邻接表法 十字链表（有向图） 邻接多重表（无向图）当使用邻接表存储时，一条边会对应两份冗余数据，删除节点时很麻烦 遍历#in...","link":"","photos":[],"count_time":{"symbolsCount":"10k","symbolsTime":"9 mins."},"categories":[],"tags":[{"name":"基础知识","slug":"基础知识","count":3,"path":"api/tags/基础知识.json"}],"toc":"<ol class=\"toc\"><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#%E5%9B%BE\"><span class=\"toc-text\">图</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E5%9B%BE%E7%9A%84%E5%AD%98%E5%82%A8%E6%96%B9%E5%BC%8F\"><span class=\"toc-text\">图的存储方式</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E9%82%BB%E6%8E%A5%E7%9F%A9%E9%98%B5%E6%B3%95\"><span class=\"toc-text\">邻接矩阵法</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E9%82%BB%E6%8E%A5%E8%A1%A8%E6%B3%95\"><span class=\"toc-text\">邻接表法</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E5%8D%81%E5%AD%97%E9%93%BE%E8%A1%A8%EF%BC%88%E6%9C%89%E5%90%91%E5%9B%BE%EF%BC%89\"><span class=\"toc-text\">十字链表（有向图）</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E9%82%BB%E6%8E%A5%E5%A4%9A%E9%87%8D%E8%A1%A8%EF%BC%88%E6%97%A0%E5%90%91%E5%9B%BE%EF%BC%89\"><span class=\"toc-text\">邻接多重表（无向图）</span></a></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E9%81%8D%E5%8E%86\"><span class=\"toc-text\">遍历</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E6%9C%80%E5%B0%8F%E7%94%9F%E6%88%90%E6%A0%91\"><span class=\"toc-text\">最小生成树</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E6%9C%80%E7%9F%AD%E8%B7%AF%E5%BE%84\"><span class=\"toc-text\">最短路径</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E6%8B%93%E6%89%91%E6%8E%92%E5%BA%8F\"><span class=\"toc-text\">拓扑排序</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E5%85%B3%E9%94%AE%E8%B7%AF%E5%BE%84\"><span class=\"toc-text\">关键路径</span></a></li></ol></li><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#%E6%9F%A5%E6%89%BE\"><span class=\"toc-text\">查找</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E7%BA%BF%E6%80%A7%E5%AD%98%E5%82%A8\"><span class=\"toc-text\">线性存储</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E9%A1%BA%E5%BA%8F%E6%9F%A5%E6%89%BE\"><span class=\"toc-text\">顺序查找</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E6%8A%98%E5%8D%8A%E6%9F%A5%E6%89%BE\"><span class=\"toc-text\">折半查找</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E5%88%86%E5%9D%97%E6%9F%A5%E6%89%BE\"><span class=\"toc-text\">分块查找</span></a></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E6%A0%91%E5%BD%A2\"><span class=\"toc-text\">树形</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E4%BA%8C%E5%8F%89%E6%8E%92%E5%BA%8F%E6%A0%91\"><span class=\"toc-text\">二叉排序树</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E7%BA%A2%E9%BB%91%E6%A0%91\"><span class=\"toc-text\">红黑树</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#B-%E6%A0%91\"><span class=\"toc-text\">B 树</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#B-%E6%A0%91-1\"><span class=\"toc-text\">B+树</span></a></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E6%95%A3%E5%88%97%E6%9F%A5%E6%89%BE%EF%BC%88Hash-Table%EF%BC%89\"><span class=\"toc-text\">散列查找（Hash Table）</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E5%B8%B8%E8%A7%81%E7%9A%84%E6%95%A3%E5%88%97%E5%87%BD%E6%95%B0\"><span class=\"toc-text\">常见的散列函数</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E5%93%88%E5%B8%8C%E5%86%B2%E7%AA%81%E7%9A%84%E8%A7%A3%E5%86%B3%E5%8A%9E%E6%B3%95\"><span class=\"toc-text\">哈希冲突的解决办法</span></a></li></ol></li></ol></li><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#%E6%8E%92%E5%BA%8F\"><span class=\"toc-text\">排序</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E6%8F%92%E5%85%A5%E6%8E%92%E5%BA%8F\"><span class=\"toc-text\">插入排序</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E4%BA%A4%E6%8D%A2%E6%8E%92%E5%BA%8F\"><span class=\"toc-text\">交换排序</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E5%86%92%E6%B3%A1%E6%8E%92%E5%BA%8F\"><span class=\"toc-text\">冒泡排序</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E5%BF%AB%E9%80%9F%E6%8E%92%E5%BA%8F\"><span class=\"toc-text\">快速排序</span></a></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E9%80%89%E6%8B%A9%E6%8E%92%E5%BA%8F\"><span class=\"toc-text\">选择排序</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E7%AE%80%E5%8D%95%E9%80%89%E6%8B%A9%E6%8E%92%E5%BA%8F\"><span class=\"toc-text\">简单选择排序</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E5%A0%86%E6%8E%92%E5%BA%8F\"><span class=\"toc-text\">堆排序</span></a></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E5%BD%92%E5%B9%B6%E6%8E%92%E5%BA%8F\"><span class=\"toc-text\">归并排序</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E5%9F%BA%E6%95%B0%E6%8E%92%E5%BA%8F\"><span class=\"toc-text\">基数排序</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E5%A4%96%E9%83%A8%E6%8E%92%E5%BA%8F\"><span class=\"toc-text\">外部排序</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E8%B4%A5%E8%80%85%E6%A0%91\"><span class=\"toc-text\">败者树</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E7%BD%AE%E6%8D%A2-%E9%80%89%E6%8B%A9%E6%8E%92%E5%BA%8F\"><span class=\"toc-text\">置换-选择排序</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E6%9C%80%E4%BD%B3%E5%BD%92%E5%B9%B6%E6%A0%91\"><span class=\"toc-text\">最佳归并树</span></a></li></ol></li></ol></li></ol>","author":{"name":"Serena","slug":"blog-author","avatar":"/img/logo.png","link":"/","description":"一位正在重塑知识的技术人 <br /> @ <b>QQ：1424935869</b>","socials":{"github":"https://github.com/YangYue2022","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"https://m.weibo.cn/","zhihu":"","csdn":"https://blog.csdn.net/Serena2000?spm=1000.2115.3001.5343","juejin":"","customs":{}}},"mapped":true,"prev_post":{"title":"计算机网络","uid":"293c17b4d2a4292133cc4d1ffd7f8725","slug":"计算机网络","date":"2023-04-04T16:00:00.000Z","updated":"2023-04-06T07:32:58.992Z","comments":true,"path":"api/articles/计算机网络.json","keywords":null,"cover":[],"text":"计算机网络最近复习计网，看的是1.6 计算机网络体系结构（2）—分层的必要性_哔哩哔哩_bilibili，讲的很好。 参考教材是王道的，这里记录了一些补充知识点。 体系结构网络分层的必要性： 数据链路层 网络层 运输层 应用层 时延问题 数据链路层检错-循环冗余 CRC 可靠传输...","link":"","photos":[],"count_time":{"symbolsCount":323,"symbolsTime":"1 mins."},"categories":[],"tags":[{"name":"基础知识","slug":"基础知识","count":3,"path":"api/tags/基础知识.json"}],"author":{"name":"Serena","slug":"blog-author","avatar":"/img/logo.png","link":"/","description":"一位正在重塑知识的技术人 <br /> @ <b>QQ：1424935869</b>","socials":{"github":"https://github.com/YangYue2022","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"https://m.weibo.cn/","zhihu":"","csdn":"https://blog.csdn.net/Serena2000?spm=1000.2115.3001.5343","juejin":"","customs":{}}},"feature":true},"next_post":{"title":"数据结构（1）","uid":"9b3e5c64d9c6600c826b6e407be811c5","slug":"数据结构1","date":"2023-03-12T16:00:00.000Z","updated":"2023-04-17T15:09:06.036Z","comments":true,"path":"api/articles/数据结构1.json","keywords":null,"cover":[],"text":"数据结构最近跟着 b 站上的王道课程重新学了一遍数据结构，因为时间来不及有一些知识点没有敲代码带有主函数的代码可以看我的 github https://github.com/YangYue2022/DataStructure 线性表顺序表#顺序表的静态存储 #include &l...","link":"","photos":[],"count_time":{"symbolsCount":"31k","symbolsTime":"29 mins."},"categories":[],"tags":[{"name":"基础知识","slug":"基础知识","count":3,"path":"api/tags/基础知识.json"}],"author":{"name":"Serena","slug":"blog-author","avatar":"/img/logo.png","link":"/","description":"一位正在重塑知识的技术人 <br /> @ <b>QQ：1424935869</b>","socials":{"github":"https://github.com/YangYue2022","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"https://m.weibo.cn/","zhihu":"","csdn":"https://blog.csdn.net/Serena2000?spm=1000.2115.3001.5343","juejin":"","customs":{}}}}}