{"title":"数据结构（1）","uid":"9b3e5c64d9c6600c826b6e407be811c5","slug":"数据结构1","date":"2023-03-12T16:00:00.000Z","updated":"2023-04-06T07:32:38.795Z","comments":true,"path":"api/articles/数据结构1.json","keywords":null,"cover":[],"content":"<h1 id=\"数据结构\"><a href=\"#数据结构\" class=\"headerlink\" title=\"数据结构\"></a>数据结构</h1><p>最近跟着 b 站上的王道课程重新学了一遍数据结构，因为时间来不及有一些知识点没有敲代码</p>\n<h2 id=\"线性表\"><a href=\"#线性表\" class=\"headerlink\" title=\"线性表\"></a>线性表</h2><h3 id=\"顺序表\"><a href=\"#顺序表\" class=\"headerlink\" title=\"顺序表\"></a>顺序表</h3><pre class=\"line-numbers language-c\" data-language=\"c\"><code class=\"language-c\">#顺序表的静态存储\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;stdio.h></span></span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">define</span> <span class=\"token macro-name\">MaxSize</span> <span class=\"token expression\"><span class=\"token number\">10</span> </span><span class=\"token comment\">// 定义最大长度</span></span>\n\n<span class=\"token keyword\">typedef</span> <span class=\"token keyword\">struct</span> <span class=\"token punctuation\">&#123;</span>\n\t<span class=\"token keyword\">int</span> data<span class=\"token punctuation\">[</span>MaxSize<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">int</span> length<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span>SqList<span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// 初始化</span>\n<span class=\"token keyword\">void</span> <span class=\"token function\">InitList</span><span class=\"token punctuation\">(</span>SqList<span class=\"token operator\">&amp;</span> L<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n\tL<span class=\"token punctuation\">.</span>length <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span>\n<span class=\"token comment\">// 根据位序i插入e元素</span>\nbool <span class=\"token function\">ListInsert</span><span class=\"token punctuation\">(</span>SqList<span class=\"token operator\">&amp;</span> L<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> i<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> e<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>i <span class=\"token operator\">&lt;</span> <span class=\"token number\">1</span> <span class=\"token operator\">||</span> i <span class=\"token operator\">></span> L<span class=\"token punctuation\">.</span>length <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span> <span class=\"token comment\">// 是否合法</span>\n\t\t<span class=\"token keyword\">return</span> false<span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">&#125;</span>\n\t<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> j <span class=\"token operator\">=</span> L<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span> j <span class=\"token operator\">>=</span> i<span class=\"token punctuation\">;</span> j<span class=\"token operator\">--</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span><span class=\"token comment\">// 先向后移动</span>\n\t\tL<span class=\"token punctuation\">.</span>data<span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> L<span class=\"token punctuation\">.</span>data<span class=\"token punctuation\">[</span>j <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">&#125;</span>\n\tL<span class=\"token punctuation\">.</span>data<span class=\"token punctuation\">[</span>i <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> e<span class=\"token punctuation\">;</span><span class=\"token comment\">// 再i-1位置放置e</span>\n\tL<span class=\"token punctuation\">.</span>length<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 长度+1</span>\n\t<span class=\"token keyword\">return</span> true<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span>\n<span class=\"token comment\">// 根据位序i删除元素，返回删除的元素值e</span>\nbool <span class=\"token function\">ListDelete</span><span class=\"token punctuation\">(</span>SqList<span class=\"token operator\">&amp;</span> L<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> i<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span><span class=\"token operator\">&amp;</span> e<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>i <span class=\"token operator\">&lt;</span> <span class=\"token number\">1</span> <span class=\"token operator\">||</span> i <span class=\"token operator\">></span> L<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n\t\t<span class=\"token keyword\">return</span> false<span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">&#125;</span>\n\te <span class=\"token operator\">=</span> L<span class=\"token punctuation\">.</span>data<span class=\"token punctuation\">[</span>i <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> j <span class=\"token operator\">=</span> i<span class=\"token punctuation\">;</span> j <span class=\"token operator\">&lt;</span> L<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span> j<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span><span class=\"token comment\">// 删除的位置后的元素往前移动</span>\n\t\tL<span class=\"token punctuation\">.</span>data<span class=\"token punctuation\">[</span>j <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> L<span class=\"token punctuation\">.</span>data<span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">&#125;</span>\n\tL<span class=\"token punctuation\">.</span>length<span class=\"token operator\">--</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">return</span> true<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span>\n<span class=\"token comment\">// 按位序i查找元素，返回值</span>\n<span class=\"token keyword\">int</span> <span class=\"token function\">GetElem</span><span class=\"token punctuation\">(</span>SqList<span class=\"token operator\">&amp;</span> L<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> i<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>i <span class=\"token operator\">&lt;</span> <span class=\"token number\">1</span> <span class=\"token operator\">||</span> i <span class=\"token operator\">></span> L<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n\t\t<span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">&#125;</span>\n\t<span class=\"token keyword\">return</span> L<span class=\"token punctuation\">.</span>data<span class=\"token punctuation\">[</span>i <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span>\n<span class=\"token comment\">// 按值e查找元素，返回位序</span>\n<span class=\"token keyword\">int</span> <span class=\"token function\">LocateElem</span><span class=\"token punctuation\">(</span>SqList<span class=\"token operator\">&amp;</span> L<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> e<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n\t<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> L<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n\t\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>e <span class=\"token operator\">==</span> L<span class=\"token punctuation\">.</span>data<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n\t\t\t<span class=\"token keyword\">return</span> i <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token punctuation\">&#125;</span>\n\t<span class=\"token punctuation\">&#125;</span>\n\t<span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span>\n<span class=\"token comment\">// 遍历顺序表元素</span>\n<span class=\"token keyword\">void</span> <span class=\"token function\">PrintList</span><span class=\"token punctuation\">(</span>SqList<span class=\"token operator\">&amp;</span> L<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n\t<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> L<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n\t\t<span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%d\\t\"</span><span class=\"token punctuation\">,</span> L<span class=\"token punctuation\">.</span>data<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">&#125;</span>\n\t<span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h3 id=\"链表\"><a href=\"#链表\" class=\"headerlink\" title=\"链表\"></a>链表</h3><h4 id=\"不带头节点的单链表\"><a href=\"#不带头节点的单链表\" class=\"headerlink\" title=\"不带头节点的单链表\"></a>不带头节点的单链表</h4><pre class=\"line-numbers language-c\" data-language=\"c\"><code class=\"language-c\"><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;stdio.h></span></span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;stdlib.h></span></span>\n<span class=\"token keyword\">typedef</span> <span class=\"token keyword\">struct</span> <span class=\"token class-name\">node</span>\n<span class=\"token punctuation\">&#123;</span>\n\t<span class=\"token keyword\">int</span> data<span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">struct</span> <span class=\"token class-name\">node</span><span class=\"token operator\">*</span> next<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span> LNode<span class=\"token punctuation\">,</span> <span class=\"token operator\">*</span> LinkList<span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// 链表建立</span>\nLinkList <span class=\"token function\">List_TailInsert</span><span class=\"token punctuation\">(</span>LinkList<span class=\"token operator\">&amp;</span> L<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span><span class=\"token comment\">// 尾插法</span>\n\tL<span class=\"token operator\">=</span><span class=\"token punctuation\">(</span>LNode<span class=\"token operator\">*</span><span class=\"token punctuation\">)</span><span class=\"token function\">malloc</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">sizeof</span><span class=\"token punctuation\">(</span>LNode<span class=\"token operator\">*</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\tLNode <span class=\"token operator\">*</span>s<span class=\"token operator\">=</span>L<span class=\"token punctuation\">,</span><span class=\"token operator\">*</span>t<span class=\"token operator\">=</span><span class=\"token constant\">NULL</span><span class=\"token punctuation\">;</span>\n\tL<span class=\"token operator\">-></span>next<span class=\"token operator\">=</span><span class=\"token constant\">NULL</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">int</span> x<span class=\"token punctuation\">;</span>\n\t<span class=\"token function\">scanf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%d\"</span><span class=\"token punctuation\">,</span><span class=\"token operator\">&amp;</span>x<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span>x<span class=\"token operator\">!=</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n\t\t<span class=\"token comment\">//s是新节点，t是尾节点</span>\n\t\ts<span class=\"token operator\">-></span>data<span class=\"token operator\">=</span>x<span class=\"token punctuation\">;</span>\n\t\t<span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>t<span class=\"token operator\">!=</span><span class=\"token constant\">NULL</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n\t\t\tt<span class=\"token operator\">-></span>next<span class=\"token operator\">=</span>s<span class=\"token punctuation\">;</span>\n\t\t<span class=\"token punctuation\">&#125;</span>\n\t\tt<span class=\"token operator\">=</span>s<span class=\"token punctuation\">;</span>\n\t\t<span class=\"token function\">scanf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%d\"</span><span class=\"token punctuation\">,</span><span class=\"token operator\">&amp;</span>x<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\ts<span class=\"token operator\">=</span><span class=\"token punctuation\">(</span>LNode<span class=\"token operator\">*</span><span class=\"token punctuation\">)</span><span class=\"token function\">malloc</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">sizeof</span><span class=\"token punctuation\">(</span>LNode<span class=\"token operator\">*</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">&#125;</span>\n\tt<span class=\"token operator\">-></span>next<span class=\"token operator\">=</span><span class=\"token constant\">NULL</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">return</span> L<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span>\n<span class=\"token comment\">// 按位序i查找结点，1是第一个节点</span>\nLNode<span class=\"token operator\">*</span> <span class=\"token function\">GetElem</span><span class=\"token punctuation\">(</span>LinkList<span class=\"token operator\">&amp;</span> L<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> i<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>i <span class=\"token operator\">&lt;=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n\t\t<span class=\"token keyword\">return</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">&#125;</span>\n\t<span class=\"token keyword\">int</span> j <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\t\t\t\t\t<span class=\"token comment\">// // 注意：不带头结点从1开始，首元结点的位序为1</span>\n\tLNode<span class=\"token operator\">*</span> p <span class=\"token operator\">=</span> L<span class=\"token punctuation\">;</span>\t\t\t\t<span class=\"token comment\">// 头结点开始</span>\n\t<span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>p <span class=\"token operator\">!=</span> <span class=\"token constant\">NULL</span> <span class=\"token operator\">&amp;&amp;</span> j <span class=\"token operator\">&lt;</span> i<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\t<span class=\"token comment\">// 依次寻找</span>\n\t\tp <span class=\"token operator\">=</span> p<span class=\"token operator\">-></span>next<span class=\"token punctuation\">;</span>\n\t\tj<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">&#125;</span>\n\t<span class=\"token keyword\">return</span> p<span class=\"token punctuation\">;</span>\n\n<span class=\"token punctuation\">&#125;</span>\n<span class=\"token comment\">// 在位序i的位置插入结点操作</span>\nbool <span class=\"token function\">ListInsert</span><span class=\"token punctuation\">(</span>LinkList<span class=\"token operator\">&amp;</span> L<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> i<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> e<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n\t<span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>i<span class=\"token operator\">&lt;</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span> false<span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>i<span class=\"token operator\">==</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span> <span class=\"token comment\">//如果在表头插入节点</span>\n\t\tLNode<span class=\"token operator\">*</span> s<span class=\"token operator\">=</span><span class=\"token punctuation\">(</span>LNode<span class=\"token operator\">*</span><span class=\"token punctuation\">)</span><span class=\"token function\">malloc</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">sizeof</span><span class=\"token punctuation\">(</span>LNode<span class=\"token operator\">*</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\ts<span class=\"token operator\">-></span>data<span class=\"token operator\">=</span>e<span class=\"token punctuation\">;</span>\n\t\ts<span class=\"token operator\">-></span>next<span class=\"token operator\">=</span>L<span class=\"token operator\">-></span>next<span class=\"token punctuation\">;</span>\n\t\tL<span class=\"token operator\">=</span>s<span class=\"token punctuation\">;</span>\n\n\t<span class=\"token punctuation\">&#125;</span>\n\t<span class=\"token keyword\">else</span><span class=\"token punctuation\">&#123;</span>\n\t\tLNode<span class=\"token operator\">*</span> s<span class=\"token operator\">=</span><span class=\"token function\">GetElem</span><span class=\"token punctuation\">(</span>L<span class=\"token punctuation\">,</span>i<span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\tLNode<span class=\"token operator\">*</span> p<span class=\"token operator\">=</span><span class=\"token punctuation\">(</span>LNode<span class=\"token operator\">*</span><span class=\"token punctuation\">)</span><span class=\"token function\">malloc</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">sizeof</span><span class=\"token punctuation\">(</span>LNode<span class=\"token operator\">*</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\tp<span class=\"token operator\">-></span>data<span class=\"token operator\">=</span>e<span class=\"token punctuation\">;</span>\n\t\tp<span class=\"token operator\">-></span>next<span class=\"token operator\">=</span>s<span class=\"token operator\">-></span>next<span class=\"token punctuation\">;</span>\n\t\ts<span class=\"token operator\">-></span>next<span class=\"token operator\">=</span>p<span class=\"token punctuation\">;</span>\n\n\t<span class=\"token punctuation\">&#125;</span>\n\t<span class=\"token keyword\">return</span> true<span class=\"token punctuation\">;</span>\n\n<span class=\"token punctuation\">&#125;</span>\n<span class=\"token comment\">// 在位序i的位置删除结点操作</span>\nbool <span class=\"token function\">ListDelete</span><span class=\"token punctuation\">(</span>LinkList<span class=\"token operator\">&amp;</span> L<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> i<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span><span class=\"token operator\">&amp;</span> e<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n\n\t<span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>i<span class=\"token operator\">&lt;</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span> false<span class=\"token punctuation\">;</span>\n\n\t<span class=\"token comment\">//删除第一个节点</span>\n\t<span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>i<span class=\"token operator\">==</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n\t\tLNode<span class=\"token operator\">*</span> temp<span class=\"token operator\">=</span>L<span class=\"token punctuation\">;</span>\n\t\tL<span class=\"token operator\">=</span>L<span class=\"token operator\">-></span>next<span class=\"token punctuation\">;</span>\n\t\t<span class=\"token function\">free</span><span class=\"token punctuation\">(</span>temp<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">&#125;</span>\n\n\t<span class=\"token comment\">//删除后面的节点</span>\n\tLNode<span class=\"token operator\">*</span> temp<span class=\"token operator\">=</span> <span class=\"token function\">GetElem</span><span class=\"token punctuation\">(</span>L<span class=\"token punctuation\">,</span>i<span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>temp<span class=\"token operator\">==</span><span class=\"token constant\">NULL</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span> false<span class=\"token punctuation\">;</span>\n\tLNode<span class=\"token operator\">*</span>q<span class=\"token operator\">=</span>temp<span class=\"token operator\">-></span>next<span class=\"token punctuation\">;</span>\n\ttemp<span class=\"token operator\">-></span>next<span class=\"token operator\">=</span>q<span class=\"token operator\">-></span>next<span class=\"token punctuation\">;</span>\n\t<span class=\"token function\">free</span><span class=\"token punctuation\">(</span>q<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">return</span> true<span class=\"token punctuation\">;</span>\n\n<span class=\"token punctuation\">&#125;</span>\n<span class=\"token comment\">// 求表长</span>\n<span class=\"token keyword\">int</span> <span class=\"token function\">Length</span><span class=\"token punctuation\">(</span>LinkList<span class=\"token operator\">&amp;</span> L<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n\t<span class=\"token keyword\">int</span> res<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span>LNode<span class=\"token operator\">*</span> i<span class=\"token operator\">=</span>L<span class=\"token punctuation\">;</span>i<span class=\"token operator\">!=</span><span class=\"token constant\">NULL</span><span class=\"token punctuation\">;</span>i<span class=\"token operator\">=</span>i<span class=\"token operator\">-></span>next<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n\t\tres<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">&#125;</span>\n\t<span class=\"token keyword\">return</span> res<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span>\n<span class=\"token comment\">// 链表输出</span>\n<span class=\"token keyword\">void</span> <span class=\"token function\">PrintLinkList</span><span class=\"token punctuation\">(</span>LinkList<span class=\"token operator\">&amp;</span> L<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n\tLNode<span class=\"token operator\">*</span> p <span class=\"token operator\">=</span> L<span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>p <span class=\"token operator\">!=</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n\t\t<span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%d\\t\"</span><span class=\"token punctuation\">,</span> p<span class=\"token operator\">-></span>data<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\tp <span class=\"token operator\">=</span> p<span class=\"token operator\">-></span>next<span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">&#125;</span>\n\t<span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h4 id=\"带头结点的单链表\"><a href=\"#带头结点的单链表\" class=\"headerlink\" title=\"带头结点的单链表\"></a>带头结点的单链表</h4><pre class=\"line-numbers language-c\" data-language=\"c\"><code class=\"language-c\"><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;stdio.h></span></span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;stdlib.h></span></span>\n<span class=\"token keyword\">typedef</span> <span class=\"token keyword\">struct</span> <span class=\"token class-name\">LNode</span> <span class=\"token punctuation\">&#123;</span>\n\t<span class=\"token keyword\">int</span> data<span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">struct</span> <span class=\"token class-name\">LNode</span><span class=\"token operator\">*</span> next<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span>LNode<span class=\"token punctuation\">,</span><span class=\"token operator\">*</span> LinkList<span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// 单链表的建立</span>\nLNode<span class=\"token operator\">*</span> <span class=\"token function\">List_HeadInsert</span><span class=\"token punctuation\">(</span>LinkList<span class=\"token operator\">&amp;</span> l<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span><span class=\"token comment\">// 头插法，建立逆序单链表</span>\n\tl<span class=\"token operator\">=</span><span class=\"token punctuation\">(</span>LNode<span class=\"token operator\">*</span><span class=\"token punctuation\">)</span><span class=\"token function\">malloc</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">sizeof</span><span class=\"token punctuation\">(</span>LNode<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\tLNode<span class=\"token operator\">*</span> s<span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">int</span> x<span class=\"token punctuation\">;</span>\n\tl<span class=\"token operator\">-></span>next<span class=\"token operator\">=</span><span class=\"token constant\">NULL</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token function\">scanf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%d\"</span><span class=\"token punctuation\">,</span><span class=\"token operator\">&amp;</span>x<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span>x<span class=\"token operator\">!=</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n\t\ts<span class=\"token operator\">=</span><span class=\"token punctuation\">(</span>LNode<span class=\"token operator\">*</span><span class=\"token punctuation\">)</span><span class=\"token function\">malloc</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">sizeof</span><span class=\"token punctuation\">(</span>LNode<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\ts<span class=\"token operator\">-></span>data<span class=\"token operator\">=</span>x<span class=\"token punctuation\">;</span>\n\t\ts<span class=\"token operator\">-></span>next<span class=\"token operator\">=</span>l<span class=\"token operator\">-></span>next<span class=\"token punctuation\">;</span>\n\t\tl<span class=\"token operator\">-></span>next<span class=\"token operator\">=</span>s<span class=\"token punctuation\">;</span>\n\t\t<span class=\"token function\">scanf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%d\"</span><span class=\"token punctuation\">,</span><span class=\"token operator\">&amp;</span>x<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">&#125;</span>\n\t<span class=\"token keyword\">return</span> l<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span>\nLNode<span class=\"token operator\">*</span> <span class=\"token function\">List_TailInsert</span><span class=\"token punctuation\">(</span>LinkList<span class=\"token operator\">&amp;</span> l<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span><span class=\"token comment\">// 尾插法</span>\n\tl<span class=\"token operator\">=</span><span class=\"token punctuation\">(</span>LNode<span class=\"token operator\">*</span><span class=\"token punctuation\">)</span><span class=\"token function\">malloc</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">sizeof</span><span class=\"token punctuation\">(</span>LNode<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\tl<span class=\"token operator\">-></span>next<span class=\"token operator\">=</span><span class=\"token constant\">NULL</span><span class=\"token punctuation\">;</span>\n\tLNode<span class=\"token operator\">*</span> s<span class=\"token punctuation\">;</span>\n\tLNode<span class=\"token operator\">*</span> temp<span class=\"token operator\">=</span>l<span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">int</span> x<span class=\"token punctuation\">;</span>\n\t<span class=\"token function\">scanf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%d\"</span><span class=\"token punctuation\">,</span><span class=\"token operator\">&amp;</span>x<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span>x<span class=\"token operator\">!=</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n\t\ts<span class=\"token operator\">=</span><span class=\"token punctuation\">(</span>LNode<span class=\"token operator\">*</span><span class=\"token punctuation\">)</span><span class=\"token function\">malloc</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">sizeof</span><span class=\"token punctuation\">(</span>LNode<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\ts<span class=\"token operator\">-></span>data<span class=\"token operator\">=</span>x<span class=\"token punctuation\">;</span>\n\t\ts<span class=\"token operator\">-></span>next<span class=\"token operator\">=</span><span class=\"token constant\">NULL</span><span class=\"token punctuation\">;</span>\n\t\ttemp<span class=\"token operator\">-></span>next<span class=\"token operator\">=</span>s<span class=\"token punctuation\">;</span>\n\t\ttemp<span class=\"token operator\">=</span>s<span class=\"token punctuation\">;</span>\n\t\t<span class=\"token function\">scanf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%d\"</span><span class=\"token punctuation\">,</span><span class=\"token operator\">&amp;</span>x<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">&#125;</span>\n\ttemp<span class=\"token operator\">-></span>next<span class=\"token operator\">=</span><span class=\"token constant\">NULL</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">return</span> l<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span>\n<span class=\"token comment\">// 按位序i查找结点，头结点的位序是0，1是第一个节点</span>\nLNode<span class=\"token operator\">*</span> <span class=\"token function\">GetElem</span><span class=\"token punctuation\">(</span>LNode<span class=\"token operator\">*</span> l<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> i<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n\t<span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>i<span class=\"token operator\">&lt;</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">;</span>\n\tLNode<span class=\"token operator\">*</span> s<span class=\"token operator\">=</span>l<span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">int</span> j<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span>j<span class=\"token operator\">&lt;</span>i<span class=\"token operator\">&amp;&amp;</span>s<span class=\"token operator\">!=</span><span class=\"token constant\">NULL</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n\t\tj<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span>\n\t\ts<span class=\"token operator\">=</span>s<span class=\"token operator\">-></span>next<span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">&#125;</span>\n\t<span class=\"token keyword\">return</span> s<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span>\n<span class=\"token comment\">// 按值e查找结点</span>\nLNode<span class=\"token operator\">*</span> <span class=\"token function\">LocateElem</span><span class=\"token punctuation\">(</span>LNode<span class=\"token operator\">*</span> l<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> e<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n\t<span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span>LNode<span class=\"token operator\">*</span> s<span class=\"token operator\">=</span>l<span class=\"token operator\">-></span>next<span class=\"token punctuation\">;</span>s<span class=\"token operator\">!=</span><span class=\"token constant\">NULL</span><span class=\"token punctuation\">;</span>s<span class=\"token operator\">=</span>s<span class=\"token operator\">-></span>next<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n\t\t<span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>s<span class=\"token operator\">-></span>data<span class=\"token operator\">==</span>e<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n\t\t\t<span class=\"token keyword\">return</span> s<span class=\"token punctuation\">;</span>\n\t\t<span class=\"token punctuation\">&#125;</span>\n\t<span class=\"token punctuation\">&#125;</span>\n\t<span class=\"token keyword\">return</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span>\n<span class=\"token comment\">// 后插操作：在结点p后插入新节点-方法1</span>\nbool <span class=\"token function\">InsertNextNode</span><span class=\"token punctuation\">(</span>LNode<span class=\"token operator\">*</span> p<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> e<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n\t<span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>p<span class=\"token operator\">==</span><span class=\"token constant\">NULL</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span> false<span class=\"token punctuation\">;</span>\n\tLNode<span class=\"token operator\">*</span> s<span class=\"token operator\">=</span><span class=\"token punctuation\">(</span>LNode<span class=\"token operator\">*</span><span class=\"token punctuation\">)</span><span class=\"token function\">malloc</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">sizeof</span><span class=\"token punctuation\">(</span>LNode<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\ts<span class=\"token operator\">-></span>data<span class=\"token operator\">=</span>e<span class=\"token punctuation\">;</span>\n\ts<span class=\"token operator\">-></span>next<span class=\"token operator\">=</span>p<span class=\"token operator\">-></span>next<span class=\"token punctuation\">;</span>\n\tp<span class=\"token operator\">-></span>next<span class=\"token operator\">=</span>s<span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">return</span> true<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span>\n<span class=\"token comment\">// 前插操作：在结点p之前插入元素e-方法2</span>\nbool <span class=\"token function\">InsertPriorNode</span><span class=\"token punctuation\">(</span>LNode<span class=\"token operator\">*</span> p<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> e<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n\t<span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>p<span class=\"token operator\">==</span><span class=\"token constant\">NULL</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span> false<span class=\"token punctuation\">;</span>\n\tLNode<span class=\"token operator\">*</span> s<span class=\"token operator\">=</span><span class=\"token punctuation\">(</span>LNode<span class=\"token operator\">*</span><span class=\"token punctuation\">)</span><span class=\"token function\">malloc</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">sizeof</span><span class=\"token punctuation\">(</span>LNode<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\ts<span class=\"token operator\">-></span>next<span class=\"token operator\">=</span>p<span class=\"token operator\">-></span>next<span class=\"token punctuation\">;</span>\n\tp<span class=\"token operator\">-></span>next<span class=\"token operator\">=</span>s<span class=\"token punctuation\">;</span>\n\ts<span class=\"token operator\">-></span>data<span class=\"token operator\">=</span>p<span class=\"token operator\">-></span>data<span class=\"token punctuation\">;</span>\n\tp<span class=\"token operator\">-></span>data<span class=\"token operator\">=</span>e<span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">return</span> true<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span>\n<span class=\"token comment\">// 在位序i的位置插入结点操作</span>\nbool <span class=\"token function\">ListInsert</span><span class=\"token punctuation\">(</span>LNode<span class=\"token operator\">*</span> l<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> i<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> e<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n\tLNode<span class=\"token operator\">*</span> s<span class=\"token operator\">=</span><span class=\"token function\">GetElem</span><span class=\"token punctuation\">(</span>l<span class=\"token punctuation\">,</span>i<span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token function\">InsertNextNode</span><span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">,</span>e<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span>\n<span class=\"token comment\">// 在位序i的位置插入结点操作</span>\nbool <span class=\"token function\">ListInsertBefore</span><span class=\"token punctuation\">(</span>LNode<span class=\"token operator\">*</span> l<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> i<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> e<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n\tLNode<span class=\"token operator\">*</span> s<span class=\"token operator\">=</span><span class=\"token function\">GetElem</span><span class=\"token punctuation\">(</span>l<span class=\"token punctuation\">,</span>i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token function\">InsertPriorNode</span><span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">,</span>e<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span>\n<span class=\"token comment\">// 在位序i的位置删除结点操作-方法1</span>\nbool <span class=\"token function\">ListDelete</span><span class=\"token punctuation\">(</span>LNode<span class=\"token operator\">*</span> l<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> i<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span><span class=\"token operator\">&amp;</span> e<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n\tLNode<span class=\"token operator\">*</span> s<span class=\"token operator\">=</span><span class=\"token function\">GetElem</span><span class=\"token punctuation\">(</span>l<span class=\"token punctuation\">,</span>i<span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>s<span class=\"token operator\">==</span><span class=\"token constant\">NULL</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span> false<span class=\"token punctuation\">;</span>\n\tLNode<span class=\"token operator\">*</span> q<span class=\"token operator\">=</span>s<span class=\"token operator\">-></span>next<span class=\"token punctuation\">;</span>\n\ts<span class=\"token operator\">-></span>next<span class=\"token operator\">=</span>q<span class=\"token operator\">-></span>next<span class=\"token punctuation\">;</span>\n\te<span class=\"token operator\">=</span>q<span class=\"token operator\">-></span>data<span class=\"token punctuation\">;</span>\n\t<span class=\"token function\">free</span><span class=\"token punctuation\">(</span>q<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">return</span> true<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span>\n<span class=\"token comment\">//  删除指定结点p, 不通过前驱节点操作，用交换数据那样删除，但是注意最后一个节点不能这样删除-方法2</span>\nbool <span class=\"token function\">DeleteZhidingLNode</span><span class=\"token punctuation\">(</span>LNode<span class=\"token operator\">*</span> p<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n\t<span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>p<span class=\"token operator\">==</span><span class=\"token constant\">NULL</span><span class=\"token operator\">||</span>p<span class=\"token operator\">-></span>next<span class=\"token operator\">==</span><span class=\"token constant\">NULL</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span> false<span class=\"token punctuation\">;</span>\n\tLNode<span class=\"token operator\">*</span> s<span class=\"token operator\">=</span>p<span class=\"token operator\">-></span>next<span class=\"token punctuation\">;</span>\n\tp<span class=\"token operator\">-></span>data<span class=\"token operator\">=</span>s<span class=\"token operator\">-></span>data<span class=\"token punctuation\">;</span>\n\tp<span class=\"token operator\">-></span>next<span class=\"token operator\">=</span>s<span class=\"token operator\">-></span>next<span class=\"token punctuation\">;</span>\n\t<span class=\"token function\">free</span><span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">return</span> true<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span>\n<span class=\"token comment\">// 在位序i的位置删除结点操作</span>\nbool <span class=\"token function\">ListDeleteZhiding</span><span class=\"token punctuation\">(</span>LNode<span class=\"token operator\">*</span> l<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> i<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span><span class=\"token operator\">&amp;</span> e<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n\n\tLNode<span class=\"token operator\">*</span> s<span class=\"token operator\">=</span><span class=\"token function\">GetElem</span><span class=\"token punctuation\">(</span>l<span class=\"token punctuation\">,</span>i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>s<span class=\"token operator\">==</span><span class=\"token constant\">NULL</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span> false<span class=\"token punctuation\">;</span>\n\te<span class=\"token operator\">=</span>s<span class=\"token operator\">-></span>data<span class=\"token punctuation\">;</span>\n\t<span class=\"token function\">DeleteZhidingLNode</span><span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">return</span> true<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span>\n<span class=\"token comment\">// 求表长</span>\n<span class=\"token keyword\">int</span> <span class=\"token function\">Length</span><span class=\"token punctuation\">(</span>LNode<span class=\"token operator\">*</span> l<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n\t<span class=\"token keyword\">int</span> i<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span>LNode<span class=\"token operator\">*</span> s<span class=\"token operator\">=</span>l<span class=\"token punctuation\">;</span>s<span class=\"token operator\">-></span>next<span class=\"token operator\">!=</span><span class=\"token constant\">NULL</span><span class=\"token punctuation\">;</span>s<span class=\"token operator\">=</span>s<span class=\"token operator\">-></span>next<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n\t\ti<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">&#125;</span>\n\t<span class=\"token keyword\">return</span> i<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span>\n<span class=\"token comment\">// 链表输出</span>\n<span class=\"token keyword\">void</span> <span class=\"token function\">PrintLinkList</span><span class=\"token punctuation\">(</span>LinkList<span class=\"token operator\">&amp;</span> l<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n\t<span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"开始打印\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\tLNode<span class=\"token operator\">*</span> p <span class=\"token operator\">=</span> l<span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>p<span class=\"token operator\">-></span>next <span class=\"token operator\">!=</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n\t\tp <span class=\"token operator\">=</span> p<span class=\"token operator\">-></span>next<span class=\"token punctuation\">;</span>\n\t\t<span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%d\\t\"</span><span class=\"token punctuation\">,</span> p<span class=\"token operator\">-></span>data<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">// 放后面因为头结点是没有值的</span>\n\t<span class=\"token punctuation\">&#125;</span>\n\t<span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h4 id=\"带头结点的双链表\"><a href=\"#带头结点的双链表\" class=\"headerlink\" title=\"带头结点的双链表\"></a>带头结点的双链表</h4><pre class=\"line-numbers language-c\" data-language=\"c\"><code class=\"language-c\"><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;stdio.h></span></span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;stdlib.h></span></span>\n<span class=\"token keyword\">typedef</span> <span class=\"token keyword\">struct</span> <span class=\"token class-name\">LNode</span> <span class=\"token punctuation\">&#123;</span>\n\t<span class=\"token keyword\">int</span> data<span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">struct</span> <span class=\"token class-name\">LNode</span><span class=\"token operator\">*</span> next<span class=\"token punctuation\">;</span><span class=\"token comment\">// 下一个</span>\n\t<span class=\"token keyword\">struct</span> <span class=\"token class-name\">LNode</span><span class=\"token operator\">*</span> prior<span class=\"token punctuation\">;</span><span class=\"token comment\">// 上一个</span>\n<span class=\"token punctuation\">&#125;</span>LNode<span class=\"token punctuation\">,</span> <span class=\"token operator\">*</span> LinkList<span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// 双链表的建立</span>\nLinkList <span class=\"token function\">List_TailInsert</span><span class=\"token punctuation\">(</span>LinkList<span class=\"token operator\">&amp;</span> l<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span><span class=\"token comment\">// 尾插法</span>\n\tl<span class=\"token operator\">=</span><span class=\"token punctuation\">(</span>LNode<span class=\"token operator\">*</span><span class=\"token punctuation\">)</span><span class=\"token function\">malloc</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">sizeof</span><span class=\"token punctuation\">(</span>LNode<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\tl<span class=\"token operator\">-></span>prior<span class=\"token operator\">=</span><span class=\"token constant\">NULL</span><span class=\"token punctuation\">;</span>\n\tLNode<span class=\"token operator\">*</span>temp<span class=\"token operator\">=</span>l<span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">int</span> x<span class=\"token punctuation\">;</span>\n\t<span class=\"token function\">scanf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%d\"</span><span class=\"token punctuation\">,</span><span class=\"token operator\">&amp;</span>x<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span>x<span class=\"token operator\">!=</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n\t\tLNode<span class=\"token operator\">*</span>s<span class=\"token operator\">=</span><span class=\"token punctuation\">(</span>LNode<span class=\"token operator\">*</span><span class=\"token punctuation\">)</span><span class=\"token function\">malloc</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">sizeof</span><span class=\"token punctuation\">(</span>LNode<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\ts<span class=\"token operator\">-></span>data<span class=\"token operator\">=</span>x<span class=\"token punctuation\">;</span>\n\t\ts<span class=\"token operator\">-></span>prior<span class=\"token operator\">=</span>temp<span class=\"token punctuation\">;</span>\n\t\ttemp<span class=\"token operator\">-></span>next<span class=\"token operator\">=</span>s<span class=\"token punctuation\">;</span>\n\t\ttemp<span class=\"token operator\">=</span>s<span class=\"token punctuation\">;</span>\n\t\t<span class=\"token function\">scanf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%d\"</span><span class=\"token punctuation\">,</span><span class=\"token operator\">&amp;</span>x<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">&#125;</span>\n\ttemp<span class=\"token operator\">-></span>next<span class=\"token operator\">=</span><span class=\"token constant\">NULL</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">return</span> l<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span>\n<span class=\"token comment\">// 按位序i查找结点，头结点的位序是0，1是第一个节点</span>\nLNode<span class=\"token operator\">*</span> <span class=\"token function\">GetElem</span><span class=\"token punctuation\">(</span>LinkList<span class=\"token operator\">&amp;</span> L<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> i<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n\tLNode<span class=\"token operator\">*</span> s<span class=\"token operator\">=</span>L<span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">int</span> j<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span>j<span class=\"token operator\">&lt;</span>i<span class=\"token operator\">&amp;&amp;</span>s<span class=\"token operator\">!=</span><span class=\"token constant\">NULL</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n\t\ts<span class=\"token operator\">=</span>s<span class=\"token operator\">-></span>next<span class=\"token punctuation\">;</span>\n\t\tj<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">&#125;</span>\n\t<span class=\"token keyword\">return</span> s<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span>\n<span class=\"token comment\">// 按值e查找结点</span>\nLNode<span class=\"token operator\">*</span> <span class=\"token function\">LocateElem</span><span class=\"token punctuation\">(</span>LinkList<span class=\"token operator\">&amp;</span> L<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> e<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n\tLNode<span class=\"token operator\">*</span> s<span class=\"token operator\">=</span>L<span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span>s<span class=\"token operator\">!=</span><span class=\"token constant\">NULL</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n\t\t<span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>s<span class=\"token operator\">-></span>data<span class=\"token operator\">==</span>e<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n\t\t\t<span class=\"token keyword\">return</span> s<span class=\"token punctuation\">;</span>\n\t\t<span class=\"token punctuation\">&#125;</span>\n\t\ts<span class=\"token operator\">=</span>s<span class=\"token operator\">-></span>next<span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">&#125;</span>\n\t<span class=\"token keyword\">return</span> s<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span>\n<span class=\"token comment\">//求表长</span>\n<span class=\"token keyword\">int</span> <span class=\"token function\">Length</span><span class=\"token punctuation\">(</span>LinkList<span class=\"token operator\">&amp;</span> L<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n\t<span class=\"token keyword\">int</span> res<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span>LNode<span class=\"token operator\">*</span> i<span class=\"token operator\">=</span>L<span class=\"token operator\">-></span>next<span class=\"token punctuation\">;</span>i<span class=\"token operator\">!=</span><span class=\"token constant\">NULL</span><span class=\"token punctuation\">;</span>i<span class=\"token operator\">=</span>i<span class=\"token operator\">-></span>next<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n\t\tres<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">&#125;</span>\n\t<span class=\"token keyword\">return</span> res<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token comment\">// 在位序i的位置插入结点操作</span>\nbool <span class=\"token function\">ListInsert</span><span class=\"token punctuation\">(</span>LinkList<span class=\"token operator\">&amp;</span> L<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> i<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> e<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n\t<span class=\"token keyword\">int</span> length<span class=\"token operator\">=</span><span class=\"token function\">Length</span><span class=\"token punctuation\">(</span>L<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>i<span class=\"token operator\">&lt;</span><span class=\"token number\">1</span><span class=\"token operator\">||</span>i<span class=\"token operator\">></span>length<span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span> false<span class=\"token punctuation\">;</span>\n\n\n\t\tLNode<span class=\"token operator\">*</span> s<span class=\"token operator\">=</span><span class=\"token punctuation\">(</span>LNode<span class=\"token operator\">*</span><span class=\"token punctuation\">)</span><span class=\"token function\">malloc</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">sizeof</span><span class=\"token punctuation\">(</span>LNode<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\ts<span class=\"token operator\">-></span>data<span class=\"token operator\">=</span>e<span class=\"token punctuation\">;</span>\n\t\tLNode<span class=\"token operator\">*</span> pre<span class=\"token operator\">=</span><span class=\"token function\">GetElem</span><span class=\"token punctuation\">(</span>L<span class=\"token punctuation\">,</span>i<span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\t\tLNode<span class=\"token operator\">*</span> next<span class=\"token operator\">=</span>pre<span class=\"token operator\">-></span>next<span class=\"token punctuation\">;</span>\n\t\tpre<span class=\"token operator\">-></span>next<span class=\"token operator\">=</span>s<span class=\"token punctuation\">;</span>\n\t\ts<span class=\"token operator\">-></span>prior<span class=\"token operator\">=</span>pre<span class=\"token punctuation\">;</span>\n\t\ts<span class=\"token operator\">-></span>next<span class=\"token operator\">=</span>next<span class=\"token punctuation\">;</span>\n\t\t<span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>next<span class=\"token operator\">!=</span><span class=\"token constant\">NULL</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n\t\t\tnext<span class=\"token operator\">-></span>prior<span class=\"token operator\">=</span>s<span class=\"token punctuation\">;</span>\n\t\t<span class=\"token punctuation\">&#125;</span>\n\t\t<span class=\"token keyword\">return</span> true<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span>\n<span class=\"token comment\">// 在位序i的位置删除结点操作</span>\nbool <span class=\"token function\">ListDelete</span><span class=\"token punctuation\">(</span>LinkList<span class=\"token operator\">&amp;</span> L<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> i<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span><span class=\"token operator\">&amp;</span> e<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n\t<span class=\"token keyword\">int</span> length<span class=\"token operator\">=</span><span class=\"token function\">Length</span><span class=\"token punctuation\">(</span>L<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>i<span class=\"token operator\">&lt;</span><span class=\"token number\">1</span><span class=\"token operator\">||</span>i<span class=\"token operator\">></span>length<span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span> false<span class=\"token punctuation\">;</span>\n\tLNode<span class=\"token operator\">*</span> temp<span class=\"token operator\">=</span><span class=\"token function\">GetElem</span><span class=\"token punctuation\">(</span>L<span class=\"token punctuation\">,</span>i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\tLNode<span class=\"token operator\">*</span> pre<span class=\"token operator\">=</span>temp<span class=\"token operator\">-></span>prior<span class=\"token punctuation\">;</span>\n\tLNode<span class=\"token operator\">*</span> next<span class=\"token operator\">=</span>temp<span class=\"token operator\">-></span>next<span class=\"token punctuation\">;</span>\n\te<span class=\"token operator\">=</span>temp<span class=\"token operator\">-></span>data<span class=\"token punctuation\">;</span>\n\tpre<span class=\"token operator\">-></span>next<span class=\"token operator\">=</span>next<span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>next<span class=\"token operator\">!=</span><span class=\"token constant\">NULL</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n\t\tnext<span class=\"token operator\">-></span>prior<span class=\"token operator\">=</span>pre<span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">&#125;</span>\n\t<span class=\"token keyword\">return</span> true<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span>\n<span class=\"token comment\">// 链表输出</span>\n<span class=\"token keyword\">void</span> <span class=\"token function\">PrintLinkList</span><span class=\"token punctuation\">(</span>LinkList<span class=\"token operator\">&amp;</span> L<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n\tLNode<span class=\"token operator\">*</span> p <span class=\"token operator\">=</span> L<span class=\"token operator\">-></span>next<span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>p <span class=\"token operator\">!=</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n\n\t\t<span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%d\\t\"</span><span class=\"token punctuation\">,</span> p<span class=\"token operator\">-></span>data<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\tp <span class=\"token operator\">=</span> p<span class=\"token operator\">-></span>next<span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">&#125;</span>\n\t<span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h4 id=\"循环单链表（带头结点）\"><a href=\"#循环单链表（带头结点）\" class=\"headerlink\" title=\"循环单链表（带头结点）\"></a>循环单链表（带头结点）</h4><pre class=\"line-numbers language-c\" data-language=\"c\"><code class=\"language-c\"><span class=\"token comment\">//循环单链表-带头结点</span>\n <span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;stdio.h></span></span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;stdlib.h></span></span>\n<span class=\"token keyword\">typedef</span> <span class=\"token keyword\">struct</span> <span class=\"token class-name\">LNode</span> <span class=\"token punctuation\">&#123;</span>\n\t<span class=\"token keyword\">int</span> data<span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">struct</span> <span class=\"token class-name\">LNode</span><span class=\"token operator\">*</span> next<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span>LNode<span class=\"token punctuation\">,</span> <span class=\"token operator\">*</span> LinkList<span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// 单链表的建立</span>\nLinkList <span class=\"token function\">List_TailInsert</span><span class=\"token punctuation\">(</span>LinkList<span class=\"token operator\">&amp;</span> L<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span><span class=\"token comment\">// 尾插法</span>\n\tL<span class=\"token operator\">=</span><span class=\"token punctuation\">(</span>LNode<span class=\"token operator\">*</span><span class=\"token punctuation\">)</span><span class=\"token function\">malloc</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">sizeof</span><span class=\"token punctuation\">(</span>LNode<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\tL<span class=\"token operator\">-></span>data<span class=\"token operator\">=</span><span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n\tLNode<span class=\"token operator\">*</span> temp<span class=\"token operator\">=</span>L<span class=\"token punctuation\">;</span>\n\n\t<span class=\"token keyword\">int</span> x<span class=\"token punctuation\">;</span>\n\t<span class=\"token function\">scanf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%d\"</span><span class=\"token punctuation\">,</span><span class=\"token operator\">&amp;</span>x<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span>x<span class=\"token operator\">!=</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n\t\tLNode<span class=\"token operator\">*</span> s<span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>LNode<span class=\"token operator\">*</span><span class=\"token punctuation\">)</span><span class=\"token function\">malloc</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">sizeof</span><span class=\"token punctuation\">(</span>LNode<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\ts<span class=\"token operator\">-></span>data<span class=\"token operator\">=</span>x<span class=\"token punctuation\">;</span>\n\t\ttemp<span class=\"token operator\">-></span>next<span class=\"token operator\">=</span>s<span class=\"token punctuation\">;</span>\n\t\ttemp<span class=\"token operator\">=</span>s<span class=\"token punctuation\">;</span>\n\t\t<span class=\"token function\">scanf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%d\"</span><span class=\"token punctuation\">,</span><span class=\"token operator\">&amp;</span>x<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">&#125;</span>\n\ttemp<span class=\"token operator\">-></span>next<span class=\"token operator\">=</span>L<span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">return</span> L<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token keyword\">int</span> <span class=\"token function\">Length</span><span class=\"token punctuation\">(</span>LinkList<span class=\"token operator\">&amp;</span> l<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n\tLNode<span class=\"token operator\">*</span> s<span class=\"token operator\">=</span>l<span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">int</span> res<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span>s<span class=\"token operator\">-></span>next<span class=\"token operator\">!=</span>l<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n\t\tres<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span>\n\t\ts<span class=\"token operator\">=</span>s<span class=\"token operator\">-></span>next<span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">&#125;</span>\n\t<span class=\"token keyword\">return</span> res<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span>\n<span class=\"token comment\">// 按位序i查找结点，头结点的位序是0，1是第一个节点</span>\nLNode<span class=\"token operator\">*</span> <span class=\"token function\">GetElem</span><span class=\"token punctuation\">(</span>LinkList<span class=\"token operator\">&amp;</span> L<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> i<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n\t<span class=\"token keyword\">int</span> length<span class=\"token operator\">=</span><span class=\"token function\">Length</span><span class=\"token punctuation\">(</span>L<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>i<span class=\"token operator\">&lt;</span><span class=\"token number\">0</span><span class=\"token operator\">||</span>L<span class=\"token operator\">==</span><span class=\"token constant\">NULL</span><span class=\"token operator\">||</span>i<span class=\"token operator\">></span>length<span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">;</span>\n\tLNode<span class=\"token operator\">*</span> s<span class=\"token operator\">=</span>L<span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">int</span> j<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span>j<span class=\"token operator\">&lt;</span>i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n\t\ts<span class=\"token operator\">=</span>s<span class=\"token operator\">-></span>next<span class=\"token punctuation\">;</span>\n\t\tj<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">&#125;</span>\n\t<span class=\"token keyword\">return</span> s<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span>\n<span class=\"token comment\">// 按值e查找结点</span>\nLNode<span class=\"token operator\">*</span> <span class=\"token function\">LocateElem</span><span class=\"token punctuation\">(</span>LinkList<span class=\"token operator\">&amp;</span> L<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> e<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n\tLNode<span class=\"token operator\">*</span> s<span class=\"token operator\">=</span>L<span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span>s<span class=\"token operator\">-></span>next<span class=\"token operator\">!=</span><span class=\"token constant\">NULL</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n\t\t<span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>s<span class=\"token operator\">-></span>data<span class=\"token operator\">==</span>e<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n\t\t\t<span class=\"token keyword\">return</span> s<span class=\"token punctuation\">;</span>\n\t\t<span class=\"token punctuation\">&#125;</span>\n\t\ts<span class=\"token operator\">=</span>s<span class=\"token operator\">-></span>next<span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">&#125;</span>\n\t<span class=\"token keyword\">return</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span>\n<span class=\"token comment\">// 在位序i的位置插入结点操作</span>\nbool <span class=\"token function\">ListInsert</span><span class=\"token punctuation\">(</span>LinkList<span class=\"token operator\">&amp;</span> L<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> i<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> e<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n\t<span class=\"token keyword\">int</span> length<span class=\"token operator\">=</span><span class=\"token function\">Length</span><span class=\"token punctuation\">(</span>L<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>i<span class=\"token operator\">&lt;=</span><span class=\"token number\">0</span><span class=\"token operator\">||</span>i<span class=\"token operator\">></span>length<span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span> false<span class=\"token punctuation\">;</span>\n\tLNode<span class=\"token operator\">*</span> pre<span class=\"token operator\">=</span><span class=\"token function\">GetElem</span><span class=\"token punctuation\">(</span>L<span class=\"token punctuation\">,</span>i<span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\tLNode<span class=\"token operator\">*</span> s<span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>LNode<span class=\"token operator\">*</span><span class=\"token punctuation\">)</span><span class=\"token function\">malloc</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">sizeof</span><span class=\"token punctuation\">(</span>LNode<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\ts<span class=\"token operator\">-></span>data<span class=\"token operator\">=</span>e<span class=\"token punctuation\">;</span>\n\ts<span class=\"token operator\">-></span>next<span class=\"token operator\">=</span>pre<span class=\"token operator\">-></span>next<span class=\"token punctuation\">;</span>\n\tpre<span class=\"token operator\">-></span>next<span class=\"token operator\">=</span>s<span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">return</span> true<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span>\n<span class=\"token comment\">// 在位序i的位置删除结点操作</span>\nbool <span class=\"token function\">ListDelete</span><span class=\"token punctuation\">(</span>LinkList<span class=\"token operator\">&amp;</span> L<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> i<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span><span class=\"token operator\">&amp;</span> e<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n\t<span class=\"token keyword\">int</span> length<span class=\"token operator\">=</span><span class=\"token function\">Length</span><span class=\"token punctuation\">(</span>L<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>i<span class=\"token operator\">&lt;=</span><span class=\"token number\">0</span><span class=\"token operator\">||</span>i<span class=\"token operator\">></span>length<span class=\"token operator\">||</span>L<span class=\"token operator\">==</span><span class=\"token constant\">NULL</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span> false<span class=\"token punctuation\">;</span>\n\tLNode<span class=\"token operator\">*</span> pre<span class=\"token operator\">=</span><span class=\"token function\">GetElem</span><span class=\"token punctuation\">(</span>L<span class=\"token punctuation\">,</span>i<span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\tLNode<span class=\"token operator\">*</span>temp<span class=\"token operator\">=</span>pre<span class=\"token operator\">-></span>next<span class=\"token punctuation\">;</span>\n\te<span class=\"token operator\">=</span>temp<span class=\"token operator\">-></span>data<span class=\"token punctuation\">;</span>\n\tpre<span class=\"token operator\">-></span>next<span class=\"token operator\">=</span>temp<span class=\"token operator\">-></span>next<span class=\"token punctuation\">;</span>\n\t<span class=\"token function\">free</span><span class=\"token punctuation\">(</span>temp<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span>\n<span class=\"token comment\">// 链表输出-任意一个结点都可以循环遍历整个链表</span>\n<span class=\"token keyword\">void</span> <span class=\"token function\">PrintLinkList</span><span class=\"token punctuation\">(</span>LinkList<span class=\"token operator\">&amp;</span> startNode<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span><span class=\"token comment\">//</span>\n\tLNode<span class=\"token operator\">*</span> s<span class=\"token operator\">=</span>startNode<span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">do</span><span class=\"token punctuation\">&#123;</span>\n\n\t\t<span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%d\\t\"</span><span class=\"token punctuation\">,</span>s<span class=\"token operator\">-></span>data<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\ts<span class=\"token operator\">=</span>s<span class=\"token operator\">-></span>next<span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">&#125;</span><span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span>s<span class=\"token operator\">!=</span>startNode<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h4 id=\"带头结点的循环双链表\"><a href=\"#带头结点的循环双链表\" class=\"headerlink\" title=\"带头结点的循环双链表\"></a>带头结点的循环双链表</h4><pre class=\"line-numbers language-c\" data-language=\"c\"><code class=\"language-c\"><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;stdio.h></span></span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;stdlib.h></span></span>\n<span class=\"token keyword\">typedef</span> <span class=\"token keyword\">struct</span> <span class=\"token class-name\">LNode</span> <span class=\"token punctuation\">&#123;</span>\n\t<span class=\"token keyword\">int</span> data<span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">struct</span> <span class=\"token class-name\">LNode</span><span class=\"token operator\">*</span> next<span class=\"token punctuation\">;</span><span class=\"token comment\">// 下一个</span>\n\t<span class=\"token keyword\">struct</span> <span class=\"token class-name\">LNode</span><span class=\"token operator\">*</span> prior<span class=\"token punctuation\">;</span><span class=\"token comment\">// 上一个</span>\n<span class=\"token punctuation\">&#125;</span>LNode<span class=\"token punctuation\">,</span> <span class=\"token operator\">*</span> LinkList<span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// 循环双链表的建立</span>\nLinkList <span class=\"token function\">List_TailInsert</span><span class=\"token punctuation\">(</span>LinkList<span class=\"token operator\">&amp;</span> L<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span><span class=\"token comment\">// 尾插法</span>\n\tL<span class=\"token operator\">=</span><span class=\"token punctuation\">(</span>LNode<span class=\"token operator\">*</span><span class=\"token punctuation\">)</span><span class=\"token function\">malloc</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">sizeof</span><span class=\"token punctuation\">(</span>LNode<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\tL<span class=\"token operator\">-></span>data<span class=\"token operator\">=</span><span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n\tLNode<span class=\"token operator\">*</span> temp<span class=\"token operator\">=</span>L<span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">int</span> x<span class=\"token punctuation\">;</span>\n\t<span class=\"token function\">scanf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%d\"</span><span class=\"token punctuation\">,</span><span class=\"token operator\">&amp;</span>x<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span>x<span class=\"token operator\">!=</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n\t\tLNode<span class=\"token operator\">*</span> s<span class=\"token operator\">=</span><span class=\"token punctuation\">(</span>LNode<span class=\"token operator\">*</span><span class=\"token punctuation\">)</span><span class=\"token function\">malloc</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">sizeof</span><span class=\"token punctuation\">(</span>LNode<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\ts<span class=\"token operator\">-></span>data<span class=\"token operator\">=</span>x<span class=\"token punctuation\">;</span>\n\t\ttemp<span class=\"token operator\">-></span>next<span class=\"token operator\">=</span>s<span class=\"token punctuation\">;</span>\n\t\ts<span class=\"token operator\">-></span>prior<span class=\"token operator\">=</span>temp<span class=\"token punctuation\">;</span>\n\t\ttemp<span class=\"token operator\">=</span>s<span class=\"token punctuation\">;</span>\n\t\t<span class=\"token function\">scanf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%d\"</span><span class=\"token punctuation\">,</span><span class=\"token operator\">&amp;</span>x<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">&#125;</span>\n\ttemp<span class=\"token operator\">-></span>next<span class=\"token operator\">=</span>L<span class=\"token punctuation\">;</span>\n\tL<span class=\"token operator\">-></span>prior<span class=\"token operator\">=</span>temp<span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">return</span> L<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span>\n<span class=\"token comment\">//长度</span>\n<span class=\"token keyword\">int</span> <span class=\"token function\">Length</span><span class=\"token punctuation\">(</span>LinkList<span class=\"token operator\">&amp;</span> l<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n\tLNode<span class=\"token operator\">*</span> s<span class=\"token operator\">=</span>l<span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">int</span> res<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span>s<span class=\"token operator\">-></span>next<span class=\"token operator\">!=</span>l<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n\t\tres<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span>\n\t\ts<span class=\"token operator\">=</span>s<span class=\"token operator\">-></span>next<span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">&#125;</span>\n\n\t<span class=\"token keyword\">return</span> res<span class=\"token punctuation\">;</span>\n\n<span class=\"token punctuation\">&#125;</span>\n<span class=\"token comment\">// 按位序i查找结点，头结点的位序是0，1是第一个节点</span>\nLNode<span class=\"token operator\">*</span> <span class=\"token function\">GetElem</span><span class=\"token punctuation\">(</span>LinkList<span class=\"token operator\">&amp;</span> L<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> i<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n\t<span class=\"token keyword\">int</span> length<span class=\"token operator\">=</span><span class=\"token function\">Length</span><span class=\"token punctuation\">(</span>L<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>i<span class=\"token operator\">&lt;=</span><span class=\"token number\">0</span><span class=\"token operator\">||</span>i<span class=\"token operator\">></span>length<span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">int</span> j<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n\tLNode<span class=\"token operator\">*</span> s<span class=\"token operator\">=</span>L<span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span>j<span class=\"token operator\">&lt;</span>i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n\t\ts<span class=\"token operator\">=</span>s<span class=\"token operator\">-></span>next<span class=\"token punctuation\">;</span>\n\t\tj<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">&#125;</span>\n\t<span class=\"token keyword\">return</span> s<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span>\n<span class=\"token comment\">// 按值e查找结点</span>\nLNode<span class=\"token operator\">*</span> <span class=\"token function\">LocateElem</span><span class=\"token punctuation\">(</span>LinkList<span class=\"token operator\">&amp;</span> L<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> e<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n\tLNode<span class=\"token operator\">*</span> s<span class=\"token operator\">=</span>L<span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span>s<span class=\"token operator\">!=</span>L<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n\t\t<span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>s<span class=\"token operator\">-></span>data<span class=\"token operator\">==</span>e<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n\t\t\t<span class=\"token keyword\">return</span> s<span class=\"token punctuation\">;</span>\n\t\t<span class=\"token punctuation\">&#125;</span>\n\t\ts<span class=\"token operator\">=</span>s<span class=\"token operator\">-></span>next<span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">&#125;</span>\n\t<span class=\"token keyword\">return</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span>\n<span class=\"token comment\">// 在位序i的位置插入结点操作</span>\nbool <span class=\"token function\">ListInsert</span><span class=\"token punctuation\">(</span>LinkList<span class=\"token operator\">&amp;</span> L<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> i<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> e<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n\t<span class=\"token keyword\">int</span> length<span class=\"token operator\">=</span><span class=\"token function\">Length</span><span class=\"token punctuation\">(</span>L<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>i<span class=\"token operator\">&lt;=</span><span class=\"token number\">0</span><span class=\"token operator\">||</span>i<span class=\"token operator\">></span>length<span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n\t\t<span class=\"token keyword\">return</span> false<span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">&#125;</span>\n\tLNode<span class=\"token operator\">*</span> pre<span class=\"token operator\">=</span><span class=\"token function\">GetElem</span><span class=\"token punctuation\">(</span>L<span class=\"token punctuation\">,</span>i<span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\tLNode<span class=\"token operator\">*</span> nxt<span class=\"token operator\">=</span>pre<span class=\"token operator\">-></span>next<span class=\"token punctuation\">;</span>\n\tLNode<span class=\"token operator\">*</span> s<span class=\"token operator\">=</span><span class=\"token punctuation\">(</span>LNode<span class=\"token operator\">*</span><span class=\"token punctuation\">)</span><span class=\"token function\">malloc</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">sizeof</span><span class=\"token punctuation\">(</span>LNode<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\ts<span class=\"token operator\">-></span>data<span class=\"token operator\">=</span>e<span class=\"token punctuation\">;</span>\n\ts<span class=\"token operator\">-></span>next<span class=\"token operator\">=</span>nxt<span class=\"token punctuation\">;</span>\n\tpre<span class=\"token operator\">-></span>next<span class=\"token operator\">=</span>s<span class=\"token punctuation\">;</span>\n\tnxt<span class=\"token operator\">-></span>prior<span class=\"token operator\">=</span>s<span class=\"token punctuation\">;</span>\n\ts<span class=\"token operator\">-></span>prior<span class=\"token operator\">=</span>pre<span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">return</span> true<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span>\n<span class=\"token comment\">// 在位序i的位置删除结点操作</span>\nbool <span class=\"token function\">ListDelete</span><span class=\"token punctuation\">(</span>LinkList<span class=\"token operator\">&amp;</span> L<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> i<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span><span class=\"token operator\">&amp;</span> e<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n\t<span class=\"token keyword\">int</span> length<span class=\"token operator\">=</span><span class=\"token function\">Length</span><span class=\"token punctuation\">(</span>L<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>i<span class=\"token operator\">&lt;=</span><span class=\"token number\">0</span><span class=\"token operator\">||</span>i<span class=\"token operator\">></span>length<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n\t\t<span class=\"token keyword\">return</span> false<span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">&#125;</span>\n\tLNode<span class=\"token operator\">*</span> pre<span class=\"token operator\">=</span><span class=\"token function\">GetElem</span><span class=\"token punctuation\">(</span>L<span class=\"token punctuation\">,</span>i<span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\tLNode<span class=\"token operator\">*</span> temp<span class=\"token operator\">=</span>pre<span class=\"token operator\">-></span>next<span class=\"token punctuation\">;</span>\n\tLNode<span class=\"token operator\">*</span> nxt<span class=\"token operator\">=</span>temp<span class=\"token operator\">-></span>next<span class=\"token punctuation\">;</span>\n\tpre<span class=\"token operator\">-></span>next<span class=\"token operator\">=</span>nxt<span class=\"token punctuation\">;</span>\n\tnxt<span class=\"token operator\">-></span>prior<span class=\"token operator\">=</span>pre<span class=\"token punctuation\">;</span>\n\t<span class=\"token function\">free</span><span class=\"token punctuation\">(</span>temp<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">return</span> true<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span>\n<span class=\"token comment\">// 链表输出-任意一个结点都可以循环遍历整个链表</span>\n<span class=\"token keyword\">void</span> <span class=\"token function\">PrintLinkList</span><span class=\"token punctuation\">(</span>LinkList<span class=\"token operator\">&amp;</span> startNode<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n\tLNode<span class=\"token operator\">*</span> s<span class=\"token operator\">=</span>startNode<span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">do</span><span class=\"token punctuation\">&#123;</span>\n\t\t<span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>s<span class=\"token operator\">-></span>data<span class=\"token operator\">!=</span><span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n\t\t\t<span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%d\\t\"</span><span class=\"token punctuation\">,</span>s<span class=\"token operator\">-></span>data<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token punctuation\">&#125;</span>\n\t\ts<span class=\"token operator\">=</span>s<span class=\"token operator\">-></span>next<span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">&#125;</span><span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span>s<span class=\"token operator\">!=</span>startNode<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h2 id=\"栈\"><a href=\"#栈\" class=\"headerlink\" title=\"栈\"></a>栈</h2><h3 id=\"实现\"><a href=\"#实现\" class=\"headerlink\" title=\"实现\"></a>实现</h3><h4 id=\"链式实现\"><a href=\"#链式实现\" class=\"headerlink\" title=\"链式实现\"></a>链式实现</h4><p>链表头部插入删除</p>\n<pre class=\"line-numbers language-c\" data-language=\"c\"><code class=\"language-c\"><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;stdio.h></span></span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;stdlib.h></span></span>\n<span class=\"token comment\">// 不带头结点</span>\n<span class=\"token keyword\">typedef</span> <span class=\"token keyword\">struct</span> <span class=\"token class-name\">Linknode</span> <span class=\"token punctuation\">&#123;</span>\n\t<span class=\"token keyword\">int</span> data<span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">struct</span> <span class=\"token class-name\">Linknode</span><span class=\"token operator\">*</span> next<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span>Linknode<span class=\"token punctuation\">,</span> <span class=\"token operator\">*</span> LiStack<span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// 在链栈首处插入一个节点</span>\nbool <span class=\"token function\">InsertNextNode</span><span class=\"token punctuation\">(</span>LiStack<span class=\"token operator\">&amp;</span> L<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> e<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n\tLinknode<span class=\"token operator\">*</span> s <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>Linknode<span class=\"token operator\">*</span><span class=\"token punctuation\">)</span><span class=\"token function\">malloc</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">sizeof</span><span class=\"token punctuation\">(</span>Linknode<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\ts<span class=\"token operator\">-></span>data <span class=\"token operator\">=</span> e<span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>L <span class=\"token operator\">==</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n\t\tL <span class=\"token operator\">=</span> s<span class=\"token punctuation\">;</span>\t<span class=\"token comment\">// 第一个节点</span>\n\t\ts<span class=\"token operator\">-></span>next <span class=\"token operator\">=</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">;</span><span class=\"token comment\">// 下一个初始化为空 ！！！</span>\n\t<span class=\"token punctuation\">&#125;</span>\n\t<span class=\"token keyword\">else</span> <span class=\"token punctuation\">&#123;</span>\n\t\ts<span class=\"token operator\">-></span>next <span class=\"token operator\">=</span> L<span class=\"token punctuation\">;</span>\n\t\tL <span class=\"token operator\">=</span> s<span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">&#125;</span>\n\t<span class=\"token keyword\">return</span> true<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span>\n<span class=\"token comment\">// 头插法建立链表</span>\nLiStack <span class=\"token function\">LiStack_HeadInsert</span><span class=\"token punctuation\">(</span>LiStack<span class=\"token operator\">&amp;</span> L<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n\t<span class=\"token keyword\">int</span> x <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token function\">scanf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%d\"</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>x<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>x <span class=\"token operator\">!=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n\t\t<span class=\"token function\">InsertNextNode</span><span class=\"token punctuation\">(</span>L<span class=\"token punctuation\">,</span> x<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token function\">scanf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%d\"</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>x<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">&#125;</span>\n\t<span class=\"token keyword\">return</span> L<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span>\n<span class=\"token comment\">// 入栈</span>\nbool <span class=\"token function\">Push</span><span class=\"token punctuation\">(</span>LiStack<span class=\"token operator\">&amp;</span> L<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> e<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n\t<span class=\"token keyword\">return</span> <span class=\"token function\">InsertNextNode</span><span class=\"token punctuation\">(</span>L<span class=\"token punctuation\">,</span> e<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span>\n<span class=\"token comment\">// 出栈</span>\nbool <span class=\"token function\">Pop</span><span class=\"token punctuation\">(</span>LiStack<span class=\"token operator\">&amp;</span> L<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span><span class=\"token operator\">&amp;</span> e<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>L <span class=\"token operator\">==</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n\t\t<span class=\"token keyword\">return</span> false<span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">&#125;</span>\n\tLinknode<span class=\"token operator\">*</span> s <span class=\"token operator\">=</span> L<span class=\"token punctuation\">;</span>\n\te <span class=\"token operator\">=</span> s<span class=\"token operator\">-></span>data<span class=\"token punctuation\">;</span>\n\tL <span class=\"token operator\">=</span> s<span class=\"token operator\">-></span>next<span class=\"token punctuation\">;</span>\n\t<span class=\"token function\">free</span><span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">return</span> true<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span>\n<span class=\"token comment\">// 是否为空</span>\nbool <span class=\"token function\">LiStackEmpty</span><span class=\"token punctuation\">(</span>LiStack<span class=\"token operator\">&amp;</span> L<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>L <span class=\"token operator\">==</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n\t\t<span class=\"token keyword\">return</span> true<span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">&#125;</span>\n\t<span class=\"token keyword\">return</span> false<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span>\n<span class=\"token comment\">// 打印</span>\n<span class=\"token keyword\">void</span> <span class=\"token function\">PrintLiStack</span><span class=\"token punctuation\">(</span>LiStack<span class=\"token operator\">&amp;</span> L<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>L <span class=\"token operator\">==</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n\t\t<span class=\"token keyword\">return</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">&#125;</span>\n\tLinknode<span class=\"token operator\">*</span> p <span class=\"token operator\">=</span> L<span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>p <span class=\"token operator\">!=</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n\t\t<span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%d\\t\"</span><span class=\"token punctuation\">,</span> p<span class=\"token operator\">-></span>data<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\tp <span class=\"token operator\">=</span> p<span class=\"token operator\">-></span>next<span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">&#125;</span>\n\t<span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h4 id=\"数组实现\"><a href=\"#数组实现\" class=\"headerlink\" title=\"数组实现\"></a>数组实现</h4><pre class=\"line-numbers language-c\" data-language=\"c\"><code class=\"language-c\"><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;stdio.h></span></span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">define</span> <span class=\"token macro-name\">MaxSize</span> <span class=\"token expression\"><span class=\"token number\">50</span></span></span>\n\n<span class=\"token keyword\">typedef</span> <span class=\"token keyword\">struct</span> <span class=\"token punctuation\">&#123;</span>\n\t<span class=\"token keyword\">int</span> data<span class=\"token punctuation\">[</span>MaxSize<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">int</span> top<span class=\"token punctuation\">;</span> <span class=\"token comment\">//指向下一个要填入数据的位置</span>\n<span class=\"token punctuation\">&#125;</span> SqStack<span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// 初始化</span>\n<span class=\"token keyword\">void</span> <span class=\"token function\">InitStack</span><span class=\"token punctuation\">(</span>SqStack<span class=\"token operator\">&amp;</span> stack<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n\tstack<span class=\"token punctuation\">.</span>top <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span>\n<span class=\"token comment\">// 是否为空</span>\nbool <span class=\"token function\">StackEmpty</span><span class=\"token punctuation\">(</span>SqStack<span class=\"token operator\">&amp;</span> stack<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>stack<span class=\"token punctuation\">.</span>top <span class=\"token operator\">==</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n\t\t<span class=\"token keyword\">return</span> true<span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">&#125;</span>\n\t<span class=\"token keyword\">return</span> false<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span>\n<span class=\"token comment\">// 入栈</span>\nbool <span class=\"token function\">Push</span><span class=\"token punctuation\">(</span>SqStack<span class=\"token operator\">&amp;</span> stack<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> e<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>stack<span class=\"token punctuation\">.</span>top <span class=\"token operator\">==</span> MaxSize<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span><span class=\"token comment\">// 是否满了</span>\n\t\t<span class=\"token keyword\">return</span> false<span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">&#125;</span>\n\tstack<span class=\"token punctuation\">.</span>data<span class=\"token punctuation\">[</span>stack<span class=\"token punctuation\">.</span>top<span class=\"token operator\">++</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> e<span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">return</span> true<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span>\n<span class=\"token comment\">// 出栈</span>\nbool <span class=\"token function\">Pop</span><span class=\"token punctuation\">(</span>SqStack<span class=\"token operator\">&amp;</span> stack<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span><span class=\"token operator\">&amp;</span> e<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>stack<span class=\"token punctuation\">.</span>top <span class=\"token operator\">==</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n\t\t<span class=\"token keyword\">return</span> false<span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">&#125;</span>\n\te <span class=\"token operator\">=</span> stack<span class=\"token punctuation\">.</span>data<span class=\"token punctuation\">[</span>stack<span class=\"token punctuation\">.</span>top<span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\tstack<span class=\"token punctuation\">.</span>top<span class=\"token operator\">--</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">return</span> true<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span>\n<span class=\"token comment\">// 获取栈顶</span>\nbool <span class=\"token function\">GetTop</span><span class=\"token punctuation\">(</span>SqStack<span class=\"token operator\">&amp;</span> stack<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span><span class=\"token operator\">&amp;</span> e<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>stack<span class=\"token punctuation\">.</span>top <span class=\"token operator\">==</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n\t\t<span class=\"token keyword\">return</span> false<span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">&#125;</span>\n\te <span class=\"token operator\">=</span> stack<span class=\"token punctuation\">.</span>data<span class=\"token punctuation\">[</span>stack<span class=\"token punctuation\">.</span>top <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">return</span> true<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span>\n<span class=\"token comment\">// 遍历</span>\n<span class=\"token keyword\">void</span> <span class=\"token function\">PrintStack</span><span class=\"token punctuation\">(</span>SqStack<span class=\"token operator\">&amp;</span> stack<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n\t<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> stack<span class=\"token punctuation\">.</span>top<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n\t\t<span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%d\\t\"</span><span class=\"token punctuation\">,</span> stack<span class=\"token punctuation\">.</span>data<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">&#125;</span>\n\t<span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h3 id=\"栈的应用\"><a href=\"#栈的应用\" class=\"headerlink\" title=\"栈的应用\"></a>栈的应用</h3><h4 id=\"括号匹配\"><a href=\"#括号匹配\" class=\"headerlink\" title=\"括号匹配\"></a>括号匹配</h4><pre class=\"line-numbers language-c\" data-language=\"c\"><code class=\"language-c\"><span class=\"token comment\">// 括号匹配</span>\n<span class=\"token keyword\">int</span> <span class=\"token function\">MatchKuohao</span><span class=\"token punctuation\">(</span>SqStack<span class=\"token operator\">&amp;</span> L<span class=\"token punctuation\">,</span> <span class=\"token keyword\">const</span> <span class=\"token keyword\">char</span><span class=\"token operator\">*</span> s<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> len<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n\t<span class=\"token keyword\">char</span> c <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">//\tprintf(\"%d\\n\",len);</span>\n\t<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> len<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n\t\tc <span class=\"token operator\">=</span> s<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token comment\">// 1.判断是否为左括号 是就入栈</span>\n\t\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>c <span class=\"token operator\">==</span> <span class=\"token char\">'('</span> <span class=\"token operator\">||</span> c <span class=\"token operator\">==</span> <span class=\"token char\">'&#123;'</span> <span class=\"token operator\">||</span> c <span class=\"token operator\">==</span> <span class=\"token char\">'['</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n\t\t\t<span class=\"token function\">Push</span><span class=\"token punctuation\">(</span>L<span class=\"token punctuation\">,</span> c<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token punctuation\">&#125;</span>\n\t\t<span class=\"token keyword\">else</span> <span class=\"token punctuation\">&#123;</span>\n\t\t\t<span class=\"token comment\">// 2.是右括号，取出栈顶括号与之匹配</span>\n\t\t\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token function\">StackEmpty</span><span class=\"token punctuation\">(</span>L<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span> <span class=\"token comment\">// 不存在左括号与之匹配，代表失败</span>\n\t\t\t\t<span class=\"token keyword\">return</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n\t\t\t<span class=\"token punctuation\">&#125;</span>\n\t\t\t<span class=\"token function\">Pop</span><span class=\"token punctuation\">(</span>L<span class=\"token punctuation\">,</span> c<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\t<span class=\"token comment\">// 判断是否匹配</span>\n\t\t\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">==</span> <span class=\"token char\">')'</span> <span class=\"token operator\">&amp;&amp;</span> c <span class=\"token operator\">!=</span> <span class=\"token char\">'('</span><span class=\"token operator\">||</span>s<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">==</span> <span class=\"token char\">'&#125;'</span> <span class=\"token operator\">&amp;&amp;</span> c <span class=\"token operator\">!=</span> <span class=\"token char\">'&#123;'</span><span class=\"token operator\">||</span>s<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">==</span> <span class=\"token char\">']'</span> <span class=\"token operator\">&amp;&amp;</span> c <span class=\"token operator\">!=</span> <span class=\"token char\">'['</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n\t\t\t\t<span class=\"token keyword\">return</span> <span class=\"token number\">2</span><span class=\"token punctuation\">;</span>\n\n\t\t\t<span class=\"token punctuation\">&#125;</span>\n\t\t<span class=\"token punctuation\">&#125;</span>\n\t<span class=\"token punctuation\">&#125;</span>\n\t<span class=\"token comment\">// 3.在判断栈是否有左括号未匹配的</span>\n\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span><span class=\"token function\">StackEmpty</span><span class=\"token punctuation\">(</span>L<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n\t\t<span class=\"token keyword\">return</span> <span class=\"token number\">3</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">&#125;</span>\n\t<span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span>\n<span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">&#123;</span>\n\tSqStack L<span class=\"token punctuation\">;</span>\n\t<span class=\"token comment\">// 括号匹配开始</span>\n\t<span class=\"token keyword\">const</span> <span class=\"token keyword\">char</span><span class=\"token operator\">*</span> s <span class=\"token operator\">=</span> <span class=\"token string\">\"(&#123;()&#125;)\"</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">int</span> b <span class=\"token operator\">=</span> <span class=\"token function\">MatchKuohao</span><span class=\"token punctuation\">(</span>L<span class=\"token punctuation\">,</span> s<span class=\"token punctuation\">,</span> <span class=\"token function\">strlen</span><span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%s\"</span><span class=\"token punctuation\">,</span> s<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>b <span class=\"token operator\">==</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n\t\t<span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"括号匹配成功\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">&#125;</span>\n\t<span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>b <span class=\"token operator\">==</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n\t\t<span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"括号匹配失败, 右括号多了\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">&#125;</span>\n\t<span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>b <span class=\"token operator\">==</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n\t\t<span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"括号匹配失败，左右括号不匹配\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">&#125;</span>\n\t<span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>b <span class=\"token operator\">==</span> <span class=\"token number\">3</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n\t\t<span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"括号匹配失败， 左括号多了\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">&#125;</span>\n\t<span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h4 id=\"中缀转后缀及计算\"><a href=\"#中缀转后缀及计算\" class=\"headerlink\" title=\"中缀转后缀及计算\"></a>中缀转后缀及计算</h4><pre class=\"line-numbers language-c++\" data-language=\"c++\"><code class=\"language-c++\">#include &lt;string.h&gt;\n#include &lt;iostream&gt;\n#include &lt;stack&gt;\nusing namespace std;\n\n&#x2F;&#x2F; 对比运算符(当c1 &gt;&#x3D; c2 返回1， 当 c1 &lt; c2 返回-1 ）\nint CompareCal(char c1, char c2) &#123;&#x2F;&#x2F; c1，c2 是运算符，假定只有+-*&#x2F;\n\tswitch (c1) &#123;\n\tcase &#39;+&#39;:case &#39;-&#39;:\n\t\tif (c2 &#x3D;&#x3D; &#39;*&#39; || c2 &#x3D;&#x3D; &#39;&#x2F;&#39;)&#x2F;&#x2F; “+ -”小于“* &#x2F;”\n\t\t\treturn -1;\n\t&#125;\n\treturn 1;&#x2F;&#x2F; 默认大于\n&#125;\nint Cal(int val1, char op, int val2) &#123;\n\tswitch (op) &#123;\n\tcase &#39;+&#39;:\n\t\treturn val1 + val2;\n\tcase &#39;-&#39;:\n\t\treturn val1 - val2;\n\tcase &#39;*&#39;:\n\t\treturn val1 * val2;\n\tcase &#39;&#x2F;&#39;:\n\t\treturn val1 &#x2F; val2;\n\t&#125;\n\treturn 0;\n&#125;\n&#x2F;&#x2F; 1.中缀转后缀表达式生成算法\nstring GenerateHou(stack&lt;char&gt;&amp; opstack, string&amp; s) &#123;\n\n\t&#x2F;&#x2F;存储后缀表达式\n\tstring hous;\n\t&#x2F;&#x2F;分别储存当前字符串的字符 、 运算符栈中的字符\n\tchar curc,zhanc;\n\n\tfor(int i&#x3D;0;i&lt;s.length();i++)&#123;\n\t\tcurc&#x3D;s[i];\n\n\t\t&#x2F;&#x2F;1.遇到操作数，直接将它输出\n\t\tif(isdigit(curc))&#123;\n\t\t\thous&#x3D;hous+curc;\n\t\t&#125;\n\t\t&#x2F;&#x2F;2.遇到（，直接push\n\t\telse if(curc&#x3D;&#x3D;&#39;(&#39;)&#123;\n\t\t\topstack.push(curc);\n\t\t&#125;\n\t\t&#x2F;&#x2F;遇到），栈元素弹出并输出，知道遇到左括号（左括号只弹出，不输出）\n\t\telse if(curc&#x3D;&#x3D;&#39;)&#39;)&#123;\n\t\t\tzhanc&#x3D;opstack.top();\n\t\t\topstack.pop();\n\t\t\twhile(zhanc!&#x3D;&#39;(&#39;)&#123;\n\t\t\t\thous&#x3D;hous+zhanc;\n\t\t\t\tzhanc&#x3D;opstack.top();\n\t\t\t\topstack.pop();\n\t\t\t&#125;\n\t\t&#125;\n\t\t&#x2F;&#x2F;其他运算符的情况\n\t\t&#x2F;&#x2F;如果栈为空，直接Push\n\t\t&#x2F;&#x2F;如果栈顶是(，直接push\n\t\t&#x2F;&#x2F;如果栈顶是运算符，判断优先级，优先级高或相同的pop并输出，直到遇到优先级低的，将curc入栈\n\t\telse&#123;\n\t\t\twhile(!opstack.empty())&#123;\n\t\t\t\tzhanc&#x3D;opstack.top();\n\t\t\t\tif(zhanc&#x3D;&#x3D;&#39;(&#39;)&#123;\n\t\t\t\t\tbreak;\n\t\t\t\t&#125;\n\t\t\t\tif(CompareCal(zhanc,curc)&#x3D;&#x3D;1)&#123;\n\t\t\t\t\thous&#x3D;hous+zhanc;\n\t\t\t\t\topstack.pop();\n\t\t\t\t&#125;\n\t\t\t\telse&#123;\n\t\t\t\t\tbreak;\n\t\t\t\t&#125;\n\t\t\t&#125;\n\t\t\topstack.push(curc);\n\t\t&#125;\n\t&#125;\n\n\t&#x2F;&#x2F; 把栈中剩下的放入后缀表达式中\n\twhile (!opstack.empty()) &#123;\n\t\tzhanc &#x3D; opstack.top();\n\t\topstack.pop();\n\t\thous &#x3D; hous + zhanc;\n\t&#125;\n\treturn hous;\n\n&#125;\n&#x2F;&#x2F; 2.后缀表达式计算\nint CalHou(stack&lt;int&gt;&amp; distack, string&amp; s) &#123;\n\tint left,right;\n\tint sum;\n\tchar curc;\n\tfor(int i&#x3D;0;i&lt;s.length();i++)&#123;\n\t\tcurc&#x3D;s[i];\n\t\tif(isdigit(curc))&#123;\n\t\t\tdistack.push(curc-&#39;0&#39;);&#x2F;&#x2F;转换成数字\n\t\t&#125;else&#123;\n\t\t\tleft&#x3D;distack.top();\n\t\t\tdistack.pop();\n\t\t\tright&#x3D;distack.top();\n\t\t\tdistack.pop();\n\t\t\tsum&#x3D;Cal(left,curc,right);\n\t\t\tdistack.push(sum);\n\t\t&#125;\n\t&#125;\n\treturn sum;\n&#125;<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h2 id=\"队列\"><a href=\"#队列\" class=\"headerlink\" title=\"队列\"></a>队列</h2><h3 id=\"数组实现-1\"><a href=\"#数组实现-1\" class=\"headerlink\" title=\"数组实现\"></a>数组实现</h3><pre class=\"line-numbers language-c\" data-language=\"c\"><code class=\"language-c\"><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;stdio.h></span></span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;stdlib.h></span></span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">define</span> <span class=\"token macro-name\">MaxSize</span> <span class=\"token expression\"><span class=\"token number\">5</span></span></span>\n<span class=\"token keyword\">typedef</span> <span class=\"token keyword\">struct</span> <span class=\"token punctuation\">&#123;</span>\n\t<span class=\"token keyword\">int</span> data<span class=\"token punctuation\">[</span>MaxSize<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">int</span> front<span class=\"token punctuation\">,</span> rear<span class=\"token punctuation\">;</span>  <span class=\"token comment\">//rear指向下一个要插入数据的位置</span>\n<span class=\"token punctuation\">&#125;</span>SqQueue<span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// 初始化</span>\n<span class=\"token keyword\">void</span> <span class=\"token function\">InitQueue</span><span class=\"token punctuation\">(</span>SqQueue<span class=\"token operator\">&amp;</span> Q<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n\tQ<span class=\"token punctuation\">.</span>front<span class=\"token operator\">=</span> Q<span class=\"token punctuation\">.</span>rear<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span>\n<span class=\"token comment\">// 判断为空</span>\nbool <span class=\"token function\">QueueEmpty</span><span class=\"token punctuation\">(</span>SqQueue<span class=\"token operator\">&amp;</span> Q<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n\t<span class=\"token keyword\">return</span> Q<span class=\"token punctuation\">.</span>rear<span class=\"token operator\">=</span>Q<span class=\"token punctuation\">.</span>front<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span>\n<span class=\"token comment\">// 入队 - 只能在队尾插入</span>\nbool <span class=\"token function\">EnQueue</span><span class=\"token punctuation\">(</span>SqQueue<span class=\"token operator\">&amp;</span> Q<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> e<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n\t<span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>Q<span class=\"token punctuation\">.</span>rear<span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token operator\">%</span>MaxSize<span class=\"token operator\">==</span>Q<span class=\"token punctuation\">.</span>front<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>  <span class=\"token comment\">//判断是否为满，实际上浪费了一个存储空间</span>\n\t\t<span class=\"token keyword\">return</span> false<span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">&#125;</span>\n\tQ<span class=\"token punctuation\">.</span>data<span class=\"token punctuation\">[</span>Q<span class=\"token punctuation\">.</span>rear<span class=\"token punctuation\">]</span><span class=\"token operator\">=</span>e<span class=\"token punctuation\">;</span>\n\tQ<span class=\"token punctuation\">.</span>rear<span class=\"token operator\">=</span><span class=\"token punctuation\">(</span>Q<span class=\"token punctuation\">.</span>rear<span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token operator\">%</span>MaxSize<span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">return</span> true<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span>\n<span class=\"token comment\">// 出队 - 只能在队头出</span>\nbool <span class=\"token function\">DeQueue</span><span class=\"token punctuation\">(</span>SqQueue<span class=\"token operator\">&amp;</span> Q<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span><span class=\"token operator\">&amp;</span> e<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n\t<span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>Q<span class=\"token punctuation\">.</span>rear<span class=\"token operator\">==</span>Q<span class=\"token punctuation\">.</span>front<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n\t\t<span class=\"token keyword\">return</span> false<span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">&#125;</span>\n\te<span class=\"token operator\">=</span>Q<span class=\"token punctuation\">.</span>data<span class=\"token punctuation\">[</span>Q<span class=\"token punctuation\">.</span>front<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\tQ<span class=\"token punctuation\">.</span>front<span class=\"token operator\">=</span><span class=\"token punctuation\">(</span>Q<span class=\"token punctuation\">.</span>front<span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token operator\">%</span>MaxSize<span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">return</span> true<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span>\n<span class=\"token comment\">// 读队头元素</span>\nbool <span class=\"token function\">GetHead</span><span class=\"token punctuation\">(</span>SqQueue<span class=\"token operator\">&amp;</span> Q<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span><span class=\"token operator\">&amp;</span> e<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n\t<span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>Q<span class=\"token punctuation\">.</span>rear<span class=\"token operator\">==</span>Q<span class=\"token punctuation\">.</span>front<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n\t\t<span class=\"token keyword\">return</span> false<span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">&#125;</span>\n\te<span class=\"token operator\">=</span>Q<span class=\"token punctuation\">.</span>data<span class=\"token punctuation\">[</span>Q<span class=\"token punctuation\">.</span>front<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">return</span> true<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span>\n<span class=\"token keyword\">int</span> <span class=\"token function\">GetSize</span><span class=\"token punctuation\">(</span>SqQueue<span class=\"token operator\">&amp;</span> Q<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n\t<span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>Q<span class=\"token punctuation\">.</span>rear<span class=\"token operator\">+</span>MaxSize<span class=\"token operator\">-</span>Q<span class=\"token punctuation\">.</span>front<span class=\"token punctuation\">)</span><span class=\"token operator\">%</span>MaxSize<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span>\n<span class=\"token comment\">// 打印</span>\n<span class=\"token keyword\">void</span> <span class=\"token function\">PrintSqQueue</span><span class=\"token punctuation\">(</span>SqQueue<span class=\"token operator\">&amp;</span> Q<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n\t<span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>Q<span class=\"token punctuation\">.</span>rear<span class=\"token operator\">==</span>Q<span class=\"token punctuation\">.</span>front<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n\t\t<span class=\"token keyword\">return</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">&#125;</span>\n\t<span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i<span class=\"token operator\">=</span>Q<span class=\"token punctuation\">.</span>front<span class=\"token punctuation\">;</span>i<span class=\"token operator\">!=</span>Q<span class=\"token punctuation\">.</span>rear<span class=\"token punctuation\">;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n\t\t<span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%d\\t\"</span><span class=\"token punctuation\">,</span>Q<span class=\"token punctuation\">.</span>data<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\ti<span class=\"token operator\">=</span><span class=\"token punctuation\">(</span>i<span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token operator\">%</span>MaxSize<span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">&#125;</span>\n\t<span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h3 id=\"链表实现\"><a href=\"#链表实现\" class=\"headerlink\" title=\"链表实现\"></a>链表实现</h3><pre class=\"line-numbers language-c\" data-language=\"c\"><code class=\"language-c\"><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;stdio.h></span></span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;stdlib.h></span></span>\n<span class=\"token comment\">// 带头结点</span>\n<span class=\"token keyword\">typedef</span> <span class=\"token keyword\">struct</span> <span class=\"token class-name\">LinkNode</span> <span class=\"token punctuation\">&#123;</span>\n\t<span class=\"token keyword\">int</span> data<span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">struct</span> <span class=\"token class-name\">LinkNode</span><span class=\"token operator\">*</span> next<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span>LinkNode<span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">typedef</span> <span class=\"token keyword\">struct</span> <span class=\"token punctuation\">&#123;</span>\n\tLinkNode<span class=\"token operator\">*</span> front<span class=\"token punctuation\">,</span> <span class=\"token operator\">*</span> rear<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span>LinkQueue<span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// 初始化</span>\n<span class=\"token keyword\">void</span> <span class=\"token function\">InitQueue</span><span class=\"token punctuation\">(</span>LinkQueue<span class=\"token operator\">&amp;</span> Q<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n\tLinkNode<span class=\"token operator\">*</span> s<span class=\"token operator\">=</span><span class=\"token punctuation\">(</span>LinkNode<span class=\"token operator\">*</span><span class=\"token punctuation\">)</span><span class=\"token function\">malloc</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">sizeof</span><span class=\"token punctuation\">(</span>LinkNode<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\tQ<span class=\"token punctuation\">.</span>front<span class=\"token operator\">=</span>Q<span class=\"token punctuation\">.</span>rear<span class=\"token operator\">=</span>s<span class=\"token punctuation\">;</span>\n\tQ<span class=\"token punctuation\">.</span>front<span class=\"token operator\">-></span>next<span class=\"token operator\">=</span><span class=\"token constant\">NULL</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span>\n<span class=\"token comment\">// 判断为空</span>\nbool <span class=\"token function\">QueueEmpty</span><span class=\"token punctuation\">(</span>LinkQueue<span class=\"token operator\">&amp;</span> Q<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n\t<span class=\"token keyword\">return</span> Q<span class=\"token punctuation\">.</span>front<span class=\"token operator\">-></span>next<span class=\"token operator\">==</span><span class=\"token constant\">NULL</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span>\n<span class=\"token comment\">// 入队 - 只能在队尾插入</span>\nbool <span class=\"token function\">EnQueue</span><span class=\"token punctuation\">(</span>LinkQueue<span class=\"token operator\">&amp;</span> Q<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> e<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n\tLinkNode<span class=\"token operator\">*</span> s<span class=\"token operator\">=</span><span class=\"token punctuation\">(</span>LinkNode<span class=\"token operator\">*</span><span class=\"token punctuation\">)</span><span class=\"token function\">malloc</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">sizeof</span><span class=\"token punctuation\">(</span>LinkNode<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\ts<span class=\"token operator\">-></span>data<span class=\"token operator\">=</span>e<span class=\"token punctuation\">;</span>\n\tQ<span class=\"token punctuation\">.</span>rear<span class=\"token operator\">-></span>next<span class=\"token operator\">=</span>s<span class=\"token punctuation\">;</span>\n\ts<span class=\"token operator\">-></span>next<span class=\"token operator\">=</span><span class=\"token constant\">NULL</span><span class=\"token punctuation\">;</span>\n\tQ<span class=\"token punctuation\">.</span>rear<span class=\"token operator\">=</span>s<span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">return</span> true<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span>\n<span class=\"token comment\">// 出队 - 只能在队头出</span>\nbool <span class=\"token function\">DeQueue</span><span class=\"token punctuation\">(</span>LinkQueue<span class=\"token operator\">&amp;</span> Q<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span><span class=\"token operator\">&amp;</span> e<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n\t<span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token function\">QueueEmpty</span><span class=\"token punctuation\">(</span>Q<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span> false<span class=\"token punctuation\">;</span>\n\tLinkNode<span class=\"token operator\">*</span> s<span class=\"token operator\">=</span>Q<span class=\"token punctuation\">.</span>front<span class=\"token operator\">-></span>next<span class=\"token punctuation\">;</span>\n\te<span class=\"token operator\">=</span>s<span class=\"token operator\">-></span>data<span class=\"token punctuation\">;</span>\n\tQ<span class=\"token punctuation\">.</span>front<span class=\"token operator\">-></span>next<span class=\"token operator\">=</span>s<span class=\"token operator\">-></span>next<span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>s<span class=\"token operator\">==</span>Q<span class=\"token punctuation\">.</span>rear<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n\t\tQ<span class=\"token punctuation\">.</span>rear<span class=\"token operator\">=</span>Q<span class=\"token punctuation\">.</span>front<span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">&#125;</span>\n\t<span class=\"token function\">free</span><span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">return</span> true<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span>\n<span class=\"token comment\">// 读队头元素</span>\nbool <span class=\"token function\">GetHead</span><span class=\"token punctuation\">(</span>LinkQueue<span class=\"token operator\">&amp;</span> Q<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span><span class=\"token operator\">&amp;</span> e<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n\t<span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token function\">QueueEmpty</span><span class=\"token punctuation\">(</span>Q<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span> false<span class=\"token punctuation\">;</span>\n\tLinkNode<span class=\"token operator\">*</span> s<span class=\"token operator\">=</span>Q<span class=\"token punctuation\">.</span>front<span class=\"token operator\">-></span>next<span class=\"token punctuation\">;</span>\n\te<span class=\"token operator\">=</span>s<span class=\"token operator\">-></span>data<span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">return</span> true<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span>\n<span class=\"token keyword\">int</span> <span class=\"token function\">GetSize</span><span class=\"token punctuation\">(</span>LinkQueue<span class=\"token operator\">&amp;</span> Q<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n\t<span class=\"token keyword\">int</span> size<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n\tLinkNode<span class=\"token operator\">*</span> s<span class=\"token operator\">=</span>Q<span class=\"token punctuation\">.</span>front<span class=\"token operator\">-></span>next<span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span>s<span class=\"token operator\">!=</span><span class=\"token constant\">NULL</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n\t\tsize<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span>\n\t\ts<span class=\"token operator\">=</span>s<span class=\"token operator\">-></span>next<span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">&#125;</span>\n\t<span class=\"token keyword\">return</span> size<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span>\n<span class=\"token comment\">// 打印</span>\n<span class=\"token keyword\">void</span> <span class=\"token function\">PrintLiStack</span><span class=\"token punctuation\">(</span>LinkQueue<span class=\"token operator\">&amp;</span> Q<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n\tLinkNode<span class=\"token operator\">*</span> s<span class=\"token operator\">=</span>Q<span class=\"token punctuation\">.</span>front<span class=\"token operator\">-></span>next<span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span>s<span class=\"token operator\">!=</span><span class=\"token constant\">NULL</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n\t\t<span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%d\\t\"</span><span class=\"token punctuation\">,</span>s<span class=\"token operator\">-></span>data<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\ts<span class=\"token operator\">=</span>s<span class=\"token operator\">-></span>next<span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">&#125;</span>\n\t<span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h2 id=\"串\"><a href=\"#串\" class=\"headerlink\" title=\"串\"></a>串</h2><pre class=\"line-numbers language-c\" data-language=\"c\"><code class=\"language-c\"><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;stdio.h></span></span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;string.h></span></span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">define</span> <span class=\"token macro-name\">MAXLEN</span> <span class=\"token expression\"><span class=\"token number\">255</span></span></span>\nusing namespace std<span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">//位序从0开始</span>\n<span class=\"token keyword\">typedef</span> <span class=\"token keyword\">struct</span><span class=\"token punctuation\">&#123;</span>\n\t<span class=\"token keyword\">char</span> ch<span class=\"token punctuation\">[</span>MAXLEN<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">int</span> length<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span>SString<span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">//将chars赋值给串</span>\nbool <span class=\"token function\">StrAssign</span><span class=\"token punctuation\">(</span>SString<span class=\"token operator\">&amp;</span> T<span class=\"token punctuation\">,</span><span class=\"token keyword\">char</span> <span class=\"token operator\">*</span>chars<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">&#123;</span>\n\t<span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token function\">strlen</span><span class=\"token punctuation\">(</span>chars<span class=\"token punctuation\">)</span><span class=\"token operator\">></span>MAXLEN<span class=\"token punctuation\">)</span>\n\t\t<span class=\"token keyword\">return</span> false<span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">else</span>\n\t<span class=\"token punctuation\">&#123;</span>\n\t\tT<span class=\"token punctuation\">.</span>length<span class=\"token operator\">=</span><span class=\"token function\">strlen</span><span class=\"token punctuation\">(</span>chars<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span>i<span class=\"token operator\">&lt;</span>T<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span>i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n\t\t\tT<span class=\"token punctuation\">.</span>ch<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token operator\">=</span><span class=\"token operator\">*</span><span class=\"token punctuation\">(</span>chars<span class=\"token operator\">+</span>i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token punctuation\">&#125;</span>\n\t\t<span class=\"token keyword\">return</span> true<span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token comment\">//打印</span>\n<span class=\"token keyword\">void</span> <span class=\"token function\">print</span><span class=\"token punctuation\">(</span>SString T<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n\t<span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span>i<span class=\"token operator\">&lt;</span>T<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span>i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n\t\t<span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%c\\t\"</span><span class=\"token punctuation\">,</span>T<span class=\"token punctuation\">.</span>ch<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">&#125;</span>\n\t<span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"长度：%d\\n\"</span><span class=\"token punctuation\">,</span>T<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token comment\">//将串s复制到串t</span>\nbool <span class=\"token function\">StrCopy</span><span class=\"token punctuation\">(</span>SString<span class=\"token operator\">&amp;</span> T<span class=\"token punctuation\">,</span>SString S<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">&#123;</span>\n\t<span class=\"token keyword\">int</span> i<span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span>i<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span>i<span class=\"token operator\">&lt;</span>S<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span>i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span>\n\t\tT<span class=\"token punctuation\">.</span>ch<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token operator\">=</span>S<span class=\"token punctuation\">.</span>ch<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">return</span> true<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token comment\">//判断是否为空</span>\nbool <span class=\"token function\">StrEmpty</span><span class=\"token punctuation\">(</span>SString T<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n\t<span class=\"token keyword\">return</span> T<span class=\"token punctuation\">.</span>length<span class=\"token operator\">></span><span class=\"token number\">0</span><span class=\"token operator\">?</span><span class=\"token number\">0</span><span class=\"token operator\">:</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token comment\">//清空</span>\nbool <span class=\"token function\">ClearString</span><span class=\"token punctuation\">(</span>SString<span class=\"token operator\">&amp;</span> T<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n\tT<span class=\"token punctuation\">.</span>length<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">return</span> true<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token comment\">//串T由两个串连接起来</span>\nbool <span class=\"token function\">Concat</span><span class=\"token punctuation\">(</span>SString<span class=\"token operator\">&amp;</span> T<span class=\"token punctuation\">,</span><span class=\"token keyword\">char</span><span class=\"token operator\">*</span> s1<span class=\"token punctuation\">,</span><span class=\"token keyword\">char</span><span class=\"token operator\">*</span>s2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n\t<span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token function\">strlen</span><span class=\"token punctuation\">(</span>s1<span class=\"token punctuation\">)</span><span class=\"token operator\">+</span><span class=\"token function\">strlen</span><span class=\"token punctuation\">(</span>s2<span class=\"token punctuation\">)</span><span class=\"token operator\">></span>MAXLEN<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n\t\t<span class=\"token keyword\">return</span> false<span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">&#125;</span><span class=\"token keyword\">else</span><span class=\"token punctuation\">&#123;</span>\n\t\tT<span class=\"token punctuation\">.</span>length<span class=\"token operator\">=</span><span class=\"token function\">strlen</span><span class=\"token punctuation\">(</span>s1<span class=\"token punctuation\">)</span><span class=\"token operator\">+</span><span class=\"token function\">strlen</span><span class=\"token punctuation\">(</span>s2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token keyword\">int</span> i<span class=\"token punctuation\">;</span>\n\t\t<span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span>i<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span>i<span class=\"token operator\">&lt;</span><span class=\"token function\">strlen</span><span class=\"token punctuation\">(</span>s1<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n\t\t\tT<span class=\"token punctuation\">.</span>ch<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token operator\">=</span><span class=\"token operator\">*</span><span class=\"token punctuation\">(</span>s1<span class=\"token operator\">+</span>i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token punctuation\">&#125;</span>\n\t\t<span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> j<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span>i<span class=\"token operator\">&lt;</span>T<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span>i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n\t\t\tT<span class=\"token punctuation\">.</span>ch<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token operator\">=</span><span class=\"token operator\">*</span><span class=\"token punctuation\">(</span>s2<span class=\"token operator\">+</span>j<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\tj<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token punctuation\">&#125;</span>\n\t\t<span class=\"token keyword\">return</span> true<span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token comment\">//取子串</span>\nbool <span class=\"token function\">SubString</span><span class=\"token punctuation\">(</span>SString <span class=\"token operator\">&amp;</span>Sub<span class=\"token punctuation\">,</span>SString S<span class=\"token punctuation\">,</span><span class=\"token keyword\">int</span> pos<span class=\"token punctuation\">,</span><span class=\"token keyword\">int</span> len<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">&#123;</span>\n\t<span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>pos<span class=\"token operator\">+</span>len<span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token operator\">></span>S<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n\t\t<span class=\"token keyword\">return</span> false<span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">&#125;</span><span class=\"token keyword\">else</span><span class=\"token punctuation\">&#123;</span>\n\t\t<span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i<span class=\"token operator\">=</span>pos<span class=\"token punctuation\">;</span>i<span class=\"token operator\">&lt;</span>pos<span class=\"token operator\">+</span>len<span class=\"token punctuation\">;</span>i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n\t\t\tSub<span class=\"token punctuation\">.</span>ch<span class=\"token punctuation\">[</span>i<span class=\"token operator\">-</span>pos<span class=\"token punctuation\">]</span><span class=\"token operator\">=</span>S<span class=\"token punctuation\">.</span>ch<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token punctuation\">&#125;</span>\n\t\tSub<span class=\"token punctuation\">.</span>length<span class=\"token operator\">=</span>len<span class=\"token punctuation\">;</span>\n\t\t<span class=\"token keyword\">return</span> true<span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token comment\">//比较操作</span>\n<span class=\"token keyword\">int</span> <span class=\"token function\">StrCompare</span><span class=\"token punctuation\">(</span>SString s<span class=\"token punctuation\">,</span>SString t<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n\t<span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span>i<span class=\"token operator\">&lt;</span>s<span class=\"token punctuation\">.</span>length<span class=\"token operator\">&amp;&amp;</span>i<span class=\"token operator\">&lt;</span>t<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span>i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n\t\t<span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">.</span>ch<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token operator\">!=</span>t<span class=\"token punctuation\">.</span>ch<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n\t\t\t<span class=\"token keyword\">return</span> s<span class=\"token punctuation\">.</span>ch<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token operator\">-</span>t<span class=\"token punctuation\">.</span>ch<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token punctuation\">&#125;</span>\n\t<span class=\"token punctuation\">&#125;</span>\n\t<span class=\"token keyword\">return</span> s<span class=\"token punctuation\">.</span>length<span class=\"token operator\">-</span>t<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token comment\">//找到子串的位置</span>\n<span class=\"token keyword\">int</span> <span class=\"token function\">Index</span><span class=\"token punctuation\">(</span>SString s<span class=\"token punctuation\">,</span>SString t<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n\t<span class=\"token keyword\">int</span> i<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n\tSString sub<span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span>i<span class=\"token operator\">&lt;=</span>s<span class=\"token punctuation\">.</span>length<span class=\"token operator\">-</span>t<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n\t\t<span class=\"token function\">SubString</span><span class=\"token punctuation\">(</span>sub<span class=\"token punctuation\">,</span>s<span class=\"token punctuation\">,</span>i<span class=\"token punctuation\">,</span>t<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token function\">StrCompare</span><span class=\"token punctuation\">(</span>sub<span class=\"token punctuation\">,</span>t<span class=\"token punctuation\">)</span><span class=\"token operator\">!=</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n\t\t\ti<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token punctuation\">&#125;</span><span class=\"token keyword\">else</span><span class=\"token punctuation\">&#123;</span>\n\t\t\t<span class=\"token keyword\">return</span> i<span class=\"token punctuation\">;</span>\n\t\t<span class=\"token punctuation\">&#125;</span>\n\t<span class=\"token punctuation\">&#125;</span>\n\t<span class=\"token keyword\">return</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token comment\">//朴素匹配</span>\n<span class=\"token keyword\">int</span> <span class=\"token function\">PsIndex</span><span class=\"token punctuation\">(</span>SString t<span class=\"token punctuation\">,</span>SString s<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n\t<span class=\"token keyword\">int</span> k<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">int</span> i<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span>j<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span>i<span class=\"token operator\">&lt;</span>t<span class=\"token punctuation\">.</span>length<span class=\"token operator\">&amp;&amp;</span>j<span class=\"token operator\">&lt;</span>s<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n\t\t<span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>t<span class=\"token punctuation\">.</span>ch<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token operator\">==</span>s<span class=\"token punctuation\">.</span>ch<span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n\t\t\ti<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span>\n\t\t\tj<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token punctuation\">&#125;</span><span class=\"token keyword\">else</span><span class=\"token punctuation\">&#123;</span>\n\t\t\tk<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span>\n\t\t\ti<span class=\"token operator\">=</span>k<span class=\"token punctuation\">;</span>\n\t\t\tj<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token punctuation\">&#125;</span>\n\t<span class=\"token punctuation\">&#125;</span>\n\t<span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>j<span class=\"token operator\">=</span>s<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n\t\t<span class=\"token keyword\">return</span> k<span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">&#125;</span>\n\t<span class=\"token keyword\">else</span><span class=\"token punctuation\">&#123;</span>\n\t\t<span class=\"token keyword\">return</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>kmp 算法略。</p>\n<h2 id=\"树\"><a href=\"#树\" class=\"headerlink\" title=\"树\"></a>树</h2><h3 id=\"二叉树基本操作\"><a href=\"#二叉树基本操作\" class=\"headerlink\" title=\"二叉树基本操作\"></a>二叉树基本操作</h3><h4 id=\"数组实现-2\"><a href=\"#数组实现-2\" class=\"headerlink\" title=\"数组实现\"></a>数组实现</h4><pre class=\"line-numbers language-c\" data-language=\"c\"><code class=\"language-c\"><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;stdio.h></span></span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;cmath></span></span>\n\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">define</span> <span class=\"token macro-name\">TreeSize</span> <span class=\"token expression\"><span class=\"token number\">99</span></span></span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">define</span> <span class=\"token macro-name\">MaxSize</span> <span class=\"token expression\"><span class=\"token number\">100</span></span></span>\n<span class=\"token comment\">/*\n以完全二叉树形式存储结点\ni的左孩子：2i\ni的右孩子：2i+1\ni的父节点：i/2 向下取整\ni所在的层次（深度）：log2 (n) + 1\n*/</span>\n<span class=\"token keyword\">struct</span> <span class=\"token class-name\">TreeNode</span> <span class=\"token punctuation\">&#123;</span>\n\t<span class=\"token keyword\">int</span> value<span class=\"token punctuation\">;</span> \t\t<span class=\"token comment\">// 节点中的数据元素</span>\n\tbool isEmpty<span class=\"token punctuation\">;</span> \t<span class=\"token comment\">// 结点是否为空</span>\n<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// 初始化</span>\n<span class=\"token keyword\">void</span> <span class=\"token function\">InitTreeNode</span><span class=\"token punctuation\">(</span><span class=\"token function\">TreeNode</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>t<span class=\"token punctuation\">)</span><span class=\"token punctuation\">[</span>MaxSize<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n\t<span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span>i<span class=\"token operator\">&lt;=</span>MaxSize<span class=\"token punctuation\">;</span>i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n\t\tt<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>isEmpty<span class=\"token operator\">=</span>true<span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span>\n<span class=\"token comment\">// 位序i结点的左孩子</span>\nTreeNode <span class=\"token function\">GetLeftC</span><span class=\"token punctuation\">(</span><span class=\"token function\">TreeNode</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>t<span class=\"token punctuation\">)</span><span class=\"token punctuation\">[</span>MaxSize<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> i<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n\t<span class=\"token keyword\">int</span> j<span class=\"token operator\">=</span><span class=\"token number\">2</span><span class=\"token operator\">*</span>i<span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>j<span class=\"token operator\">&lt;</span><span class=\"token number\">1</span><span class=\"token operator\">||</span>j<span class=\"token operator\">></span>MaxSize<span class=\"token operator\">||</span>t<span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>isEmpty<span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span> t<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">return</span> t<span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span>\n<span class=\"token comment\">// 位序i结点的右孩子</span>\nTreeNode <span class=\"token function\">GetRightC</span><span class=\"token punctuation\">(</span><span class=\"token function\">TreeNode</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>t<span class=\"token punctuation\">)</span><span class=\"token punctuation\">[</span>MaxSize<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> i<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n\t<span class=\"token keyword\">int</span> j<span class=\"token operator\">=</span><span class=\"token number\">2</span><span class=\"token operator\">*</span>i<span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>j<span class=\"token operator\">&lt;</span><span class=\"token number\">1</span><span class=\"token operator\">||</span>j<span class=\"token operator\">></span>MaxSize<span class=\"token operator\">||</span>t<span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>isEmpty<span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span> t<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">return</span> t<span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span>\n<span class=\"token comment\">// 位序i结点的父结点</span>\nTreeNode <span class=\"token function\">GetParentC</span><span class=\"token punctuation\">(</span><span class=\"token function\">TreeNode</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>t<span class=\"token punctuation\">)</span><span class=\"token punctuation\">[</span>MaxSize<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> i<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n\t<span class=\"token keyword\">int</span> j<span class=\"token operator\">=</span>i<span class=\"token operator\">/</span><span class=\"token number\">2</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>j<span class=\"token operator\">&lt;</span><span class=\"token number\">1</span><span class=\"token operator\">||</span>j<span class=\"token operator\">></span>MaxSize<span class=\"token operator\">||</span>t<span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>isEmpty<span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span> t<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">return</span> t<span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span>\n<span class=\"token comment\">// 位序i结点层次（深度）</span>\n<span class=\"token keyword\">int</span> <span class=\"token function\">GetDepth</span><span class=\"token punctuation\">(</span><span class=\"token function\">TreeNode</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>t<span class=\"token punctuation\">)</span><span class=\"token punctuation\">[</span>MaxSize<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> i<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n\t<span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>i<span class=\"token operator\">&lt;</span><span class=\"token number\">1</span><span class=\"token operator\">||</span>i<span class=\"token operator\">></span>MaxSize<span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">int</span> j<span class=\"token operator\">=</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">)</span><span class=\"token operator\">/</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">return</span> j<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span>\n<span class=\"token comment\">// 在位序i的位置插入一个结点</span>\nbool <span class=\"token function\">InsertTreeNode</span><span class=\"token punctuation\">(</span><span class=\"token function\">TreeNode</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>t<span class=\"token punctuation\">)</span><span class=\"token punctuation\">[</span>MaxSize<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> i<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> e<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n\t<span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>i<span class=\"token operator\">&lt;</span><span class=\"token number\">1</span><span class=\"token operator\">||</span>i<span class=\"token operator\">></span>MaxSize<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n\t\t<span class=\"token keyword\">return</span> false<span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">&#125;</span>\n\tTreeNode s<span class=\"token punctuation\">;</span>\n\ts<span class=\"token punctuation\">.</span>isEmpty<span class=\"token operator\">=</span>false<span class=\"token punctuation\">;</span>\n\ts<span class=\"token punctuation\">.</span>value<span class=\"token operator\">=</span>e<span class=\"token punctuation\">;</span>\n\tt<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token operator\">=</span>s<span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">return</span> true<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span>\n<span class=\"token comment\">// 删除在位序i的位置上的结点 - 要注意把他的左右孩子也删除</span>\nbool <span class=\"token function\">DeleteTreeNode</span><span class=\"token punctuation\">(</span><span class=\"token function\">TreeNode</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>t<span class=\"token punctuation\">)</span><span class=\"token punctuation\">[</span>MaxSize<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> i<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span><span class=\"token operator\">&amp;</span> e<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n\t<span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>i<span class=\"token operator\">&lt;</span><span class=\"token number\">1</span><span class=\"token operator\">||</span>i<span class=\"token operator\">></span>MaxSize<span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span> false<span class=\"token punctuation\">;</span>\n\n\t<span class=\"token function\">DeleteTreeNode</span><span class=\"token punctuation\">(</span>t<span class=\"token punctuation\">,</span><span class=\"token number\">2</span><span class=\"token operator\">*</span>i<span class=\"token punctuation\">,</span>e<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token function\">DeleteTreeNode</span><span class=\"token punctuation\">(</span>t<span class=\"token punctuation\">,</span><span class=\"token number\">2</span><span class=\"token operator\">*</span>i<span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span>e<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\te<span class=\"token operator\">=</span>t<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>value<span class=\"token punctuation\">;</span>\n\tt<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>isEmpty<span class=\"token operator\">=</span>true<span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">return</span> true<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span>\n<span class=\"token comment\">// 顺序遍历</span>\n<span class=\"token keyword\">void</span> <span class=\"token function\">PrintTreeNodeOrder</span><span class=\"token punctuation\">(</span><span class=\"token function\">TreeNode</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>t<span class=\"token punctuation\">)</span><span class=\"token punctuation\">[</span>MaxSize<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n\t<span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i<span class=\"token operator\">=</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span>i<span class=\"token operator\">&lt;</span>MaxSize<span class=\"token punctuation\">;</span>i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n\t\t<span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>t<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>isEmpty<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n\t\t\t<span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%d\\t\"</span><span class=\"token punctuation\">,</span>t<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>value<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token punctuation\">&#125;</span>\n\t<span class=\"token punctuation\">&#125;</span>\n\t<span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span>\n<span class=\"token comment\">// 遍历各个结点详细信息</span>\n<span class=\"token keyword\">void</span> <span class=\"token function\">PrintTreeNodeAll</span><span class=\"token punctuation\">(</span><span class=\"token function\">TreeNode</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>t<span class=\"token punctuation\">)</span><span class=\"token punctuation\">[</span>MaxSize<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> maxn<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n\tTreeNode tn1<span class=\"token punctuation\">,</span> tn2<span class=\"token punctuation\">,</span> tn3<span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">int</span> depth<span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> maxn<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n\t\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>t<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>isEmpty<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n\t\t\t<span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%d结点为空\\n\"</span><span class=\"token punctuation\">,</span> i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\t<span class=\"token keyword\">continue</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token punctuation\">&#125;</span>\n\t\ttn1 <span class=\"token operator\">=</span> <span class=\"token function\">GetLeftC</span><span class=\"token punctuation\">(</span>t<span class=\"token punctuation\">,</span> i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\t<span class=\"token comment\">// 左结点</span>\n\t\ttn2 <span class=\"token operator\">=</span> <span class=\"token function\">GetRightC</span><span class=\"token punctuation\">(</span>t<span class=\"token punctuation\">,</span> i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">// 有结点</span>\n\t\ttn3 <span class=\"token operator\">=</span> <span class=\"token function\">GetParentC</span><span class=\"token punctuation\">(</span>t<span class=\"token punctuation\">,</span> i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 父亲结点</span>\n\t\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>tn3<span class=\"token punctuation\">.</span>isEmpty<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n\t\t\t<span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%d结点的父结点是：%d\\t\"</span><span class=\"token punctuation\">,</span> i<span class=\"token punctuation\">,</span> tn3<span class=\"token punctuation\">.</span>value<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token punctuation\">&#125;</span>\n\t\t<span class=\"token keyword\">else</span> <span class=\"token punctuation\">&#123;</span>\n\t\t\t<span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%d结点没有父结点 \\t\"</span><span class=\"token punctuation\">,</span> i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token punctuation\">&#125;</span>\n\t\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>tn1<span class=\"token punctuation\">.</span>isEmpty<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n\t\t\t<span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%d结点的左结点是：%d\\t\"</span><span class=\"token punctuation\">,</span> i<span class=\"token punctuation\">,</span> tn1<span class=\"token punctuation\">.</span>value<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token punctuation\">&#125;</span>\n\t\t<span class=\"token keyword\">else</span> <span class=\"token punctuation\">&#123;</span>\n\t\t\t<span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%d结点没有左结点 \\t\"</span><span class=\"token punctuation\">,</span> i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token punctuation\">&#125;</span>\n\t\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>tn2<span class=\"token punctuation\">.</span>isEmpty<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n\t\t\t<span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%d结点的右结点是：%d\\t\"</span><span class=\"token punctuation\">,</span> i<span class=\"token punctuation\">,</span> tn2<span class=\"token punctuation\">.</span>value<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token punctuation\">&#125;</span>\n\t\t<span class=\"token keyword\">else</span> <span class=\"token punctuation\">&#123;</span>\n\t\t\t<span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%d结点没有右结点 \\t\"</span><span class=\"token punctuation\">,</span> i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token punctuation\">&#125;</span>\n\t\tdepth <span class=\"token operator\">=</span> <span class=\"token function\">GetDepth</span><span class=\"token punctuation\">(</span>t<span class=\"token punctuation\">,</span> i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%d结点的深度是%d\\n\"</span><span class=\"token punctuation\">,</span> i<span class=\"token punctuation\">,</span> depth<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h4 id=\"链表实现-1\"><a href=\"#链表实现-1\" class=\"headerlink\" title=\"链表实现\"></a>链表实现</h4><pre class=\"line-numbers language-c\" data-language=\"c\"><code class=\"language-c\"><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;stdio.h></span></span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;stdlib.h></span></span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;cmath></span></span>\n<span class=\"token comment\">//三叉链表</span>\n<span class=\"token keyword\">typedef</span> <span class=\"token keyword\">struct</span> <span class=\"token class-name\">BiTNode</span> <span class=\"token punctuation\">&#123;</span>\n\t<span class=\"token keyword\">int</span> data<span class=\"token punctuation\">;</span> \t\t<span class=\"token comment\">// 数据域</span>\n\t<span class=\"token keyword\">struct</span> <span class=\"token class-name\">BiTNode</span><span class=\"token operator\">*</span> lchild<span class=\"token punctuation\">,</span> <span class=\"token operator\">*</span> rchild<span class=\"token punctuation\">;</span><span class=\"token comment\">// 左右孩子指针</span>\n\t<span class=\"token keyword\">struct</span> <span class=\"token class-name\">BiTNode</span><span class=\"token operator\">*</span> parent<span class=\"token punctuation\">;</span><span class=\"token comment\">// 父亲结点</span>\n<span class=\"token punctuation\">&#125;</span>BiTNode<span class=\"token punctuation\">,</span> <span class=\"token operator\">*</span> BiTree<span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// 插入根结点</span>\nbool <span class=\"token function\">InsertRootNode</span><span class=\"token punctuation\">(</span>BiTree<span class=\"token operator\">&amp;</span> btree<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> e<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n\tbtree<span class=\"token operator\">=</span><span class=\"token punctuation\">(</span>BiTNode<span class=\"token operator\">*</span><span class=\"token punctuation\">)</span><span class=\"token function\">malloc</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">sizeof</span><span class=\"token punctuation\">(</span>BiTNode<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\tbtree<span class=\"token operator\">-></span>data<span class=\"token operator\">=</span>e<span class=\"token punctuation\">;</span>\n\tbtree<span class=\"token operator\">-></span>lchild<span class=\"token operator\">=</span><span class=\"token constant\">NULL</span><span class=\"token punctuation\">;</span>\n\tbtree<span class=\"token operator\">-></span>rchild<span class=\"token operator\">=</span><span class=\"token constant\">NULL</span><span class=\"token punctuation\">;</span>\n\tbtree<span class=\"token operator\">-></span>parent<span class=\"token operator\">=</span><span class=\"token constant\">NULL</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">return</span> true<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span>\n<span class=\"token comment\">// 1.当前p结点的左孩子</span>\nBiTNode<span class=\"token operator\">*</span> <span class=\"token function\">GetLeftC</span><span class=\"token punctuation\">(</span>BiTNode<span class=\"token operator\">*</span> p<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n\t<span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>p<span class=\"token operator\">==</span><span class=\"token constant\">NULL</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">return</span> p<span class=\"token operator\">-></span>lchild<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span>\n<span class=\"token comment\">// 2.当前p结点的右孩子</span>\nBiTNode<span class=\"token operator\">*</span> <span class=\"token function\">GetRightC</span><span class=\"token punctuation\">(</span>BiTNode<span class=\"token operator\">*</span> p<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n\t<span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>p<span class=\"token operator\">==</span><span class=\"token constant\">NULL</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">return</span> p<span class=\"token operator\">-></span>rchild<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span>\n<span class=\"token comment\">// 3.当前p结点的父亲</span>\nBiTNode<span class=\"token operator\">*</span> <span class=\"token function\">GetParent</span><span class=\"token punctuation\">(</span>BiTNode<span class=\"token operator\">*</span> p<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n\t<span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>p<span class=\"token operator\">==</span><span class=\"token constant\">NULL</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">return</span> p<span class=\"token operator\">-></span>parent<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span>\n<span class=\"token comment\">// 当前结点c插入一个左结点</span>\nbool <span class=\"token function\">InsertTreeLeftNode</span><span class=\"token punctuation\">(</span>BiTree<span class=\"token operator\">&amp;</span> c<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> e<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n\t<span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>c<span class=\"token operator\">==</span><span class=\"token constant\">NULL</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span> false<span class=\"token punctuation\">;</span>\n\tBiTNode<span class=\"token operator\">*</span> s<span class=\"token operator\">=</span><span class=\"token punctuation\">(</span>BiTree<span class=\"token punctuation\">)</span><span class=\"token function\">malloc</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">sizeof</span><span class=\"token punctuation\">(</span>BiTree<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\ts<span class=\"token operator\">-></span>data<span class=\"token operator\">=</span>e<span class=\"token punctuation\">;</span>\n\ts<span class=\"token operator\">-></span>parent<span class=\"token operator\">=</span>c<span class=\"token punctuation\">;</span>\n\ts<span class=\"token operator\">-></span>lchild<span class=\"token operator\">=</span><span class=\"token constant\">NULL</span><span class=\"token punctuation\">;</span>\n\ts<span class=\"token operator\">-></span>rchild<span class=\"token operator\">=</span><span class=\"token constant\">NULL</span><span class=\"token punctuation\">;</span>\n\tc<span class=\"token operator\">-></span>lchild<span class=\"token operator\">=</span>s<span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">return</span> true<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span>\n<span class=\"token comment\">// 当前c结点插入一个右结点</span>\nbool <span class=\"token function\">InsertTreeRightNode</span><span class=\"token punctuation\">(</span>BiTree<span class=\"token operator\">&amp;</span> c<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> e<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n\t<span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>c<span class=\"token operator\">==</span><span class=\"token constant\">NULL</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span> false<span class=\"token punctuation\">;</span>\n\tBiTNode<span class=\"token operator\">*</span> s<span class=\"token operator\">=</span><span class=\"token punctuation\">(</span>BiTree<span class=\"token punctuation\">)</span><span class=\"token function\">malloc</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">sizeof</span><span class=\"token punctuation\">(</span>BiTree<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\ts<span class=\"token operator\">-></span>data<span class=\"token operator\">=</span>e<span class=\"token punctuation\">;</span>\n\ts<span class=\"token operator\">-></span>parent<span class=\"token operator\">=</span>c<span class=\"token punctuation\">;</span>\n\ts<span class=\"token operator\">-></span>lchild<span class=\"token operator\">=</span><span class=\"token constant\">NULL</span><span class=\"token punctuation\">;</span>\n\ts<span class=\"token operator\">-></span>rchild<span class=\"token operator\">=</span><span class=\"token constant\">NULL</span><span class=\"token punctuation\">;</span>\n\tc<span class=\"token operator\">-></span>rchild<span class=\"token operator\">=</span>s<span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">return</span> true<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span>\n<span class=\"token comment\">// 删除c节点 : 要删除c结点的左右结点，并且释放空间</span>\nbool <span class=\"token function\">DeleteTreeNode</span><span class=\"token punctuation\">(</span>BiTree<span class=\"token operator\">&amp;</span> c<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n\t<span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>c<span class=\"token operator\">==</span><span class=\"token constant\">NULL</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span> false<span class=\"token punctuation\">;</span>\n\n\t<span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>c<span class=\"token operator\">-></span>lchild<span class=\"token operator\">!=</span><span class=\"token constant\">NULL</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n\t\t<span class=\"token function\">DeleteTreeNode</span><span class=\"token punctuation\">(</span>c<span class=\"token operator\">-></span>lchild<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">&#125;</span>\n\t<span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>c<span class=\"token operator\">-></span>rchild<span class=\"token operator\">!=</span><span class=\"token constant\">NULL</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n\t\t<span class=\"token function\">DeleteTreeNode</span><span class=\"token punctuation\">(</span>c<span class=\"token operator\">-></span>rchild<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">&#125;</span>\n\n\t<span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>c<span class=\"token operator\">-></span>parent<span class=\"token operator\">!=</span><span class=\"token constant\">NULL</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n\t\tBiTNode<span class=\"token operator\">*</span> s<span class=\"token operator\">=</span>c<span class=\"token operator\">-></span>parent<span class=\"token punctuation\">;</span>\n\t\t<span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>c<span class=\"token operator\">==</span>s<span class=\"token operator\">-></span>lchild<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n\t\t\ts<span class=\"token operator\">-></span>lchild<span class=\"token operator\">=</span><span class=\"token constant\">NULL</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token punctuation\">&#125;</span><span class=\"token keyword\">else</span><span class=\"token punctuation\">&#123;</span>\n\t\t\ts<span class=\"token operator\">-></span>rchild<span class=\"token operator\">=</span><span class=\"token constant\">NULL</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token punctuation\">&#125;</span>\n\t<span class=\"token punctuation\">&#125;</span>\n\n\t<span class=\"token function\">free</span><span class=\"token punctuation\">(</span>c<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">return</span> true<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span>\n<span class=\"token comment\">// 判断二叉树是否为空</span>\nbool <span class=\"token function\">Empty</span><span class=\"token punctuation\">(</span>BiTree<span class=\"token operator\">&amp;</span> root<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n\t<span class=\"token keyword\">return</span> root<span class=\"token operator\">==</span><span class=\"token constant\">NULL</span><span class=\"token operator\">?</span>true<span class=\"token operator\">:</span>false<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span>\n<span class=\"token comment\">// 辅助方法：中序遍历</span>\n<span class=\"token keyword\">void</span> <span class=\"token function\">InOrder</span><span class=\"token punctuation\">(</span>BiTree p<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span><span class=\"token comment\">// 不能引用类型</span>\n\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>p <span class=\"token operator\">!=</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n\t\t<span class=\"token function\">InOrder</span><span class=\"token punctuation\">(</span>p<span class=\"token operator\">-></span>lchild<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%d  \"</span><span class=\"token punctuation\">,</span> p<span class=\"token operator\">-></span>data<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token function\">InOrder</span><span class=\"token punctuation\">(</span>p<span class=\"token operator\">-></span>rchild<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h4 id=\"遍历\"><a href=\"#遍历\" class=\"headerlink\" title=\"遍历\"></a>遍历</h4><pre class=\"line-numbers language-c\" data-language=\"c\"><code class=\"language-c\"><span class=\"token comment\">// 本小节重点------------------------------------------------</span>\n<span class=\"token comment\">// 前序遍历</span>\n<span class=\"token keyword\">void</span> <span class=\"token function\">PreOrder</span><span class=\"token punctuation\">(</span>BiTree p<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span><span class=\"token comment\">// 不能引用类型</span>\n\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>p <span class=\"token operator\">!=</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n\t\t<span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%d  \"</span><span class=\"token punctuation\">,</span> p<span class=\"token operator\">-></span>data<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token function\">PreOrder</span><span class=\"token punctuation\">(</span>p<span class=\"token operator\">-></span>lchild<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token function\">PreOrder</span><span class=\"token punctuation\">(</span>p<span class=\"token operator\">-></span>rchild<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span>\n<span class=\"token comment\">// 中序遍历</span>\n<span class=\"token keyword\">void</span> <span class=\"token function\">InOrder</span><span class=\"token punctuation\">(</span>BiTree p<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span><span class=\"token comment\">// 不能引用类型</span>\n\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>p <span class=\"token operator\">!=</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n\t\t<span class=\"token function\">InOrder</span><span class=\"token punctuation\">(</span>p<span class=\"token operator\">-></span>lchild<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%d  \"</span><span class=\"token punctuation\">,</span> p<span class=\"token operator\">-></span>data<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token function\">InOrder</span><span class=\"token punctuation\">(</span>p<span class=\"token operator\">-></span>rchild<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span>\n<span class=\"token comment\">// 后序遍历</span>\n<span class=\"token keyword\">void</span> <span class=\"token function\">PostOrder</span><span class=\"token punctuation\">(</span>BiTree p<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span><span class=\"token comment\">// 不能引用类型</span>\n\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>p <span class=\"token operator\">!=</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n\t\t<span class=\"token function\">PostOrder</span><span class=\"token punctuation\">(</span>p<span class=\"token operator\">-></span>lchild<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token function\">PostOrder</span><span class=\"token punctuation\">(</span>p<span class=\"token operator\">-></span>rchild<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%d  \"</span><span class=\"token punctuation\">,</span> p<span class=\"token operator\">-></span>data<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span>\n<span class=\"token comment\">// 层次遍历</span>\n<span class=\"token keyword\">void</span> <span class=\"token function\">CenCi</span><span class=\"token punctuation\">(</span>BiTree<span class=\"token operator\">&amp;</span> root<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n\tqueue<span class=\"token operator\">&lt;</span>BiTNode<span class=\"token operator\">*</span><span class=\"token operator\">></span> que<span class=\"token punctuation\">;</span>\n\tque<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span>root<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\tBiTNode<span class=\"token operator\">*</span> p<span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>que<span class=\"token punctuation\">.</span><span class=\"token function\">empty</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n\t\tp<span class=\"token operator\">=</span>que<span class=\"token punctuation\">.</span><span class=\"token function\">front</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\tque<span class=\"token punctuation\">.</span><span class=\"token function\">pop</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%d \"</span><span class=\"token punctuation\">,</span>p<span class=\"token operator\">-></span>data<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>p<span class=\"token operator\">-></span>lchild<span class=\"token operator\">!=</span><span class=\"token constant\">NULL</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n\t\t\tque<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span>p<span class=\"token operator\">-></span>lchild<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token punctuation\">&#125;</span>\n\t\t<span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>p<span class=\"token operator\">-></span>rchild<span class=\"token operator\">!=</span><span class=\"token constant\">NULL</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n\t\t\tque<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span>p<span class=\"token operator\">-></span>rchild<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token punctuation\">&#125;</span>\n\t<span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span>\n<span class=\"token comment\">// 难点------------------------------------------------</span>\n<span class=\"token comment\">// 非递归遍历</span>\n<span class=\"token keyword\">void</span> <span class=\"token function\">PreOrderDiTui</span><span class=\"token punctuation\">(</span>BiTree<span class=\"token operator\">&amp;</span> root<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span><span class=\"token comment\">// 前序</span>\n\tstack<span class=\"token operator\">&lt;</span>BiTNode<span class=\"token operator\">*</span><span class=\"token operator\">></span> bistack<span class=\"token punctuation\">;</span>\n\tBiTNode<span class=\"token operator\">*</span> p<span class=\"token operator\">=</span>root<span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span>p<span class=\"token operator\">!=</span><span class=\"token constant\">NULL</span><span class=\"token operator\">||</span><span class=\"token operator\">!</span>bistack<span class=\"token punctuation\">.</span><span class=\"token function\">empty</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n\t\t<span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>p<span class=\"token operator\">!=</span><span class=\"token constant\">NULL</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n\t\t\tbistack<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span>p<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\t<span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%d \"</span><span class=\"token punctuation\">,</span>p<span class=\"token operator\">-></span>data<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\tp<span class=\"token operator\">=</span>p<span class=\"token operator\">-></span>lchild<span class=\"token punctuation\">;</span>\n\t\t<span class=\"token punctuation\">&#125;</span><span class=\"token keyword\">else</span><span class=\"token punctuation\">&#123;</span>\n\t\t\tp<span class=\"token operator\">=</span>bistack<span class=\"token punctuation\">.</span><span class=\"token function\">top</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\tbistack<span class=\"token punctuation\">.</span><span class=\"token function\">pop</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\tp<span class=\"token operator\">=</span>p<span class=\"token operator\">-></span>rchild<span class=\"token punctuation\">;</span>\n\t\t<span class=\"token punctuation\">&#125;</span>\n\t<span class=\"token punctuation\">&#125;</span>\n\t<span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span>\n<span class=\"token keyword\">void</span> <span class=\"token function\">InOrderDiTui</span><span class=\"token punctuation\">(</span>BiTree<span class=\"token operator\">&amp;</span> root<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span><span class=\"token comment\">// 中序</span>\n\tstack<span class=\"token operator\">&lt;</span>BiTNode<span class=\"token operator\">*</span><span class=\"token operator\">></span> bistack<span class=\"token punctuation\">;</span>\n\tBiTNode<span class=\"token operator\">*</span> p <span class=\"token operator\">=</span> root<span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>p <span class=\"token operator\">!=</span> <span class=\"token constant\">NULL</span> <span class=\"token operator\">||</span> <span class=\"token operator\">!</span>bistack<span class=\"token punctuation\">.</span><span class=\"token function\">empty</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n\t\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>p <span class=\"token operator\">!=</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n\t\t\tbistack<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span>p<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\tp <span class=\"token operator\">=</span> p<span class=\"token operator\">-></span>lchild<span class=\"token punctuation\">;</span>\n\t\t<span class=\"token punctuation\">&#125;</span>\n\t\t<span class=\"token keyword\">else</span> <span class=\"token punctuation\">&#123;</span>\n\t\t\tp <span class=\"token operator\">=</span> bistack<span class=\"token punctuation\">.</span><span class=\"token function\">top</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\tbistack<span class=\"token punctuation\">.</span><span class=\"token function\">pop</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\t<span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%d  \"</span><span class=\"token punctuation\">,</span> p<span class=\"token operator\">-></span>data<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\tp <span class=\"token operator\">=</span> p<span class=\"token operator\">-></span>rchild<span class=\"token punctuation\">;</span>\n\t\t<span class=\"token punctuation\">&#125;</span>\n\t<span class=\"token punctuation\">&#125;</span>\n\t<span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span>\n<span class=\"token keyword\">void</span> <span class=\"token function\">PostOrderDiTui</span><span class=\"token punctuation\">(</span>BiTree<span class=\"token operator\">&amp;</span> root<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span><span class=\"token comment\">// 后序</span>\n\tstack<span class=\"token operator\">&lt;</span>BiTNode<span class=\"token operator\">*</span><span class=\"token operator\">></span> bistack<span class=\"token punctuation\">;</span>\n\tBiTNode<span class=\"token operator\">*</span> p <span class=\"token operator\">=</span> root<span class=\"token punctuation\">;</span>\n\tBiTNode<span class=\"token operator\">*</span> lastp <span class=\"token operator\">=</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">;</span><span class=\"token comment\">// 上一个访问的结点 ,关键点！，用来判断是否右子树返回</span>\n\t<span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span>p<span class=\"token operator\">!=</span><span class=\"token constant\">NULL</span><span class=\"token operator\">||</span><span class=\"token operator\">!</span>bistack<span class=\"token punctuation\">.</span><span class=\"token function\">empty</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n\t\t<span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>p<span class=\"token operator\">!=</span><span class=\"token constant\">NULL</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n\t\t\tbistack<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span>p<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\tp<span class=\"token operator\">=</span>p<span class=\"token operator\">-></span>lchild<span class=\"token punctuation\">;</span>\n\t\t<span class=\"token punctuation\">&#125;</span><span class=\"token keyword\">else</span><span class=\"token punctuation\">&#123;</span>\n\n\t\t\tp<span class=\"token operator\">=</span>bistack<span class=\"token punctuation\">.</span><span class=\"token function\">top</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\t\t\t<span class=\"token comment\">//此时有两种可能</span>\n\t\t\t<span class=\"token comment\">//1.访问完左子树再次回到父节点(需继续访问右子树，如果右子树为空就不访问了)</span>\n\t\t\t<span class=\"token comment\">//2.访问完右子树或右子树为空（直接pop并访问）</span>\n\t\t\t<span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>p<span class=\"token operator\">-></span>rchild<span class=\"token operator\">==</span><span class=\"token constant\">NULL</span><span class=\"token operator\">||</span>lastp<span class=\"token operator\">==</span>p<span class=\"token operator\">-></span>rchild<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n\t\t\t\tbistack<span class=\"token punctuation\">.</span><span class=\"token function\">pop</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\t\t<span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%d \"</span><span class=\"token punctuation\">,</span>p<span class=\"token operator\">-></span>data<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\t\tlastp<span class=\"token operator\">=</span>p<span class=\"token punctuation\">;</span>\n\t\t\t\tp<span class=\"token operator\">=</span><span class=\"token constant\">NULL</span><span class=\"token punctuation\">;</span>\n\t\t\t<span class=\"token punctuation\">&#125;</span><span class=\"token keyword\">else</span><span class=\"token punctuation\">&#123;</span>\n\t\t\t\tp<span class=\"token operator\">=</span>p<span class=\"token operator\">-></span>rchild<span class=\"token punctuation\">;</span>\n\t\t\t<span class=\"token punctuation\">&#125;</span>\n\t\t<span class=\"token punctuation\">&#125;</span>\n\t<span class=\"token punctuation\">&#125;</span>\n\t<span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h4 id=\"由遍历序列构建二叉树\"><a href=\"#由遍历序列构建二叉树\" class=\"headerlink\" title=\"由遍历序列构建二叉树\"></a>由遍历序列构建二叉树</h4><p>必须要有中序遍历序列才可以。</p>\n<h3 id=\"线索二叉树\"><a href=\"#线索二叉树\" class=\"headerlink\" title=\"线索二叉树\"></a>线索二叉树</h3><p><img src=\"/img/image-20230312200926034.png\" alt=\"image-20230312200926034\"></p>\n<p>（错误：rtag&#x3D;1）</p>\n<p><img src=\"/img/image-20230312202310509.png\" alt=\"image-20230312202310509\"></p>\n<p><img src=\"/img/image-20230312202510912.png\" alt=\"image-20230312202510912\"></p>\n<p><img src=\"/img/image-20230312202634984.png\" alt=\"image-20230312202634984\"></p>\n<p><img src=\"/img/image-20230312233931414.png\" alt=\"image-20230312233931414\"></p>\n<p><img src=\"/img/image-20230312234434068.png\" alt=\"image-20230312234434068\"></p>\n<h3 id=\"树的存储结构\"><a href=\"#树的存储结构\" class=\"headerlink\" title=\"树的存储结构\"></a>树的存储结构</h3><h4 id=\"双亲表示法\"><a href=\"#双亲表示法\" class=\"headerlink\" title=\"双亲表示法\"></a>双亲表示法</h4><p><img src=\"/img/image-20230312235644407.png\" alt=\"image-20230312235644407\"></p>\n<h4 id=\"孩子表示法\"><a href=\"#孩子表示法\" class=\"headerlink\" title=\"孩子表示法\"></a>孩子表示法</h4><p><img src=\"/img/image-20230312235716415.png\" alt=\"image-20230312235716415\"></p>\n<h4 id=\"孩子兄弟表示法\"><a href=\"#孩子兄弟表示法\" class=\"headerlink\" title=\"孩子兄弟表示法\"></a>孩子兄弟表示法</h4><p><img src=\"/img/image-20230312235915935.png\" alt=\"image-20230312235915935\"></p>\n<p><img src=\"/img/image-20230313000009106.png\" alt=\"image-20230313000009106\"></p>\n<p><img src=\"/img/image-20230313000145126.png\" alt=\"image-20230313000145126\"></p>\n<h3 id=\"二叉排序树（BTS）\"><a href=\"#二叉排序树（BTS）\" class=\"headerlink\" title=\"二叉排序树（BTS）\"></a>二叉排序树（BTS）</h3><p><img src=\"/img/image-20230313142323649.png\" alt=\"image-20230313142323649\"></p>\n<pre class=\"line-numbers language-c\" data-language=\"c\"><code class=\"language-c\"><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;stdio.h></span></span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;stdlib.h></span></span>\n<span class=\"token comment\">//二叉排序树</span>\n\n<span class=\"token keyword\">typedef</span> <span class=\"token keyword\">struct</span> <span class=\"token class-name\">BSTNode</span>\n<span class=\"token punctuation\">&#123;</span>\n\t<span class=\"token keyword\">int</span> data<span class=\"token punctuation\">;</span>\n\tBSTNode <span class=\"token operator\">*</span>lchild<span class=\"token punctuation\">;</span>  <span class=\"token comment\">//左孩子</span>\n\tBSTNode <span class=\"token operator\">*</span>rchild<span class=\"token punctuation\">;</span>  <span class=\"token comment\">//右孩子</span>\n<span class=\"token punctuation\">&#125;</span>BSTNode<span class=\"token punctuation\">,</span> <span class=\"token operator\">*</span>BSTree<span class=\"token punctuation\">;</span>\n\nBSTNode<span class=\"token operator\">*</span> <span class=\"token function\">Search</span><span class=\"token punctuation\">(</span>BSTree t<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> key<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n\t<span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span>t<span class=\"token operator\">!=</span><span class=\"token constant\">NULL</span><span class=\"token operator\">&amp;&amp;</span>key<span class=\"token operator\">!=</span>t<span class=\"token operator\">-></span>data<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span> <span class=\"token comment\">//如果查找到空，或查找到对应值，退出循环</span>\n\t\t<span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>key<span class=\"token operator\">&lt;</span>t<span class=\"token operator\">-></span>data<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n\t\t\tt<span class=\"token operator\">=</span>t<span class=\"token operator\">-></span>lchild<span class=\"token punctuation\">;</span>\n\t\t<span class=\"token punctuation\">&#125;</span><span class=\"token keyword\">else</span><span class=\"token punctuation\">&#123;</span>\n\t\t\tt<span class=\"token operator\">=</span>t<span class=\"token operator\">-></span>rchild<span class=\"token punctuation\">;</span>\n\t\t<span class=\"token punctuation\">&#125;</span>\n\t<span class=\"token punctuation\">&#125;</span>\n\t<span class=\"token keyword\">return</span> t<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token keyword\">void</span> <span class=\"token function\">InOderTraverse</span><span class=\"token punctuation\">(</span>BSTree bst<span class=\"token punctuation\">)</span>   <span class=\"token comment\">//中序递归遍历二叉树</span>\n<span class=\"token punctuation\">&#123;</span>\n\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token constant\">NULL</span> <span class=\"token operator\">!=</span> bst<span class=\"token punctuation\">)</span>\n\t<span class=\"token punctuation\">&#123;</span>\n\t\t<span class=\"token function\">InOderTraverse</span><span class=\"token punctuation\">(</span>bst<span class=\"token operator\">-></span>lchild<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%d \"</span><span class=\"token punctuation\">,</span> bst<span class=\"token operator\">-></span>data<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token function\">InOderTraverse</span><span class=\"token punctuation\">(</span>bst<span class=\"token operator\">-></span>rchild<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token comment\">//插入节点</span>\nbool <span class=\"token function\">Insert</span><span class=\"token punctuation\">(</span>BSTree <span class=\"token operator\">&amp;</span>t<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> key<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">&#123;</span>\n\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token constant\">NULL</span> <span class=\"token operator\">==</span> t<span class=\"token punctuation\">)</span>  <span class=\"token comment\">//空树</span>\n\t<span class=\"token punctuation\">&#123;</span>\n\t\tt<span class=\"token operator\">=</span><span class=\"token punctuation\">(</span>BSTree<span class=\"token punctuation\">)</span><span class=\"token function\">malloc</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">sizeof</span><span class=\"token punctuation\">(</span>BSTNode<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\tt<span class=\"token operator\">-></span>data<span class=\"token operator\">=</span>key<span class=\"token punctuation\">;</span>\n\t\tt<span class=\"token operator\">-></span>lchild<span class=\"token operator\">=</span><span class=\"token constant\">NULL</span><span class=\"token punctuation\">;</span>\n\t\tt<span class=\"token operator\">-></span>rchild<span class=\"token operator\">=</span><span class=\"token constant\">NULL</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token keyword\">return</span> true<span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">&#125;</span><span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>t<span class=\"token operator\">-></span>data<span class=\"token operator\">==</span>key<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>  <span class=\"token comment\">//已经存在，插入失败</span>\n\t\t<span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"\\nThe node(%d) already exists.\\n\"</span><span class=\"token punctuation\">,</span> key<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token keyword\">return</span> false<span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">&#125;</span><span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>t<span class=\"token operator\">-></span>data<span class=\"token operator\">&lt;</span>key<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n\t\t<span class=\"token keyword\">return</span> <span class=\"token function\">Insert</span><span class=\"token punctuation\">(</span>t<span class=\"token operator\">-></span>rchild<span class=\"token punctuation\">,</span>key<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">&#125;</span><span class=\"token keyword\">else</span><span class=\"token punctuation\">&#123;</span>\n\t\t<span class=\"token keyword\">return</span> <span class=\"token function\">Insert</span><span class=\"token punctuation\">(</span>t<span class=\"token operator\">-></span>lchild<span class=\"token punctuation\">,</span>key<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token comment\">//创建二叉排序树</span>\n<span class=\"token keyword\">void</span> <span class=\"token function\">create</span><span class=\"token punctuation\">(</span>BSTree <span class=\"token operator\">&amp;</span>t<span class=\"token punctuation\">,</span><span class=\"token keyword\">int</span> str<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span><span class=\"token keyword\">int</span> length<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n\t<span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span>i<span class=\"token operator\">&lt;</span>length<span class=\"token punctuation\">;</span>i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n\t\t<span class=\"token function\">Insert</span><span class=\"token punctuation\">(</span>t<span class=\"token punctuation\">,</span>str<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token comment\">/*\n删除分三种情况：\n(1)被删除的节点无孩子，说明该节点是叶子节点，直接删\n(2)被删除的节点只有左孩子或者右孩子，直接删，并将其左孩子或者右孩子放在被删节点的位置\n(3)被删除的节点既有右孩子又有右孩子\n1.找到左子树的最右节点（没有右孩子），来替代删除节点，再由节点的左孩子替代它 ----此处用这种方法\n2.找到右子树的最左节点（没有左孩子），来替代删除节点，再由节点的右孩子替代它\n*/</span>\nbool <span class=\"token function\">Delete</span><span class=\"token punctuation\">(</span>BSTree<span class=\"token operator\">&amp;</span> T<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> key<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">&#123;</span>\n\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token constant\">NULL</span> <span class=\"token operator\">==</span> T<span class=\"token operator\">||</span><span class=\"token function\">Search</span><span class=\"token punctuation\">(</span>T<span class=\"token punctuation\">,</span>key<span class=\"token punctuation\">)</span><span class=\"token operator\">==</span><span class=\"token constant\">NULL</span><span class=\"token punctuation\">)</span>\n\t<span class=\"token punctuation\">&#123;</span>\n\t\t<span class=\"token keyword\">return</span> false<span class=\"token punctuation\">;</span>  <span class=\"token comment\">//空树或者差找不到直接报错</span>\n\t<span class=\"token punctuation\">&#125;</span>\n\n\tBSTNode<span class=\"token operator\">*</span> p<span class=\"token operator\">=</span><span class=\"token function\">Search</span><span class=\"token punctuation\">(</span>T<span class=\"token punctuation\">,</span>key<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\tBSTNode<span class=\"token operator\">*</span> q<span class=\"token punctuation\">;</span>\n\tBSTNode<span class=\"token operator\">*</span> s<span class=\"token punctuation\">;</span>\n\n\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span> p<span class=\"token operator\">-></span>lchild<span class=\"token operator\">==</span><span class=\"token constant\">NULL</span> <span class=\"token operator\">&amp;&amp;</span>  p<span class=\"token operator\">-></span>rchild <span class=\"token operator\">!=</span><span class=\"token constant\">NULL</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\">//无左孩子,有右孩子</span>\n\t<span class=\"token punctuation\">&#123;</span>\n\t\tq <span class=\"token operator\">=</span> p<span class=\"token operator\">-></span>rchild<span class=\"token punctuation\">;</span>\n\t\tp<span class=\"token operator\">-></span>data <span class=\"token operator\">=</span> q<span class=\"token operator\">-></span>data<span class=\"token punctuation\">;</span>\n\t\tp<span class=\"token operator\">-></span>rchild <span class=\"token operator\">=</span> q<span class=\"token operator\">-></span>rchild<span class=\"token punctuation\">;</span>\n\t\tp<span class=\"token operator\">-></span>lchild <span class=\"token operator\">=</span> q<span class=\"token operator\">-></span>lchild<span class=\"token punctuation\">;</span>\n\t\t<span class=\"token function\">free</span><span class=\"token punctuation\">(</span>q<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">&#125;</span>\n\t<span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token constant\">NULL</span> <span class=\"token operator\">==</span> p<span class=\"token operator\">-></span>rchild <span class=\"token operator\">&amp;&amp;</span> <span class=\"token constant\">NULL</span> <span class=\"token operator\">!=</span> p<span class=\"token operator\">-></span>lchild<span class=\"token punctuation\">)</span>  <span class=\"token comment\">//无右孩子,有左孩子</span>\n\t<span class=\"token punctuation\">&#123;</span>\n\t\tq <span class=\"token operator\">=</span> p<span class=\"token operator\">-></span>lchild<span class=\"token punctuation\">;</span>\n\t\tp<span class=\"token operator\">-></span>data <span class=\"token operator\">=</span> q<span class=\"token operator\">-></span>data<span class=\"token punctuation\">;</span>\n\t\tp<span class=\"token operator\">-></span>rchild <span class=\"token operator\">=</span> q<span class=\"token operator\">-></span>rchild<span class=\"token punctuation\">;</span>\n\t\tp<span class=\"token operator\">-></span>lchild <span class=\"token operator\">=</span> q<span class=\"token operator\">-></span>lchild<span class=\"token punctuation\">;</span>\n\t\t<span class=\"token function\">free</span><span class=\"token punctuation\">(</span>q<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">&#125;</span>\n\t<span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token constant\">NULL</span> <span class=\"token operator\">!=</span> p<span class=\"token operator\">-></span>rchild <span class=\"token operator\">&amp;&amp;</span> <span class=\"token constant\">NULL</span> <span class=\"token operator\">!=</span> p<span class=\"token operator\">-></span>lchild<span class=\"token punctuation\">)</span> <span class=\"token comment\">//既有左孩子，又有右孩子</span>\n\t<span class=\"token punctuation\">&#123;</span>\n\t\tq <span class=\"token operator\">=</span> p<span class=\"token punctuation\">;</span>\n\t\ts <span class=\"token operator\">=</span> p<span class=\"token operator\">-></span>lchild<span class=\"token punctuation\">;</span>   <span class=\"token comment\">//找左孩子的最右孩子--s</span>\n\t\t\t<span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>s<span class=\"token operator\">-></span>rchild<span class=\"token punctuation\">)</span>\n\t\t\t<span class=\"token punctuation\">&#123;</span>\n\t\t\t\tq <span class=\"token operator\">=</span> s<span class=\"token punctuation\">;</span>    <span class=\"token comment\">//q存储s的父节点</span>\n\t\t\t\ts <span class=\"token operator\">=</span> s<span class=\"token operator\">-></span>rchild<span class=\"token punctuation\">;</span>\n\t\t\t<span class=\"token punctuation\">&#125;</span>\n\t\t\tp<span class=\"token operator\">-></span>data <span class=\"token operator\">=</span> s<span class=\"token operator\">-></span>data<span class=\"token punctuation\">;</span>\n\n\t\t\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>q <span class=\"token operator\">!=</span> p<span class=\"token punctuation\">)</span>\n\t\t\t<span class=\"token punctuation\">&#123;</span>\n\t\t\t\tq<span class=\"token operator\">-></span>rchild <span class=\"token operator\">=</span> s<span class=\"token operator\">-></span>lchild<span class=\"token punctuation\">;</span><span class=\"token comment\">//用s的左孩子替代s</span>\n\t\t\t<span class=\"token punctuation\">&#125;</span>\n\t\t\t<span class=\"token keyword\">else</span>\n\t\t\t<span class=\"token punctuation\">&#123;</span>\n\t\t\t\tq<span class=\"token operator\">-></span>lchild <span class=\"token operator\">=</span> s<span class=\"token operator\">-></span>lchild<span class=\"token punctuation\">;</span> <span class=\"token comment\">//如果p的左孩子没有右孩子，也就是说p的左孩子就是左子树的最右结点</span>\n\t\t\t<span class=\"token punctuation\">&#125;</span>\n\t\t\t<span class=\"token function\">free</span><span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token punctuation\">&#125;</span>\n\t\t<span class=\"token keyword\">else</span>  <span class=\"token comment\">//叶子结点</span>\n\t\t<span class=\"token punctuation\">&#123;</span>\n\t\t\t<span class=\"token function\">free</span><span class=\"token punctuation\">(</span>p<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token punctuation\">&#125;</span>\n\t\t<span class=\"token keyword\">return</span> true<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h3 id=\"平衡二叉树（AVL）\"><a href=\"#平衡二叉树（AVL）\" class=\"headerlink\" title=\"平衡二叉树（AVL）\"></a>平衡二叉树（AVL）</h3><p><img src=\"/img/image-20230313152717937.png\" alt=\"image-20230313152717937\"></p>\n<p>二叉排序树的平均查找长度（ASL）：</p>\n<ul>\n<li>最好情况：O（log2n）——平衡二叉树</li>\n<li>最坏：O（n）</li>\n</ul>\n<ol>\n<li><p>LL</p>\n<p><img src=\"/img/image-20230313154007360.png\" alt=\"image-20230313154007360\"></p>\n</li>\n<li><p>RR 同理，左旋</p>\n</li>\n<li><p>LR 先左旋后右旋</p>\n<p><img src=\"/img/image-20230313155606272.png\" alt=\"image-20230313155606272\"></p>\n</li>\n<li><p>RL 先右旋后左旋</p>\n</li>\n</ol>\n<h3 id=\"哈夫曼树（最优树）\"><a href=\"#哈夫曼树（最优树）\" class=\"headerlink\" title=\"哈夫曼树（最优树）\"></a>哈夫曼树（最优树）</h3><p>路径长度：路径上经过的边个数</p>\n<p>树的带权路径长度（WPL）：树中所有<strong>叶子结点</strong>的带权路径长度之和</p>\n<p>WPL 最小的树就是哈夫曼树</p>\n<p><img src=\"/img/image-20230313162027617.png\" alt=\"image-20230313162027617\"></p>\n<p><img src=\"/img/image-20230313162756408.png\" alt=\"image-20230313162756408\"></p>\n<h3 id=\"并查集（Disjoint-Set）\"><a href=\"#并查集（Disjoint-Set）\" class=\"headerlink\" title=\"并查集（Disjoint Set）\"></a>并查集（Disjoint Set）</h3><p>用森林中的不同树表示互不相关的集合。</p>\n<p>查：查询某个节点所在树的根节点</p>\n<p>并：将两个树合并，也就是将两个集合合并为一个集合 时间复杂度 O（1）</p>\n<p>并查集更适合用双亲表示法实现：合并时改变 parent 数据即可</p>\n<p>初始化：将所有 s[]设为-1</p>\n<p><img src=\"/img/image-20230313190153724.png\" alt=\"image-20230313190153724\"></p>\n<p>注：Find 操作中，树的高度会影响时间复杂度</p>\n<p><strong>怎么尽可能减小树的高度呢？</strong></p>\n<p><img src=\"/img/image-20230313190828701.png\" alt=\"image-20230313190828701\"></p>\n<p>经过优化，Find 的时间复杂度最差 O（log2n）</p>\n<p>终极优化：</p>\n<p><img src=\"/img/image-20230313191616836.png\" alt=\"image-20230313191616836\"></p>\n<p><img src=\"/img/image-20230313191855018.png\" alt=\"image-20230313191855018\"></p>\n","feature":true,"text":"数据结构最近跟着 b 站上的王道课程重新学了一遍数据结构，因为时间来不及有一些知识点没有敲代码 线性表顺序表#顺序表的静态存储 #include &lt;stdio.h> #define MaxSize 10 // 定义最大长度 typedef struct &#123; int...","link":"","photos":[],"count_time":{"symbolsCount":"31k","symbolsTime":"28 mins."},"categories":[],"tags":[{"name":"基础知识","slug":"基础知识","count":3,"path":"api/tags/基础知识.json"}],"toc":"<ol class=\"toc\"><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84\"><span class=\"toc-text\">数据结构</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E7%BA%BF%E6%80%A7%E8%A1%A8\"><span class=\"toc-text\">线性表</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E9%A1%BA%E5%BA%8F%E8%A1%A8\"><span class=\"toc-text\">顺序表</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E9%93%BE%E8%A1%A8\"><span class=\"toc-text\">链表</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E4%B8%8D%E5%B8%A6%E5%A4%B4%E8%8A%82%E7%82%B9%E7%9A%84%E5%8D%95%E9%93%BE%E8%A1%A8\"><span class=\"toc-text\">不带头节点的单链表</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E5%B8%A6%E5%A4%B4%E7%BB%93%E7%82%B9%E7%9A%84%E5%8D%95%E9%93%BE%E8%A1%A8\"><span class=\"toc-text\">带头结点的单链表</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E5%B8%A6%E5%A4%B4%E7%BB%93%E7%82%B9%E7%9A%84%E5%8F%8C%E9%93%BE%E8%A1%A8\"><span class=\"toc-text\">带头结点的双链表</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E5%BE%AA%E7%8E%AF%E5%8D%95%E9%93%BE%E8%A1%A8%EF%BC%88%E5%B8%A6%E5%A4%B4%E7%BB%93%E7%82%B9%EF%BC%89\"><span class=\"toc-text\">循环单链表（带头结点）</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E5%B8%A6%E5%A4%B4%E7%BB%93%E7%82%B9%E7%9A%84%E5%BE%AA%E7%8E%AF%E5%8F%8C%E9%93%BE%E8%A1%A8\"><span class=\"toc-text\">带头结点的循环双链表</span></a></li></ol></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E6%A0%88\"><span class=\"toc-text\">栈</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E5%AE%9E%E7%8E%B0\"><span class=\"toc-text\">实现</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E9%93%BE%E5%BC%8F%E5%AE%9E%E7%8E%B0\"><span class=\"toc-text\">链式实现</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E6%95%B0%E7%BB%84%E5%AE%9E%E7%8E%B0\"><span class=\"toc-text\">数组实现</span></a></li></ol></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E6%A0%88%E7%9A%84%E5%BA%94%E7%94%A8\"><span class=\"toc-text\">栈的应用</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E6%8B%AC%E5%8F%B7%E5%8C%B9%E9%85%8D\"><span class=\"toc-text\">括号匹配</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E4%B8%AD%E7%BC%80%E8%BD%AC%E5%90%8E%E7%BC%80%E5%8F%8A%E8%AE%A1%E7%AE%97\"><span class=\"toc-text\">中缀转后缀及计算</span></a></li></ol></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E9%98%9F%E5%88%97\"><span class=\"toc-text\">队列</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E6%95%B0%E7%BB%84%E5%AE%9E%E7%8E%B0-1\"><span class=\"toc-text\">数组实现</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E9%93%BE%E8%A1%A8%E5%AE%9E%E7%8E%B0\"><span class=\"toc-text\">链表实现</span></a></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E4%B8%B2\"><span class=\"toc-text\">串</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E6%A0%91\"><span class=\"toc-text\">树</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E4%BA%8C%E5%8F%89%E6%A0%91%E5%9F%BA%E6%9C%AC%E6%93%8D%E4%BD%9C\"><span class=\"toc-text\">二叉树基本操作</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E6%95%B0%E7%BB%84%E5%AE%9E%E7%8E%B0-2\"><span class=\"toc-text\">数组实现</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E9%93%BE%E8%A1%A8%E5%AE%9E%E7%8E%B0-1\"><span class=\"toc-text\">链表实现</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E9%81%8D%E5%8E%86\"><span class=\"toc-text\">遍历</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E7%94%B1%E9%81%8D%E5%8E%86%E5%BA%8F%E5%88%97%E6%9E%84%E5%BB%BA%E4%BA%8C%E5%8F%89%E6%A0%91\"><span class=\"toc-text\">由遍历序列构建二叉树</span></a></li></ol></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E7%BA%BF%E7%B4%A2%E4%BA%8C%E5%8F%89%E6%A0%91\"><span class=\"toc-text\">线索二叉树</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E6%A0%91%E7%9A%84%E5%AD%98%E5%82%A8%E7%BB%93%E6%9E%84\"><span class=\"toc-text\">树的存储结构</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E5%8F%8C%E4%BA%B2%E8%A1%A8%E7%A4%BA%E6%B3%95\"><span class=\"toc-text\">双亲表示法</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E5%AD%A9%E5%AD%90%E8%A1%A8%E7%A4%BA%E6%B3%95\"><span class=\"toc-text\">孩子表示法</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E5%AD%A9%E5%AD%90%E5%85%84%E5%BC%9F%E8%A1%A8%E7%A4%BA%E6%B3%95\"><span class=\"toc-text\">孩子兄弟表示法</span></a></li></ol></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E4%BA%8C%E5%8F%89%E6%8E%92%E5%BA%8F%E6%A0%91%EF%BC%88BTS%EF%BC%89\"><span class=\"toc-text\">二叉排序树（BTS）</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E5%B9%B3%E8%A1%A1%E4%BA%8C%E5%8F%89%E6%A0%91%EF%BC%88AVL%EF%BC%89\"><span class=\"toc-text\">平衡二叉树（AVL）</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E5%93%88%E5%A4%AB%E6%9B%BC%E6%A0%91%EF%BC%88%E6%9C%80%E4%BC%98%E6%A0%91%EF%BC%89\"><span class=\"toc-text\">哈夫曼树（最优树）</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E5%B9%B6%E6%9F%A5%E9%9B%86%EF%BC%88Disjoint-Set%EF%BC%89\"><span class=\"toc-text\">并查集（Disjoint Set）</span></a></li></ol></li></ol></li></ol>","author":{"name":"Serena","slug":"blog-author","avatar":"/img/logo.png","link":"/","description":"一位正在重塑知识的技术人 <br /> @ <b>QQ：1424935869</b>","socials":{"github":"https://github.com/YangYue2022","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"https://m.weibo.cn/","zhihu":"","csdn":"https://blog.csdn.net/Serena2000?spm=1000.2115.3001.5343","juejin":"","customs":{}}},"mapped":true,"prev_post":{"title":"数据结构（2）","uid":"36c6381217e805c389535529f356949e","slug":"数据结构2","date":"2023-03-16T16:00:00.000Z","updated":"2023-03-17T06:03:02.373Z","comments":true,"path":"api/articles/数据结构2.json","keywords":null,"cover":[],"text":"图图的存储方式邻接矩阵法 空间复杂度 O(n2)，不适合存储稀疏图，浪费空间 矩阵相乘：A^(2)得到的矩阵代表从顶点 i 到 j 长度为 2 的路径条数 邻接表法 十字链表（有向图） 邻接多重表（无向图）当使用邻接表存储时，一条边会对应两份冗余数据，删除节点时很麻烦 遍历#in...","link":"","photos":[],"count_time":{"symbolsCount":"10k","symbolsTime":"9 mins."},"categories":[],"tags":[{"name":"基础知识","slug":"基础知识","count":3,"path":"api/tags/基础知识.json"}],"author":{"name":"Serena","slug":"blog-author","avatar":"/img/logo.png","link":"/","description":"一位正在重塑知识的技术人 <br /> @ <b>QQ：1424935869</b>","socials":{"github":"https://github.com/YangYue2022","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"https://m.weibo.cn/","zhihu":"","csdn":"https://blog.csdn.net/Serena2000?spm=1000.2115.3001.5343","juejin":"","customs":{}}},"feature":true},"next_post":{"title":"SpringMVC","uid":"cd53cdbf97b8f99c953dd3eda45eed25","slug":"SpringMVC","date":"2023-03-02T16:00:00.000Z","updated":"2023-03-03T07:58:11.688Z","comments":true,"path":"api/articles/SpringMVC.json","keywords":null,"cover":[],"text":"Spring MVC 项目结构 controller 控制层 dao 数据访问层 service 业务层 model 是自带结构 模板文件放在 templates model 和模板文件通过模板引擎 Thymeleaf 形成 HTML request&amp;response@R...","link":"","photos":[],"count_time":{"symbolsCount":"4.4k","symbolsTime":"4 mins."},"categories":[],"tags":[{"name":"Spring","slug":"Spring","count":3,"path":"api/tags/Spring.json"}],"author":{"name":"Serena","slug":"blog-author","avatar":"/img/logo.png","link":"/","description":"一位正在重塑知识的技术人 <br /> @ <b>QQ：1424935869</b>","socials":{"github":"https://github.com/YangYue2022","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"https://m.weibo.cn/","zhihu":"","csdn":"https://blog.csdn.net/Serena2000?spm=1000.2115.3001.5343","juejin":"","customs":{}}}}}